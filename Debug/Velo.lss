
Velo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001282  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00001282  00001336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  008000ea  008000ea  000013c0  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000013c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000013c3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001b8  00000000  00000000  00001430  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b03  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b17  00000000  00000000  000030eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e3f  00000000  00000000  00003c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000418  00000000  00000000  00004a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000777  00000000  00000000  00004e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001054  00000000  00000000  000055d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  00006627  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	32 c1       	rjmp	.+612    	; 0x266 <__ctors_end>
       2:	4c c1       	rjmp	.+664    	; 0x29c <__bad_interrupt>
       4:	56 c1       	rjmp	.+684    	; 0x2b2 <__vector_2>
       6:	ae c2       	rjmp	.+1372   	; 0x564 <__vector_3>
       8:	49 c1       	rjmp	.+658    	; 0x29c <__bad_interrupt>
       a:	48 c1       	rjmp	.+656    	; 0x29c <__bad_interrupt>
       c:	47 c1       	rjmp	.+654    	; 0x29c <__bad_interrupt>
       e:	46 c1       	rjmp	.+652    	; 0x29c <__bad_interrupt>
      10:	45 c1       	rjmp	.+650    	; 0x29c <__bad_interrupt>
      12:	44 c1       	rjmp	.+648    	; 0x29c <__bad_interrupt>
      14:	6b c1       	rjmp	.+726    	; 0x2ec <__vector_10>
      16:	42 c1       	rjmp	.+644    	; 0x29c <__bad_interrupt>
      18:	41 c1       	rjmp	.+642    	; 0x29c <__bad_interrupt>
      1a:	40 c1       	rjmp	.+640    	; 0x29c <__bad_interrupt>
      1c:	3f c1       	rjmp	.+638    	; 0x29c <__bad_interrupt>

0000001e <__trampolines_end>:
	...
      26:	00 2f       	mov	r16, r16
      28:	00 00       	nop
      2a:	00 00       	nop
      2c:	07 00       	.word	0x0007	; ????
      2e:	07 00       	.word	0x0007	; ????
      30:	00 14       	cp	r0, r0
      32:	7f 14       	cp	r7, r15
      34:	7f 14       	cp	r7, r15
      36:	00 24       	eor	r0, r0
      38:	2a 7f       	andi	r18, 0xFA	; 250
      3a:	2a 12       	cpse	r2, r26
      3c:	00 62       	ori	r16, 0x20	; 32
      3e:	64 08       	sbc	r6, r4
      40:	13 23       	and	r17, r19
      42:	00 36       	cpi	r16, 0x60	; 96
      44:	49 55       	subi	r20, 0x59	; 89
      46:	22 50       	subi	r18, 0x02	; 2
      48:	00 00       	nop
      4a:	05 03       	mulsu	r16, r21
      4c:	00 00       	nop
      4e:	00 00       	nop
      50:	1c 22       	and	r1, r28
      52:	41 00       	.word	0x0041	; ????
      54:	00 00       	nop
      56:	41 22       	and	r4, r17
      58:	1c 00       	.word	0x001c	; ????
      5a:	00 14       	cp	r0, r0
      5c:	08 3e       	cpi	r16, 0xE8	; 232
      5e:	08 14       	cp	r0, r8
      60:	00 08       	sbc	r0, r0
      62:	08 3e       	cpi	r16, 0xE8	; 232
      64:	08 08       	sbc	r0, r8
      66:	00 00       	nop
      68:	00 a0       	ldd	r0, Z+32	; 0x20
      6a:	60 00       	.word	0x0060	; ????
      6c:	00 08       	sbc	r0, r0
      6e:	08 08       	sbc	r0, r8
      70:	08 08       	sbc	r0, r8
      72:	00 00       	nop
      74:	60 60       	ori	r22, 0x00	; 0
      76:	00 00       	nop
      78:	00 20       	and	r0, r0
      7a:	10 08       	sbc	r1, r0
      7c:	04 02       	muls	r16, r20
      7e:	00 3e       	cpi	r16, 0xE0	; 224
      80:	51 49       	sbci	r21, 0x91	; 145
      82:	45 3e       	cpi	r20, 0xE5	; 229
      84:	00 00       	nop
      86:	42 7f       	andi	r20, 0xF2	; 242
      88:	40 00       	.word	0x0040	; ????
      8a:	00 42       	sbci	r16, 0x20	; 32
      8c:	61 51       	subi	r22, 0x11	; 17
      8e:	49 46       	sbci	r20, 0x69	; 105
      90:	00 21       	and	r16, r0
      92:	41 45       	sbci	r20, 0x51	; 81
      94:	4b 31       	cpi	r20, 0x1B	; 27
      96:	00 18       	sub	r0, r0
      98:	14 12       	cpse	r1, r20
      9a:	7f 10       	cpse	r7, r15
      9c:	00 27       	eor	r16, r16
      9e:	45 45       	sbci	r20, 0x55	; 85
      a0:	45 39       	cpi	r20, 0x95	; 149
      a2:	00 3c       	cpi	r16, 0xC0	; 192
      a4:	4a 49       	sbci	r20, 0x9A	; 154
      a6:	49 30       	cpi	r20, 0x09	; 9
      a8:	00 01       	movw	r0, r0
      aa:	71 09       	sbc	r23, r1
      ac:	05 03       	mulsu	r16, r21
      ae:	00 36       	cpi	r16, 0x60	; 96
      b0:	49 49       	sbci	r20, 0x99	; 153
      b2:	49 36       	cpi	r20, 0x69	; 105
      b4:	00 06       	cpc	r0, r16
      b6:	49 49       	sbci	r20, 0x99	; 153
      b8:	29 1e       	adc	r2, r25
      ba:	00 00       	nop
      bc:	36 36       	cpi	r19, 0x66	; 102
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	56 36       	cpi	r21, 0x66	; 102
      c4:	00 00       	nop
      c6:	00 08       	sbc	r0, r0
      c8:	14 22       	and	r1, r20
      ca:	41 00       	.word	0x0041	; ????
      cc:	00 14       	cp	r0, r0
      ce:	14 14       	cp	r1, r4
      d0:	14 14       	cp	r1, r4
      d2:	00 00       	nop
      d4:	41 22       	and	r4, r17
      d6:	14 08       	sbc	r1, r4
      d8:	00 02       	muls	r16, r16
      da:	01 51       	subi	r16, 0x11	; 17
      dc:	09 06       	cpc	r0, r25
      de:	00 32       	cpi	r16, 0x20	; 32
      e0:	49 59       	subi	r20, 0x99	; 153
      e2:	51 3e       	cpi	r21, 0xE1	; 225
      e4:	00 7c       	andi	r16, 0xC0	; 192
      e6:	12 11       	cpse	r17, r2
      e8:	12 7c       	andi	r17, 0xC2	; 194
      ea:	00 7f       	andi	r16, 0xF0	; 240
      ec:	49 49       	sbci	r20, 0x99	; 153
      ee:	49 36       	cpi	r20, 0x69	; 105
      f0:	00 3e       	cpi	r16, 0xE0	; 224
      f2:	41 41       	sbci	r20, 0x11	; 17
      f4:	41 22       	and	r4, r17
      f6:	00 7f       	andi	r16, 0xF0	; 240
      f8:	41 41       	sbci	r20, 0x11	; 17
      fa:	22 1c       	adc	r2, r2
      fc:	00 7f       	andi	r16, 0xF0	; 240
      fe:	49 49       	sbci	r20, 0x99	; 153
     100:	49 41       	sbci	r20, 0x19	; 25
     102:	00 7f       	andi	r16, 0xF0	; 240
     104:	09 09       	sbc	r16, r9
     106:	09 01       	movw	r0, r18
     108:	00 3e       	cpi	r16, 0xE0	; 224
     10a:	41 49       	sbci	r20, 0x91	; 145
     10c:	49 7a       	andi	r20, 0xA9	; 169
     10e:	00 7f       	andi	r16, 0xF0	; 240
     110:	08 08       	sbc	r0, r8
     112:	08 7f       	andi	r16, 0xF8	; 248
     114:	00 00       	nop
     116:	41 7f       	andi	r20, 0xF1	; 241
     118:	41 00       	.word	0x0041	; ????
     11a:	00 20       	and	r0, r0
     11c:	40 41       	sbci	r20, 0x10	; 16
     11e:	3f 01       	movw	r6, r30
     120:	00 7f       	andi	r16, 0xF0	; 240
     122:	08 14       	cp	r0, r8
     124:	22 41       	sbci	r18, 0x12	; 18
     126:	00 7f       	andi	r16, 0xF0	; 240
     128:	40 40       	sbci	r20, 0x00	; 0
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 7f       	andi	r16, 0xF0	; 240
     12e:	02 0c       	add	r0, r2
     130:	02 7f       	andi	r16, 0xF2	; 242
     132:	00 7f       	andi	r16, 0xF0	; 240
     134:	04 08       	sbc	r0, r4
     136:	10 7f       	andi	r17, 0xF0	; 240
     138:	00 3e       	cpi	r16, 0xE0	; 224
     13a:	41 41       	sbci	r20, 0x11	; 17
     13c:	41 3e       	cpi	r20, 0xE1	; 225
     13e:	00 7f       	andi	r16, 0xF0	; 240
     140:	09 09       	sbc	r16, r9
     142:	09 06       	cpc	r0, r25
     144:	00 3e       	cpi	r16, 0xE0	; 224
     146:	41 51       	subi	r20, 0x11	; 17
     148:	21 5e       	subi	r18, 0xE1	; 225
     14a:	00 7f       	andi	r16, 0xF0	; 240
     14c:	09 19       	sub	r16, r9
     14e:	29 46       	sbci	r18, 0x69	; 105
     150:	00 46       	sbci	r16, 0x60	; 96
     152:	49 49       	sbci	r20, 0x99	; 153
     154:	49 31       	cpi	r20, 0x19	; 25
     156:	00 01       	movw	r0, r0
     158:	01 7f       	andi	r16, 0xF1	; 241
     15a:	01 01       	movw	r0, r2
     15c:	00 3f       	cpi	r16, 0xF0	; 240
     15e:	40 40       	sbci	r20, 0x00	; 0
     160:	40 3f       	cpi	r20, 0xF0	; 240
     162:	00 1f       	adc	r16, r16
     164:	20 40       	sbci	r18, 0x00	; 0
     166:	20 1f       	adc	r18, r16
     168:	00 3f       	cpi	r16, 0xF0	; 240
     16a:	40 38       	cpi	r20, 0x80	; 128
     16c:	40 3f       	cpi	r20, 0xF0	; 240
     16e:	00 63       	ori	r16, 0x30	; 48
     170:	14 08       	sbc	r1, r4
     172:	14 63       	ori	r17, 0x34	; 52
     174:	00 07       	cpc	r16, r16
     176:	08 70       	andi	r16, 0x08	; 8
     178:	08 07       	cpc	r16, r24
     17a:	00 61       	ori	r16, 0x10	; 16
     17c:	51 49       	sbci	r21, 0x91	; 145
     17e:	45 43       	sbci	r20, 0x35	; 53
     180:	00 00       	nop
     182:	7f 41       	sbci	r23, 0x1F	; 31
     184:	41 00       	.word	0x0041	; ????
     186:	00 55       	subi	r16, 0x50	; 80
     188:	2a 55       	subi	r18, 0x5A	; 90
     18a:	2a 55       	subi	r18, 0x5A	; 90
     18c:	00 00       	nop
     18e:	41 41       	sbci	r20, 0x11	; 17
     190:	7f 00       	.word	0x007f	; ????
     192:	00 04       	cpc	r0, r0
     194:	02 01       	movw	r0, r4
     196:	02 04       	cpc	r0, r2
     198:	00 40       	sbci	r16, 0x00	; 0
     19a:	40 40       	sbci	r20, 0x00	; 0
     19c:	40 40       	sbci	r20, 0x00	; 0
     19e:	00 00       	nop
     1a0:	01 02       	muls	r16, r17
     1a2:	04 00       	.word	0x0004	; ????
     1a4:	00 20       	and	r0, r0
     1a6:	54 54       	subi	r21, 0x44	; 68
     1a8:	54 78       	andi	r21, 0x84	; 132
     1aa:	00 7f       	andi	r16, 0xF0	; 240
     1ac:	48 44       	sbci	r20, 0x48	; 72
     1ae:	44 38       	cpi	r20, 0x84	; 132
     1b0:	00 38       	cpi	r16, 0x80	; 128
     1b2:	44 44       	sbci	r20, 0x44	; 68
     1b4:	44 20       	and	r4, r4
     1b6:	00 38       	cpi	r16, 0x80	; 128
     1b8:	44 44       	sbci	r20, 0x44	; 68
     1ba:	48 7f       	andi	r20, 0xF8	; 248
     1bc:	00 38       	cpi	r16, 0x80	; 128
     1be:	54 54       	subi	r21, 0x44	; 68
     1c0:	54 18       	sub	r5, r4
     1c2:	00 08       	sbc	r0, r0
     1c4:	7e 09       	sbc	r23, r14
     1c6:	01 02       	muls	r16, r17
     1c8:	00 18       	sub	r0, r0
     1ca:	a4 a4       	ldd	r10, Z+44	; 0x2c
     1cc:	a4 7c       	andi	r26, 0xC4	; 196
     1ce:	00 7f       	andi	r16, 0xF0	; 240
     1d0:	08 04       	cpc	r0, r8
     1d2:	04 78       	andi	r16, 0x84	; 132
     1d4:	00 00       	nop
     1d6:	44 7d       	andi	r20, 0xD4	; 212
     1d8:	40 00       	.word	0x0040	; ????
     1da:	00 40       	sbci	r16, 0x00	; 0
     1dc:	80 84       	ldd	r8, Z+8	; 0x08
     1de:	7d 00       	.word	0x007d	; ????
     1e0:	00 7f       	andi	r16, 0xF0	; 240
     1e2:	10 28       	or	r1, r0
     1e4:	44 00       	.word	0x0044	; ????
     1e6:	00 00       	nop
     1e8:	41 7f       	andi	r20, 0xF1	; 241
     1ea:	40 00       	.word	0x0040	; ????
     1ec:	00 7c       	andi	r16, 0xC0	; 192
     1ee:	04 18       	sub	r0, r4
     1f0:	04 78       	andi	r16, 0x84	; 132
     1f2:	00 7c       	andi	r16, 0xC0	; 192
     1f4:	08 04       	cpc	r0, r8
     1f6:	04 78       	andi	r16, 0x84	; 132
     1f8:	00 38       	cpi	r16, 0x80	; 128
     1fa:	44 44       	sbci	r20, 0x44	; 68
     1fc:	44 38       	cpi	r20, 0x84	; 132
     1fe:	00 fc       	sbrc	r0, 0
     200:	24 24       	eor	r2, r4
     202:	24 18       	sub	r2, r4
     204:	00 18       	sub	r0, r0
     206:	24 24       	eor	r2, r4
     208:	18 fc       	.word	0xfc18	; ????
     20a:	00 7c       	andi	r16, 0xC0	; 192
     20c:	08 04       	cpc	r0, r8
     20e:	04 08       	sbc	r0, r4
     210:	00 48       	sbci	r16, 0x80	; 128
     212:	54 54       	subi	r21, 0x44	; 68
     214:	54 20       	and	r5, r4
     216:	00 04       	cpc	r0, r0
     218:	3f 44       	sbci	r19, 0x4F	; 79
     21a:	40 20       	and	r4, r0
     21c:	00 3c       	cpi	r16, 0xC0	; 192
     21e:	40 40       	sbci	r20, 0x00	; 0
     220:	20 7c       	andi	r18, 0xC0	; 192
     222:	00 1c       	adc	r0, r0
     224:	20 40       	sbci	r18, 0x00	; 0
     226:	20 1c       	adc	r2, r0
     228:	00 3c       	cpi	r16, 0xC0	; 192
     22a:	40 30       	cpi	r20, 0x00	; 0
     22c:	40 3c       	cpi	r20, 0xC0	; 192
     22e:	00 44       	sbci	r16, 0x40	; 64
     230:	28 10       	cpse	r2, r8
     232:	28 44       	sbci	r18, 0x48	; 72
     234:	00 1c       	adc	r0, r0
     236:	a0 a0       	ldd	r10, Z+32	; 0x20
     238:	a0 7c       	andi	r26, 0xC0	; 192
     23a:	00 44       	sbci	r16, 0x40	; 64
     23c:	64 54       	subi	r22, 0x44	; 68
     23e:	4c 44       	sbci	r20, 0x4C	; 76
     240:	14 14       	cp	r1, r4
     242:	14 14       	cp	r1, r4
     244:	14 14       	cp	r1, r4

00000246 <ssd1306_init_sequence>:
     246:	ae d5 f0 a8 3f d3 00 40 8d 14 20 00 a1 c8 da 12     ....?..@.. .....
     256:	81 3f d9 22 db 20 a4 a6 2e af 22 00 3f 21 00 7f     .?.". ....".?!..

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf e5       	ldi	r28, 0x5F	; 95
     26c:	d2 e0       	ldi	r29, 0x02	; 2
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61

00000272 <__do_copy_data>:
     272:	10 e0       	ldi	r17, 0x00	; 0
     274:	a0 e6       	ldi	r26, 0x60	; 96
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	e2 e8       	ldi	r30, 0x82	; 130
     27a:	f2 e1       	ldi	r31, 0x12	; 18
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	aa 3e       	cpi	r26, 0xEA	; 234
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	aa ee       	ldi	r26, 0xEA	; 234
     28c:	b0 e0       	ldi	r27, 0x00	; 0
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	a3 34       	cpi	r26, 0x43	; 67
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	e3 d2       	rcall	.+1478   	; 0x860 <main>
     29a:	f1 c7       	rjmp	.+4066   	; 0x127e <_exit>

0000029c <__bad_interrupt>:
     29c:	b1 ce       	rjmp	.-670    	; 0x0 <__vectors>

0000029e <attach_wheel_interrupt>:
		_delay_ms(1);
    }
}

void attach_wheel_interrupt() {
	cli();
     29e:	f8 94       	cli

	// the rising edge of INT0 generates an interrupt
	MCUCR |= _BV(ISC00) | _BV(ISC01);
     2a0:	85 b7       	in	r24, 0x35	; 53
     2a2:	83 60       	ori	r24, 0x03	; 3
     2a4:	85 bf       	out	0x35, r24	; 53
	
	// enable pin change interrupt
	GIMSK |= _BV(PCIE);
     2a6:	8b b7       	in	r24, 0x3b	; 59
     2a8:	80 62       	ori	r24, 0x20	; 32
     2aa:	8b bf       	out	0x3b, r24	; 59
	
	// enable interrupt on PB1
	PCMSK |= _BV(PCINT1);
     2ac:	a9 9a       	sbi	0x15, 1	; 21

	sei();
     2ae:	78 94       	sei
     2b0:	08 95       	ret

000002b2 <__vector_2>:
}

ISR(PCINT0_vect) {
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	8f 93       	push	r24
	wheel_rotated = true;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <wheel_rotated>
}
     2c4:	8f 91       	pop	r24
     2c6:	0f 90       	pop	r0
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	0f 90       	pop	r0
     2cc:	1f 90       	pop	r1
     2ce:	18 95       	reti

000002d0 <start_millis_timer>:

void start_millis_timer() {
	cli();
     2d0:	f8 94       	cli
	
	// set timer0 CTC mode
	TCCR0A |= _BV(WGM01);
     2d2:	8a b5       	in	r24, 0x2a	; 42
     2d4:	82 60       	ori	r24, 0x02	; 2
     2d6:	8a bd       	out	0x2a, r24	; 42
	
	// set timer0 compare value
	OCR0A = 125;
     2d8:	8d e7       	ldi	r24, 0x7D	; 125
     2da:	89 bd       	out	0x29, r24	; 41
	
	// set timer0 prescaler 64
	TCCR0B |= _BV(CS00) | _BV(CS01);
     2dc:	83 b7       	in	r24, 0x33	; 51
     2de:	83 60       	ori	r24, 0x03	; 3
     2e0:	83 bf       	out	0x33, r24	; 51
	
	// enable interrupt
	TIMSK |= _BV(OCIE0A);
     2e2:	89 b7       	in	r24, 0x39	; 57
     2e4:	80 61       	ori	r24, 0x10	; 16
     2e6:	89 bf       	out	0x39, r24	; 57
	
	sei();
     2e8:	78 94       	sei
     2ea:	08 95       	ret

000002ec <__vector_10>:
}

ISR(TIMER0_COMPA_vect) {
     2ec:	1f 92       	push	r1
     2ee:	0f 92       	push	r0
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	0f 92       	push	r0
     2f4:	11 24       	eor	r1, r1
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
	ms++;
     2fe:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <ms>
     302:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <ms+0x1>
     306:	a0 91 f7 00 	lds	r26, 0x00F7	; 0x8000f7 <ms+0x2>
     30a:	b0 91 f8 00 	lds	r27, 0x00F8	; 0x8000f8 <ms+0x3>
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	a1 1d       	adc	r26, r1
     312:	b1 1d       	adc	r27, r1
     314:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <ms>
     318:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <ms+0x1>
     31c:	a0 93 f7 00 	sts	0x00F7, r26	; 0x8000f7 <ms+0x2>
     320:	b0 93 f8 00 	sts	0x00F8, r27	; 0x8000f8 <ms+0x3>
}
     324:	bf 91       	pop	r27
     326:	af 91       	pop	r26
     328:	9f 91       	pop	r25
     32a:	8f 91       	pop	r24
     32c:	0f 90       	pop	r0
     32e:	0f be       	out	0x3f, r0	; 63
     330:	0f 90       	pop	r0
     332:	1f 90       	pop	r1
     334:	18 95       	reti

00000336 <millis>:

uint32_t millis() {
	uint32_t copy;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     336:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     338:	f8 94       	cli
		copy = ms;
     33a:	60 91 f5 00 	lds	r22, 0x00F5	; 0x8000f5 <ms>
     33e:	70 91 f6 00 	lds	r23, 0x00F6	; 0x8000f6 <ms+0x1>
     342:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <ms+0x2>
     346:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <ms+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     34a:	2f bf       	out	0x3f, r18	; 63
	}
	
	return copy;
}
     34c:	08 95       	ret

0000034e <set_wheel_diameter>:
	}
	wheel_length = (diameter * 3.14) / 100000.0;
}

void set_wheel_diameter(uint8_t diameter) {
	if (diameter > 0 && diameter < 255) {
     34e:	9f ef       	ldi	r25, 0xFF	; 255
     350:	98 0f       	add	r25, r24
     352:	9e 3f       	cpi	r25, 0xFE	; 254
     354:	20 f4       	brcc	.+8      	; 0x35e <set_wheel_diameter+0x10>
     356:	68 2f       	mov	r22, r24
		eeprom_write_byte(&EEPROM_WHEEL_DIAMETER, diameter);
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	82 d7       	rcall	.+3844   	; 0x1262 <eeprom_write_byte>
     35e:	08 95       	ret

00000360 <calc_wheel_length>:
	
	return copy;
}

void calc_wheel_length() {
	uint8_t diameter = eeprom_read_byte(&EEPROM_WHEEL_DIAMETER); // cm
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	76 d7       	rcall	.+3820   	; 0x1252 <eeprom_read_byte>
	if (diameter == 0xFF) {
     366:	8f 3f       	cpi	r24, 0xFF	; 255
     368:	19 f4       	brne	.+6      	; 0x370 <calc_wheel_length+0x10>
		diameter = 65; // default
		set_wheel_diameter(diameter);
     36a:	81 e4       	ldi	r24, 0x41	; 65
     36c:	f0 df       	rcall	.-32     	; 0x34e <set_wheel_diameter>
}

void calc_wheel_length() {
	uint8_t diameter = eeprom_read_byte(&EEPROM_WHEEL_DIAMETER); // cm
	if (diameter == 0xFF) {
		diameter = 65; // default
     36e:	81 e4       	ldi	r24, 0x41	; 65
		set_wheel_diameter(diameter);
	}
	wheel_length = (diameter * 3.14) / 100000.0;
     370:	68 2f       	mov	r22, r24
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	f3 d5       	rcall	.+3046   	; 0xf60 <__floatsisf>
     37a:	23 ec       	ldi	r18, 0xC3	; 195
     37c:	35 ef       	ldi	r19, 0xF5	; 245
     37e:	48 e4       	ldi	r20, 0x48	; 72
     380:	50 e4       	ldi	r21, 0x40	; 64
     382:	a2 d6       	rcall	.+3396   	; 0x10c8 <__mulsf3>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e5       	ldi	r19, 0x50	; 80
     388:	43 ec       	ldi	r20, 0xC3	; 195
     38a:	57 e4       	ldi	r21, 0x47	; 71
     38c:	4e d5       	rcall	.+2716   	; 0xe2a <__divsf3>
     38e:	60 93 ff 00 	sts	0x00FF, r22	; 0x8000ff <wheel_length>
     392:	70 93 00 01 	sts	0x0100, r23	; 0x800100 <wheel_length+0x1>
     396:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wheel_length+0x2>
     39a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <wheel_length+0x3>
     39e:	08 95       	ret

000003a0 <turn_display>:
		eeprom_write_byte(&EEPROM_WHEEL_DIAMETER, diameter);
	}
}

void turn_display(bool on) {
	display_turned = on;
     3a0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_turned>
	ssd1306_turn_display(on);
     3a4:	cb d3       	rcall	.+1942   	; 0xb3c <ssd1306_turn_display>
     3a6:	08 95       	ret

000003a8 <switch_display_menu>:
}

void switch_display_menu() {
	display_menu++;
     3a8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <display_menu>
     3ac:	8f 5f       	subi	r24, 0xFF	; 255
	if (display_menu == 5) {
     3ae:	85 30       	cpi	r24, 0x05	; 5
     3b0:	19 f0       	breq	.+6      	; 0x3b8 <switch_display_menu+0x10>
	display_turned = on;
	ssd1306_turn_display(on);
}

void switch_display_menu() {
	display_menu++;
     3b2:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <display_menu>
     3b6:	08 95       	ret
	if (display_menu == 5) {
		display_menu = 0;
     3b8:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <display_menu>
     3bc:	08 95       	ret

000003be <display_data>:
	}
}

// NOTE: Screen width - 128, that is 21 symbols per row.
void display_data() {
	ssd1306_clear();
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	98 d3       	rcall	.+1840   	; 0xaf8 <ssd1306_fill4>

	switch(display_menu) {
     3c8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <display_menu>
     3cc:	82 30       	cpi	r24, 0x02	; 2
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <display_data+0x14>
     3d0:	5b c0       	rjmp	.+182    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     3d2:	28 f4       	brcc	.+10     	; 0x3de <display_data+0x20>
     3d4:	88 23       	and	r24, r24
     3d6:	51 f0       	breq	.+20     	; 0x3ec <display_data+0x2e>
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	79 f1       	breq	.+94     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3dc:	08 95       	ret
     3de:	83 30       	cpi	r24, 0x03	; 3
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <display_data+0x26>
     3e2:	62 c0       	rjmp	.+196    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     3e4:	84 30       	cpi	r24, 0x04	; 4
     3e6:	09 f4       	brne	.+2      	; 0x3ea <display_data+0x2c>
     3e8:	73 c0       	rjmp	.+230    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     3ea:	08 95       	ret
		case MENU_MAIN:
			// speed
			ssd1306_setpos(0, 0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	6e d3       	rcall	.+1756   	; 0xace <ssd1306_setpos>
			// dtostrf(speed, 4, 1, str_tmp);
			ftoa(str_tmp, speed, 1);
     3f2:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <speed>
     3f6:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <speed+0x1>
     3fa:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <speed+0x2>
     3fe:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <speed+0x3>
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	87 e0       	ldi	r24, 0x07	; 7
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	20 d4       	rcall	.+2112   	; 0xc4c <ftoa>
			// dtostrf(speed, 4, 1, str_tmp);
			// sprintf(buf, "%.1f km/h", speed);
			ssd1306tx_string(str_tmp);
     40c:	87 e0       	ldi	r24, 0x07	; 7
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	ce d3       	rcall	.+1948   	; 0xbae <ssd1306tx_string>

			// distance
			ssd1306_setpos(0, 16);
     412:	60 e1       	ldi	r22, 0x10	; 16
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	5b d3       	rcall	.+1718   	; 0xace <ssd1306_setpos>
			// dtostrf(distance, 4, 2, str_tmp);
			ftoa(str_tmp, distance, 2);
     418:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <distance>
     41c:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <distance+0x1>
     420:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <distance+0x2>
     424:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <distance+0x3>
     428:	22 e0       	ldi	r18, 0x02	; 2
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	87 e0       	ldi	r24, 0x07	; 7
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0d d4       	rcall	.+2074   	; 0xc4c <ftoa>
			//sprintf(buf, "%s km", str_tmp);
			ssd1306tx_string(str_tmp);
     432:	87 e0       	ldi	r24, 0x07	; 7
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	bb d3       	rcall	.+1910   	; 0xbae <ssd1306tx_string>
			break;
     438:	08 95       	ret
		
		case MENU_SPEED:
			// max speed
			ssd1306_setpos(0, 0);
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	47 d3       	rcall	.+1678   	; 0xace <ssd1306_setpos>
			// dtostrf(max_speed, 4, 1, str_tmp);
			ftoa(str_tmp, max_speed, 1);
     440:	40 91 f9 00 	lds	r20, 0x00F9	; 0x8000f9 <max_speed>
     444:	50 91 fa 00 	lds	r21, 0x00FA	; 0x8000fa <max_speed+0x1>
     448:	60 91 fb 00 	lds	r22, 0x00FB	; 0x8000fb <max_speed+0x2>
     44c:	70 91 fc 00 	lds	r23, 0x00FC	; 0x8000fc <max_speed+0x3>
     450:	21 e0       	ldi	r18, 0x01	; 1
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	87 e0       	ldi	r24, 0x07	; 7
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	f9 d3       	rcall	.+2034   	; 0xc4c <ftoa>
			//sprintf(buf, "%s km/h", str_tmp);
			ssd1306tx_string(str_tmp);
     45a:	87 e0       	ldi	r24, 0x07	; 7
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	a7 d3       	rcall	.+1870   	; 0xbae <ssd1306tx_string>
		
			// avg speed
			ssd1306_setpos(0, 16);
     460:	60 e1       	ldi	r22, 0x10	; 16
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	34 d3       	rcall	.+1640   	; 0xace <ssd1306_setpos>
			// dtostrf(avg_speed, 4, 1, str_tmp);
			ftoa(str_tmp, avg_speed, 1);
     466:	40 91 eb 00 	lds	r20, 0x00EB	; 0x8000eb <avg_speed>
     46a:	50 91 ec 00 	lds	r21, 0x00EC	; 0x8000ec <avg_speed+0x1>
     46e:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <avg_speed+0x2>
     472:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <avg_speed+0x3>
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	87 e0       	ldi	r24, 0x07	; 7
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	e6 d3       	rcall	.+1996   	; 0xc4c <ftoa>
			//sprintf(buf, "%s km/h", str_tmp);
			ssd1306tx_string(str_tmp);
     480:	87 e0       	ldi	r24, 0x07	; 7
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	94 d3       	rcall	.+1832   	; 0xbae <ssd1306tx_string>
			break;
     486:	08 95       	ret

		case MENU_RPM:
			// rpm
			ssd1306_setpos(0, 0);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	20 d3       	rcall	.+1600   	; 0xace <ssd1306_setpos>
			itoa(wheel_rpm, str_tmp, 10);
     48e:	4a e0       	ldi	r20, 0x0A	; 10
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	67 e0       	ldi	r22, 0x07	; 7
     494:	71 e0       	ldi	r23, 0x01	; 1
     496:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <wheel_rpm>
     49a:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <wheel_rpm+0x1>
     49e:	95 d3       	rcall	.+1834   	; 0xbca <itoa>
			//sprintf(buf, "%d rpm", wheel_rpm);
			ssd1306tx_string(str_tmp);
     4a0:	87 e0       	ldi	r24, 0x07	; 7
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	84 d3       	rcall	.+1800   	; 0xbae <ssd1306tx_string>
			break;
     4a6:	08 95       	ret
		
		case MENU_POWER: // power save mode
			ssd1306_setpos(0, 0);
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	10 d3       	rcall	.+1568   	; 0xace <ssd1306_setpos>
			ssd1306tx_string("pwr save:");
     4ae:	8b e8       	ldi	r24, 0x8B	; 139
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	7d d3       	rcall	.+1786   	; 0xbae <ssd1306tx_string>

			ssd1306_setpos(0, 16);
     4b4:	60 e1       	ldi	r22, 0x10	; 16
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0a d3       	rcall	.+1556   	; 0xace <ssd1306_setpos>
			ssd1306tx_string(pwr_save_mode ? "on" : "off");
     4ba:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pwr_save_mode>
     4be:	81 11       	cpse	r24, r1
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c2:	87 e8       	ldi	r24, 0x87	; 135
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c8:	84 e8       	ldi	r24, 0x84	; 132
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	70 d3       	rcall	.+1760   	; 0xbae <ssd1306tx_string>
			break;
     4ce:	08 95       	ret

		case MENU_LED:
			ssd1306_setpos(0, 0);
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	fc d2       	rcall	.+1528   	; 0xace <ssd1306_setpos>
			ssd1306tx_string("led:");
     4d6:	85 e9       	ldi	r24, 0x95	; 149
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	69 d3       	rcall	.+1746   	; 0xbae <ssd1306tx_string>

			ssd1306_setpos(0, 16);
     4dc:	60 e1       	ldi	r22, 0x10	; 16
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	f6 d2       	rcall	.+1516   	; 0xace <ssd1306_setpos>
			ssd1306tx_string(led_turned ? "on" : "off");
     4e2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <led_turned>
     4e6:	81 11       	cpse	r24, r1
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ea:	87 e8       	ldi	r24, 0x87	; 135
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f0:	84 e8       	ldi	r24, 0x84	; 132
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	5c d3       	rcall	.+1720   	; 0xbae <ssd1306tx_string>
     4f6:	08 95       	ret

000004f8 <enable_pwr_save_mode>:
			break;
	}
}

void enable_pwr_save_mode(bool enable) {
	pwr_save_mode = !pwr_save_mode;
     4f8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <pwr_save_mode>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	68 27       	eor	r22, r24
     500:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <pwr_save_mode>
	eeprom_write_byte(&EEPROM_PWR_SAVE_MODE, pwr_save_mode);
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	ac d6       	rcall	.+3416   	; 0x1262 <eeprom_write_byte>
     50a:	08 95       	ret

0000050c <enable_sleep_mode>:
}

void enable_sleep_mode() {
	turn_display(false);
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	48 df       	rcall	.-368    	; 0x3a0 <turn_display>
	
	// turn off led
	PORTB &= ~_BV(LED_PIN);
     510:	c4 98       	cbi	0x18, 4	; 24
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     512:	85 b7       	in	r24, 0x35	; 53
     514:	87 7e       	andi	r24, 0xE7	; 231
     516:	80 61       	ori	r24, 0x10	; 16
     518:	85 bf       	out	0x35, r24	; 53
	cli();
     51a:	f8 94       	cli
	sleep_enable();
     51c:	85 b7       	in	r24, 0x35	; 53
     51e:	80 62       	ori	r24, 0x20	; 32
     520:	85 bf       	out	0x35, r24	; 53
	sleep_bod_disable();
     522:	85 b7       	in	r24, 0x35	; 53
     524:	84 68       	ori	r24, 0x84	; 132
     526:	85 bf       	out	0x35, r24	; 53
     528:	8b 7f       	andi	r24, 0xFB	; 251
     52a:	85 bf       	out	0x35, r24	; 53
	sei();
     52c:	78 94       	sei
	sleep_cpu();
     52e:	88 95       	sleep

	sleep_disable();
     530:	85 b7       	in	r24, 0x35	; 53
     532:	8f 7d       	andi	r24, 0xDF	; 223
     534:	85 bf       	out	0x35, r24	; 53
	sei();
     536:	78 94       	sei
     538:	08 95       	ret

0000053a <turn_led>:
}

void turn_led(bool on) {
	led_turned = on;
     53a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <led_turned>
	
	TCCR1 = 0;
     53e:	10 be       	out	0x30, r1	; 48
	OCR1C = 0;
     540:	1d bc       	out	0x2d, r1	; 45
	TIMSK = 0;
     542:	19 be       	out	0x39, r1	; 57
	
	if (on) {
     544:	88 23       	and	r24, r24
     546:	69 f0       	breq	.+26     	; 0x562 <turn_led+0x28>
		cli();
     548:	f8 94       	cli
		
		// set timer1 CTC mode
		TCCR1 |= _BV(CTC1);
     54a:	80 b7       	in	r24, 0x30	; 48
     54c:	80 68       	ori	r24, 0x80	; 128
     54e:	80 bf       	out	0x30, r24	; 48
		
		// set timer1 compare value
		OCR1C = 244;
     550:	84 ef       	ldi	r24, 0xF4	; 244
     552:	8d bd       	out	0x2d, r24	; 45
		
		// set timer1 prescaler 8192
		TCCR1 |= _BV(CS11) | _BV(CS12) | _BV(CS13);
     554:	80 b7       	in	r24, 0x30	; 48
     556:	8e 60       	ori	r24, 0x0E	; 14
     558:	80 bf       	out	0x30, r24	; 48
		
		// enable interrupt
		TIMSK |= _BV(OCIE1A);
     55a:	89 b7       	in	r24, 0x39	; 57
     55c:	80 64       	ori	r24, 0x40	; 64
     55e:	89 bf       	out	0x39, r24	; 57

		sei();
     560:	78 94       	sei
     562:	08 95       	ret

00000564 <__vector_3>:
	}
}

// toggle led every 250 ms
ISR(TIMER1_COMPA_vect) {
     564:	1f 92       	push	r1
     566:	0f 92       	push	r0
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	0f 92       	push	r0
     56c:	11 24       	eor	r1, r1
     56e:	8f 93       	push	r24
     570:	9f 93       	push	r25
	PORTB ^= _BV(LED_PIN);
     572:	98 b3       	in	r25, 0x18	; 24
     574:	80 e1       	ldi	r24, 0x10	; 16
     576:	89 27       	eor	r24, r25
     578:	88 bb       	out	0x18, r24	; 24
}
     57a:	9f 91       	pop	r25
     57c:	8f 91       	pop	r24
     57e:	0f 90       	pop	r0
     580:	0f be       	out	0x3f, r0	; 63
     582:	0f 90       	pop	r0
     584:	1f 90       	pop	r1
     586:	18 95       	reti

00000588 <handle_btn_click>:

void handle_btn_click(uint8_t pin_state, uint32_t timer_now) {
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	6a 01       	movw	r12, r20
     592:	7b 01       	movw	r14, r22
	// click start
	if (!btn_pressed && !pin_state) {
     594:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <btn_pressed>
     598:	91 11       	cpse	r25, r1
     59a:	64 c0       	rjmp	.+200    	; 0x664 <handle_btn_click+0xdc>
     59c:	81 11       	cpse	r24, r1
     59e:	65 c0       	rjmp	.+202    	; 0x66a <handle_btn_click+0xe2>
		btn_pressed = true;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <btn_pressed>
		btn_timer = timer_now;
     5a6:	40 93 26 01 	sts	0x0126, r20	; 0x800126 <btn_timer>
     5aa:	50 93 27 01 	sts	0x0127, r21	; 0x800127 <btn_timer+0x1>
     5ae:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <btn_timer+0x2>
     5b2:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <btn_timer+0x3>
     5b6:	13 c0       	rjmp	.+38     	; 0x5de <handle_btn_click+0x56>
	}
	
	// handle single button click
	if (btn_pressed && pin_state) {
		btn_pressed = false;
     5b8:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <btn_pressed>
		if (!btn_long_pressed && display_turned) { // single press
     5bc:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__data_end>
     5c0:	81 11       	cpse	r24, r1
     5c2:	06 c0       	rjmp	.+12     	; 0x5d0 <handle_btn_click+0x48>
     5c4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <display_turned>
     5c8:	88 23       	and	r24, r24
     5ca:	11 f0       	breq	.+4      	; 0x5d0 <handle_btn_click+0x48>
			switch_display_menu();
     5cc:	ed de       	rcall	.-550    	; 0x3a8 <switch_display_menu>
			display_data();
     5ce:	f7 de       	rcall	.-530    	; 0x3be <display_data>
		}
		btn_long_pressed = false;
     5d0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__data_end>
	}
	
	// handle long button click
	if (btn_pressed && !btn_long_pressed && ((timer_now - btn_timer) >= LONG_PRESS_TIME)) {
     5d4:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <btn_pressed>
     5d8:	81 11       	cpse	r24, r1
     5da:	05 c0       	rjmp	.+10     	; 0x5e6 <handle_btn_click+0x5e>
     5dc:	46 c0       	rjmp	.+140    	; 0x66a <handle_btn_click+0xe2>
     5de:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__data_end>
     5e2:	81 11       	cpse	r24, r1
     5e4:	42 c0       	rjmp	.+132    	; 0x66a <handle_btn_click+0xe2>
     5e6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <btn_timer>
     5ea:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <btn_timer+0x1>
     5ee:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <btn_timer+0x2>
     5f2:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <btn_timer+0x3>
     5f6:	a7 01       	movw	r20, r14
     5f8:	96 01       	movw	r18, r12
     5fa:	28 1b       	sub	r18, r24
     5fc:	39 0b       	sbc	r19, r25
     5fe:	4a 0b       	sbc	r20, r26
     600:	5b 0b       	sbc	r21, r27
     602:	da 01       	movw	r26, r20
     604:	c9 01       	movw	r24, r18
     606:	84 3f       	cpi	r24, 0xF4	; 244
     608:	91 40       	sbci	r25, 0x01	; 1
     60a:	a1 05       	cpc	r26, r1
     60c:	b1 05       	cpc	r27, r1
     60e:	68 f1       	brcs	.+90     	; 0x66a <handle_btn_click+0xe2>
		btn_long_pressed = true;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__data_end>
		switch (display_menu) {
     616:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <display_menu>
     61a:	83 30       	cpi	r24, 0x03	; 3
     61c:	19 f0       	breq	.+6      	; 0x624 <handle_btn_click+0x9c>
     61e:	84 30       	cpi	r24, 0x04	; 4
     620:	a1 f0       	breq	.+40     	; 0x64a <handle_btn_click+0xc2>
     622:	1a c0       	rjmp	.+52     	; 0x658 <handle_btn_click+0xd0>
			case MENU_POWER:
				enable_pwr_save_mode(!pwr_save_mode);
     624:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <pwr_save_mode>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	89 27       	eor	r24, r25
     62c:	65 df       	rcall	.-310    	; 0x4f8 <enable_pwr_save_mode>
				display_data();
     62e:	c7 de       	rcall	.-626    	; 0x3be <display_data>
				if (pwr_save_mode) {
     630:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pwr_save_mode>
     634:	88 23       	and	r24, r24
     636:	c9 f0       	breq	.+50     	; 0x66a <handle_btn_click+0xe2>
					wheel_rotation_last_time = timer_now; // fixme
     638:	c0 92 3a 01 	sts	0x013A, r12	; 0x80013a <wheel_rotation_last_time>
     63c:	d0 92 3b 01 	sts	0x013B, r13	; 0x80013b <wheel_rotation_last_time+0x1>
     640:	e0 92 3c 01 	sts	0x013C, r14	; 0x80013c <wheel_rotation_last_time+0x2>
     644:	f0 92 3d 01 	sts	0x013D, r15	; 0x80013d <wheel_rotation_last_time+0x3>
     648:	10 c0       	rjmp	.+32     	; 0x66a <handle_btn_click+0xe2>
				}
				break;
			case MENU_LED:
				turn_led(!led_turned);
     64a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <led_turned>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	89 27       	eor	r24, r25
     652:	73 df       	rcall	.-282    	; 0x53a <turn_led>
				display_data();
     654:	b4 de       	rcall	.-664    	; 0x3be <display_data>
				break;
     656:	09 c0       	rjmp	.+18     	; 0x66a <handle_btn_click+0xe2>
			default:
				turn_display(!display_turned);
     658:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <display_turned>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	89 27       	eor	r24, r25
     660:	9f de       	rcall	.-706    	; 0x3a0 <turn_display>
				break;
		}
	}
}
     662:	03 c0       	rjmp	.+6      	; 0x66a <handle_btn_click+0xe2>
		btn_pressed = true;
		btn_timer = timer_now;
	}
	
	// handle single button click
	if (btn_pressed && pin_state) {
     664:	81 11       	cpse	r24, r1
     666:	a8 cf       	rjmp	.-176    	; 0x5b8 <handle_btn_click+0x30>
     668:	ba cf       	rjmp	.-140    	; 0x5de <handle_btn_click+0x56>
			default:
				turn_display(!display_turned);
				break;
		}
	}
}
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	08 95       	ret

00000674 <calc_avg_speed>:
		wheel_rotation_counter = 0;
		wheel_rotation_start_time = 0;
	}
}

void calc_avg_speed(float speed) {
     674:	8f 92       	push	r8
     676:	9f 92       	push	r9
     678:	af 92       	push	r10
     67a:	bf 92       	push	r11
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	6b 01       	movw	r12, r22
     68e:	7c 01       	movw	r14, r24
	if (speed == 0) {
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	a9 01       	movw	r20, r18
     696:	c5 d3       	rcall	.+1930   	; 0xe22 <__cmpsf2>
     698:	88 23       	and	r24, r24
     69a:	09 f4       	brne	.+2      	; 0x69e <calc_avg_speed+0x2a>
     69c:	57 c0       	rjmp	.+174    	; 0x74c <calc_avg_speed+0xd8>
		return;
	}
	
	speed_arr[speed_arr_index++] = speed;
     69e:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <speed_arr_index>
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	8e 0f       	add	r24, r30
     6a6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <speed_arr_index>
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	e0 5f       	subi	r30, 0xF0	; 240
     6b6:	fe 4f       	sbci	r31, 0xFE	; 254
     6b8:	c0 82       	st	Z, r12
     6ba:	d1 82       	std	Z+1, r13	; 0x01
     6bc:	e2 82       	std	Z+2, r14	; 0x02
     6be:	f3 82       	std	Z+3, r15	; 0x03
	
	if (speed_arr_index == 5) {
     6c0:	85 30       	cpi	r24, 0x05	; 5
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <calc_avg_speed+0x52>
     6c4:	43 c0       	rjmp	.+134    	; 0x74c <calc_avg_speed+0xd8>
		speed_arr_index = 0;
     6c6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <speed_arr_index>
     6ca:	c0 e1       	ldi	r28, 0x10	; 16
     6cc:	d1 e0       	ldi	r29, 0x01	; 1
     6ce:	04 e2       	ldi	r16, 0x24	; 36
     6d0:	11 e0       	ldi	r17, 0x01	; 1
		float sum = 0;
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	cb 01       	movw	r24, r22
		for (uint8_t i = 0; i < 5; i++) {
			sum += speed_arr[i];
     6d8:	29 91       	ld	r18, Y+
     6da:	39 91       	ld	r19, Y+
     6dc:	49 91       	ld	r20, Y+
     6de:	59 91       	ld	r21, Y+
     6e0:	3c d3       	rcall	.+1656   	; 0xd5a <__addsf3>
	speed_arr[speed_arr_index++] = speed;
	
	if (speed_arr_index == 5) {
		speed_arr_index = 0;
		float sum = 0;
		for (uint8_t i = 0; i < 5; i++) {
     6e2:	c0 17       	cp	r28, r16
     6e4:	d1 07       	cpc	r29, r17
     6e6:	c1 f7       	brne	.-16     	; 0x6d8 <calc_avg_speed+0x64>
			sum += speed_arr[i];
		}
		
		sum /= 5;
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 ea       	ldi	r20, 0xA0	; 160
     6ee:	50 e4       	ldi	r21, 0x40	; 64
     6f0:	9c d3       	rcall	.+1848   	; 0xe2a <__divsf3>
     6f2:	4b 01       	movw	r8, r22
     6f4:	5c 01       	movw	r10, r24
		if (avg_speed == 0) {
     6f6:	c0 90 eb 00 	lds	r12, 0x00EB	; 0x8000eb <avg_speed>
     6fa:	d0 90 ec 00 	lds	r13, 0x00EC	; 0x8000ec <avg_speed+0x1>
     6fe:	e0 90 ed 00 	lds	r14, 0x00ED	; 0x8000ed <avg_speed+0x2>
     702:	f0 90 ee 00 	lds	r15, 0x00EE	; 0x8000ee <avg_speed+0x3>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	a9 01       	movw	r20, r18
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	88 d3       	rcall	.+1808   	; 0xe22 <__cmpsf2>
     712:	81 11       	cpse	r24, r1
     714:	09 c0       	rjmp	.+18     	; 0x728 <calc_avg_speed+0xb4>
			avg_speed = sum;
     716:	80 92 eb 00 	sts	0x00EB, r8	; 0x8000eb <avg_speed>
     71a:	90 92 ec 00 	sts	0x00EC, r9	; 0x8000ec <avg_speed+0x1>
     71e:	a0 92 ed 00 	sts	0x00ED, r10	; 0x8000ed <avg_speed+0x2>
     722:	b0 92 ee 00 	sts	0x00EE, r11	; 0x8000ee <avg_speed+0x3>
     726:	12 c0       	rjmp	.+36     	; 0x74c <calc_avg_speed+0xd8>
			} else {
			avg_speed = (avg_speed + sum) / 2;
     728:	a7 01       	movw	r20, r14
     72a:	96 01       	movw	r18, r12
     72c:	c5 01       	movw	r24, r10
     72e:	b4 01       	movw	r22, r8
     730:	14 d3       	rcall	.+1576   	; 0xd5a <__addsf3>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	5f e3       	ldi	r21, 0x3F	; 63
     73a:	c6 d4       	rcall	.+2444   	; 0x10c8 <__mulsf3>
     73c:	60 93 eb 00 	sts	0x00EB, r22	; 0x8000eb <avg_speed>
     740:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <avg_speed+0x1>
     744:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <avg_speed+0x2>
     748:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <avg_speed+0x3>
		}
	}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	bf 90       	pop	r11
     75e:	af 90       	pop	r10
     760:	9f 90       	pop	r9
     762:	8f 90       	pop	r8
     764:	08 95       	ret

00000766 <calc_speed>:
				break;
		}
	}
}

void calc_speed(uint32_t timer_now) {
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
	if (wheel_rotation_counter == WHEEL_ROTATION_MAX) {
     76e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <wheel_rotation_counter>
     772:	25 30       	cpi	r18, 0x05	; 5
     774:	09 f0       	breq	.+2      	; 0x778 <calc_speed+0x12>
     776:	6f c0       	rjmp	.+222    	; 0x856 <calc_speed+0xf0>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
		uint32_t interval = timer_now - wheel_rotation_start_time;
		float avg_interval = interval / WHEEL_ROTATION_MAX;

		uint16_t rpm = 60000 / avg_interval;
     77c:	c0 90 f0 00 	lds	r12, 0x00F0	; 0x8000f0 <wheel_rotation_start_time>
     780:	d0 90 f1 00 	lds	r13, 0x00F1	; 0x8000f1 <wheel_rotation_start_time+0x1>
     784:	e0 90 f2 00 	lds	r14, 0x00F2	; 0x8000f2 <wheel_rotation_start_time+0x2>
     788:	f0 90 f3 00 	lds	r15, 0x00F3	; 0x8000f3 <wheel_rotation_start_time+0x3>
     78c:	bc 01       	movw	r22, r24
     78e:	cd 01       	movw	r24, r26
     790:	6c 19       	sub	r22, r12
     792:	7d 09       	sbc	r23, r13
     794:	8e 09       	sbc	r24, r14
     796:	9f 09       	sbc	r25, r15
     798:	25 e0       	ldi	r18, 0x05	; 5
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	22 d5       	rcall	.+2628   	; 0x11e6 <__udivmodsi4>
     7a2:	ca 01       	movw	r24, r20
     7a4:	b9 01       	movw	r22, r18
     7a6:	da d3       	rcall	.+1972   	; 0xf5c <__floatunsisf>
     7a8:	9b 01       	movw	r18, r22
     7aa:	ac 01       	movw	r20, r24
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e6       	ldi	r23, 0x60	; 96
     7b0:	8a e6       	ldi	r24, 0x6A	; 106
     7b2:	97 e4       	ldi	r25, 0x47	; 71
     7b4:	3a d3       	rcall	.+1652   	; 0xe2a <__divsf3>
     7b6:	a6 d3       	rcall	.+1868   	; 0xf04 <__fixunssfsi>
		if (rpm < WHEEL_RPM_MAX) {
     7b8:	68 35       	cpi	r22, 0x58	; 88
     7ba:	22 e0       	ldi	r18, 0x02	; 2
     7bc:	72 07       	cpc	r23, r18
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <calc_speed+0x5c>
     7c0:	40 c0       	rjmp	.+128    	; 0x842 <calc_speed+0xdc>
			wheel_rpm = rpm;
     7c2:	70 93 fe 00 	sts	0x00FE, r23	; 0x8000fe <wheel_rpm+0x1>
     7c6:	60 93 fd 00 	sts	0x00FD, r22	; 0x8000fd <wheel_rpm>
			speed = wheel_rpm * 60 * wheel_length;
     7ca:	9b 01       	movw	r18, r22
     7cc:	22 95       	swap	r18
     7ce:	32 95       	swap	r19
     7d0:	30 7f       	andi	r19, 0xF0	; 240
     7d2:	32 27       	eor	r19, r18
     7d4:	20 7f       	andi	r18, 0xF0	; 240
     7d6:	32 27       	eor	r19, r18
     7d8:	a9 01       	movw	r20, r18
     7da:	46 1b       	sub	r20, r22
     7dc:	57 0b       	sbc	r21, r23
     7de:	ba 01       	movw	r22, r20
     7e0:	66 0f       	add	r22, r22
     7e2:	77 1f       	adc	r23, r23
     7e4:	66 0f       	add	r22, r22
     7e6:	77 1f       	adc	r23, r23
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	b7 d3       	rcall	.+1902   	; 0xf5c <__floatunsisf>
     7ee:	20 91 ff 00 	lds	r18, 0x00FF	; 0x8000ff <wheel_length>
     7f2:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <wheel_length+0x1>
     7f6:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <wheel_length+0x2>
     7fa:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <wheel_length+0x3>
     7fe:	64 d4       	rcall	.+2248   	; 0x10c8 <__mulsf3>
     800:	6b 01       	movw	r12, r22
     802:	7c 01       	movw	r14, r24
     804:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <speed>
     808:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <speed+0x1>
     80c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <speed+0x2>
     810:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <speed+0x3>
			if (speed >= max_speed) {
     814:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <max_speed>
     818:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <max_speed+0x1>
     81c:	40 91 fb 00 	lds	r20, 0x00FB	; 0x8000fb <max_speed+0x2>
     820:	50 91 fc 00 	lds	r21, 0x00FC	; 0x8000fc <max_speed+0x3>
     824:	4d d4       	rcall	.+2202   	; 0x10c0 <__gesf2>
     826:	88 23       	and	r24, r24
     828:	44 f0       	brlt	.+16     	; 0x83a <calc_speed+0xd4>
				max_speed = speed;
     82a:	c0 92 f9 00 	sts	0x00F9, r12	; 0x8000f9 <max_speed>
     82e:	d0 92 fa 00 	sts	0x00FA, r13	; 0x8000fa <max_speed+0x1>
     832:	e0 92 fb 00 	sts	0x00FB, r14	; 0x8000fb <max_speed+0x2>
     836:	f0 92 fc 00 	sts	0x00FC, r15	; 0x8000fc <max_speed+0x3>
			}

			calc_avg_speed(speed);
     83a:	c7 01       	movw	r24, r14
     83c:	b6 01       	movw	r22, r12
     83e:	1a df       	rcall	.-460    	; 0x674 <calc_avg_speed>
			display_data();
     840:	be dd       	rcall	.-1156   	; 0x3be <display_data>
		}

		wheel_rotation_counter = 0;
     842:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <wheel_rotation_counter>
		wheel_rotation_start_time = 0;
     846:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <wheel_rotation_start_time>
     84a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <wheel_rotation_start_time+0x1>
     84e:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <wheel_rotation_start_time+0x2>
     852:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <wheel_rotation_start_time+0x3>
	}
}
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	08 95       	ret

00000860 <main>:
void turn_led(bool on);
void handle_btn_click(uint8_t pin_state, uint32_t timer_now);
void calc_speed(uint32_t timer_now);

int main(void) {
	CLKPR = 1 << CLKPCE;
     860:	80 e8       	ldi	r24, 0x80	; 128
     862:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;
     864:	16 bc       	out	0x26, r1	; 38
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     866:	2f ef       	ldi	r18, 0xFF	; 255
     868:	30 e7       	ldi	r19, 0x70	; 112
     86a:	42 e0       	ldi	r20, 0x02	; 2
     86c:	21 50       	subi	r18, 0x01	; 1
     86e:	30 40       	sbci	r19, 0x00	; 0
     870:	40 40       	sbci	r20, 0x00	; 0
     872:	e1 f7       	brne	.-8      	; 0x86c <main+0xc>
     874:	00 c0       	rjmp	.+0      	; 0x876 <main+0x16>
     876:	00 00       	nop
	
	_delay_ms(100);
	ssd1306_init();
     878:	14 d1       	rcall	.+552    	; 0xaa2 <ssd1306_init>
	ssd1306tx_init(ssd1306xled_font6x8data, ' ');
     87a:	60 e2       	ldi	r22, 0x20	; 32
     87c:	8e e1       	ldi	r24, 0x1E	; 30
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	69 d1       	rcall	.+722    	; 0xb54 <ssd1306tx_init>

	ssd1306_clear();
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	36 d1       	rcall	.+620    	; 0xaf8 <ssd1306_fill4>
	ssd1306_setpos(0, 0);
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	1e d1       	rcall	.+572    	; 0xace <ssd1306_setpos>
	ssd1306tx_string("Hello!");
     892:	8a e9       	ldi	r24, 0x9A	; 154
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	8b d1       	rcall	.+790    	; 0xbae <ssd1306tx_string>
	
	// turn on btn pin input pullup
	PORTB |= _BV(BTN_PIN);
     898:	c3 9a       	sbi	0x18, 3	; 24
	
	// led pin as output
	DDRB |= _BV(LED_PIN);
     89a:	bc 9a       	sbi	0x17, 4	; 23
	
	// disable USI
	PRR |= _BV(PRUSI);
     89c:	80 b5       	in	r24, 0x20	; 32
     89e:	82 60       	ori	r24, 0x02	; 2
     8a0:	80 bd       	out	0x20, r24	; 32
	
	attach_wheel_interrupt();
     8a2:	fd dc       	rcall	.-1542   	; 0x29e <attach_wheel_interrupt>
	start_millis_timer();
     8a4:	15 dd       	rcall	.-1494   	; 0x2d0 <start_millis_timer>
	
	display_turned = true;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <display_turned>

	pwr_save_mode = eeprom_read_byte(&EEPROM_PWR_SAVE_MODE);
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	d0 d4       	rcall	.+2464   	; 0x1252 <eeprom_read_byte>
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	81 11       	cpse	r24, r1
     8b6:	01 c0       	rjmp	.+2      	; 0x8ba <main+0x5a>
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <pwr_save_mode>
	led_auto = eeprom_read_byte(&EEPROM_LED_AUTO);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	c7 d4       	rcall	.+2446   	; 0x1252 <eeprom_read_byte>
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	81 11       	cpse	r24, r1
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <main+0x6c>
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <led_auto>
		// todo
		// get current time
		// turn led
	}
	
	calc_wheel_length();
     8d0:	47 dd       	rcall	.-1394   	; 0x360 <calc_wheel_length>
	display_data();
     8d2:	75 dd       	rcall	.-1302   	; 0x3be <display_data>
	
	unsigned long timer_now;
    
    while (1) {
		timer_now = millis();
     8d4:	30 dd       	rcall	.-1440   	; 0x336 <millis>
     8d6:	6b 01       	movw	r12, r22
     8d8:	7c 01       	movw	r14, r24
		
		if (wheel_rotated) {
     8da:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <wheel_rotated>
     8de:	88 23       	and	r24, r24
     8e0:	e1 f1       	breq	.+120    	; 0x95a <main+0xfa>
			wheel_rotated = false;
     8e2:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <wheel_rotated>
			
			wheel_rotation_last_time = timer_now;
     8e6:	c0 92 3a 01 	sts	0x013A, r12	; 0x80013a <wheel_rotation_last_time>
     8ea:	d0 92 3b 01 	sts	0x013B, r13	; 0x80013b <wheel_rotation_last_time+0x1>
     8ee:	e0 92 3c 01 	sts	0x013C, r14	; 0x80013c <wheel_rotation_last_time+0x2>
     8f2:	f0 92 3d 01 	sts	0x013D, r15	; 0x80013d <wheel_rotation_last_time+0x3>
			if (wheel_rotation_start_time == 0) {
     8f6:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <wheel_rotation_start_time>
     8fa:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <wheel_rotation_start_time+0x1>
     8fe:	a0 91 f2 00 	lds	r26, 0x00F2	; 0x8000f2 <wheel_rotation_start_time+0x2>
     902:	b0 91 f3 00 	lds	r27, 0x00F3	; 0x8000f3 <wheel_rotation_start_time+0x3>
     906:	89 2b       	or	r24, r25
     908:	8a 2b       	or	r24, r26
     90a:	8b 2b       	or	r24, r27
     90c:	41 f4       	brne	.+16     	; 0x91e <main+0xbe>
				wheel_rotation_start_time = timer_now;
     90e:	c0 92 f0 00 	sts	0x00F0, r12	; 0x8000f0 <wheel_rotation_start_time>
     912:	d0 92 f1 00 	sts	0x00F1, r13	; 0x8000f1 <wheel_rotation_start_time+0x1>
     916:	e0 92 f2 00 	sts	0x00F2, r14	; 0x8000f2 <wheel_rotation_start_time+0x2>
     91a:	f0 92 f3 00 	sts	0x00F3, r15	; 0x8000f3 <wheel_rotation_start_time+0x3>
			}

			wheel_rotation_counter++;
     91e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <wheel_rotation_counter>
     922:	8f 5f       	subi	r24, 0xFF	; 255
     924:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <wheel_rotation_counter>
			distance += wheel_length;
     928:	20 91 ff 00 	lds	r18, 0x00FF	; 0x8000ff <wheel_length>
     92c:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <wheel_length+0x1>
     930:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <wheel_length+0x2>
     934:	50 91 02 01 	lds	r21, 0x0102	; 0x800102 <wheel_length+0x3>
     938:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <distance>
     93c:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <distance+0x1>
     940:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <distance+0x2>
     944:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <distance+0x3>
     948:	08 d2       	rcall	.+1040   	; 0xd5a <__addsf3>
     94a:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <distance>
     94e:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <distance+0x1>
     952:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <distance+0x2>
     956:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <distance+0x3>
		}
		
		handle_btn_click(PINB & _BV(BTN_PIN), timer_now);
     95a:	86 b3       	in	r24, 0x16	; 22
     95c:	b7 01       	movw	r22, r14
     95e:	a6 01       	movw	r20, r12
     960:	88 70       	andi	r24, 0x08	; 8
     962:	12 de       	rcall	.-988    	; 0x588 <handle_btn_click>
		// handle_btn_click(digitalRead(BTN_PIN), timer_now);

		calc_speed(timer_now);
     964:	c7 01       	movw	r24, r14
     966:	b6 01       	movw	r22, r12
     968:	fe de       	rcall	.-516    	; 0x766 <calc_speed>
		
		// idle
		if (timer_now - wheel_rotation_last_time >= 3000) {
     96a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <wheel_rotation_last_time>
     96e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <wheel_rotation_last_time+0x1>
     972:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <wheel_rotation_last_time+0x2>
     976:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <wheel_rotation_last_time+0x3>
     97a:	a7 01       	movw	r20, r14
     97c:	96 01       	movw	r18, r12
     97e:	28 1b       	sub	r18, r24
     980:	39 0b       	sbc	r19, r25
     982:	4a 0b       	sbc	r20, r26
     984:	5b 0b       	sbc	r21, r27
     986:	da 01       	movw	r26, r20
     988:	c9 01       	movw	r24, r18
     98a:	88 3b       	cpi	r24, 0xB8	; 184
     98c:	9b 40       	sbci	r25, 0x0B	; 11
     98e:	a1 05       	cpc	r26, r1
     990:	b1 05       	cpc	r27, r1
     992:	50 f1       	brcs	.+84     	; 0x9e8 <main+0x188>
			if (speed != 0 || (0 < wheel_rotation_counter && wheel_rotation_counter < WHEEL_ROTATION_MAX)) {
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	a9 01       	movw	r20, r18
     99a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <speed>
     99e:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <speed+0x1>
     9a2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <speed+0x2>
     9a6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <speed+0x3>
     9aa:	3b d2       	rcall	.+1142   	; 0xe22 <__cmpsf2>
     9ac:	81 11       	cpse	r24, r1
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <main+0x15a>
     9b0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <wheel_rotation_counter>
     9b4:	81 50       	subi	r24, 0x01	; 1
     9b6:	84 30       	cpi	r24, 0x04	; 4
     9b8:	b8 f4       	brcc	.+46     	; 0x9e8 <main+0x188>
				speed = 0;
     9ba:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <speed>
     9be:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <speed+0x1>
     9c2:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <speed+0x2>
     9c6:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <speed+0x3>
				wheel_rpm = 0;
     9ca:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <wheel_rpm+0x1>
     9ce:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <wheel_rpm>
				wheel_rotation_counter = 0;
     9d2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <wheel_rotation_counter>
				wheel_rotation_start_time = 0;
     9d6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <wheel_rotation_start_time>
     9da:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <wheel_rotation_start_time+0x1>
     9de:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <wheel_rotation_start_time+0x2>
     9e2:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <wheel_rotation_start_time+0x3>
				display_data();
     9e6:	eb dc       	rcall	.-1578   	; 0x3be <display_data>
			}
		}
		
		// sleep
		if (timer_now - wheel_rotation_last_time >= 20000) {
     9e8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <wheel_rotation_last_time>
     9ec:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <wheel_rotation_last_time+0x1>
     9f0:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <wheel_rotation_last_time+0x2>
     9f4:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <wheel_rotation_last_time+0x3>
     9f8:	c8 1a       	sub	r12, r24
     9fa:	d9 0a       	sbc	r13, r25
     9fc:	ea 0a       	sbc	r14, r26
     9fe:	fb 0a       	sbc	r15, r27
     a00:	40 e2       	ldi	r20, 0x20	; 32
     a02:	c4 16       	cp	r12, r20
     a04:	4e e4       	ldi	r20, 0x4E	; 78
     a06:	d4 06       	cpc	r13, r20
     a08:	e1 04       	cpc	r14, r1
     a0a:	f1 04       	cpc	r15, r1
     a0c:	60 f0       	brcs	.+24     	; 0xa26 <main+0x1c6>
			wheel_rotation_last_time = 0;
     a0e:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <wheel_rotation_last_time>
     a12:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <wheel_rotation_last_time+0x1>
     a16:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <wheel_rotation_last_time+0x2>
     a1a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <wheel_rotation_last_time+0x3>
			if (pwr_save_mode) {
     a1e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pwr_save_mode>
     a22:	81 11       	cpse	r24, r1
				enable_sleep_mode();
     a24:	73 dd       	rcall	.-1306   	; 0x50c <enable_sleep_mode>
     a26:	8f ec       	ldi	r24, 0xCF	; 207
     a28:	97 e0       	ldi	r25, 0x07	; 7
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <main+0x1ca>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <main+0x1d0>
     a30:	00 00       	nop
     a32:	50 cf       	rjmp	.-352    	; 0x8d4 <main+0x74>

00000a34 <i2csw_start>:
void i2csw_byte(uint8_t byte);

// ----------------------------------------------------------------------------

void i2csw_start(void) {
	DDRB |= (1 << SSD1306_SDA);	// Set port as output
     a34:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1 << SSD1306_SCL);	// Set port as output
     a36:	ba 9a       	sbi	0x17, 2	; 23
	I2CSW_HIGH(SSD1306_SCL);	// Set to HIGH
     a38:	c2 9a       	sbi	0x18, 2	; 24
	I2CSW_HIGH(SSD1306_SDA);	// Set to HIGH
     a3a:	c0 9a       	sbi	0x18, 0	; 24
	I2CSW_LOW(SSD1306_SDA);		// Set to LOW
     a3c:	c0 98       	cbi	0x18, 0	; 24
	I2CSW_LOW(SSD1306_SCL);		// Set to LOW
     a3e:	c2 98       	cbi	0x18, 2	; 24
     a40:	08 95       	ret

00000a42 <i2csw_stop>:
}

void i2csw_stop(void) {
	I2CSW_LOW(SSD1306_SCL);		// Set to LOW
     a42:	c2 98       	cbi	0x18, 2	; 24
	I2CSW_LOW(SSD1306_SDA);		// Set to LOW
     a44:	c0 98       	cbi	0x18, 0	; 24
	I2CSW_HIGH(SSD1306_SCL);	// Set to HIGH
     a46:	c2 9a       	sbi	0x18, 2	; 24
	I2CSW_HIGH(SSD1306_SDA);	// Set to HIGH
     a48:	c0 9a       	sbi	0x18, 0	; 24
	DDRB &= ~(1 << SSD1306_SDA);// Set port as input
     a4a:	b8 98       	cbi	0x17, 0	; 23
     a4c:	08 95       	ret

00000a4e <i2csw_byte>:
}

void i2csw_byte(uint8_t byte) {
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++) {
		if ((byte << i) & 0x80)
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	ac 01       	movw	r20, r24
     a56:	02 2e       	mov	r0, r18
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <i2csw_byte+0x10>
     a5a:	44 0f       	add	r20, r20
     a5c:	55 1f       	adc	r21, r21
     a5e:	0a 94       	dec	r0
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <i2csw_byte+0xc>
     a62:	47 ff       	sbrs	r20, 7
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <i2csw_byte+0x1c>
			I2CSW_HIGH(SSD1306_SDA);
     a66:	c0 9a       	sbi	0x18, 0	; 24
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <i2csw_byte+0x1e>
		else
			I2CSW_LOW(SSD1306_SDA);
     a6a:	c0 98       	cbi	0x18, 0	; 24
		I2CSW_HIGH(SSD1306_SCL);
     a6c:	c2 9a       	sbi	0x18, 2	; 24
		I2CSW_LOW(SSD1306_SCL);
     a6e:	c2 98       	cbi	0x18, 2	; 24
     a70:	2f 5f       	subi	r18, 0xFF	; 255
     a72:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRB &= ~(1 << SSD1306_SDA);// Set port as input
}

void i2csw_byte(uint8_t byte) {
	uint8_t i;
	for (i = 0; i < 8; i++) {
     a74:	28 30       	cpi	r18, 0x08	; 8
     a76:	31 05       	cpc	r19, r1
     a78:	69 f7       	brne	.-38     	; 0xa54 <i2csw_byte+0x6>
		else
			I2CSW_LOW(SSD1306_SDA);
		I2CSW_HIGH(SSD1306_SCL);
		I2CSW_LOW(SSD1306_SCL);
	}
	I2CSW_HIGH(SSD1306_SDA);
     a7a:	c0 9a       	sbi	0x18, 0	; 24
	I2CSW_HIGH(SSD1306_SCL);
     a7c:	c2 9a       	sbi	0x18, 2	; 24
	I2CSW_LOW(SSD1306_SCL);
     a7e:	c2 98       	cbi	0x18, 2	; 24
     a80:	08 95       	ret

00000a82 <ssd1306_start_command>:
}

// ============================================================================

void ssd1306_start_command(void) {
	i2csw_start();
     a82:	d8 df       	rcall	.-80     	; 0xa34 <i2csw_start>
	i2csw_byte(SSD1306_SADDR);	// Slave address: R/W(SA0)=0 - write
     a84:	88 e7       	ldi	r24, 0x78	; 120
     a86:	e3 df       	rcall	.-58     	; 0xa4e <i2csw_byte>
	i2csw_byte(0x00);			// Control byte: D/C=0 - write command
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	e1 df       	rcall	.-62     	; 0xa4e <i2csw_byte>
     a8c:	08 95       	ret

00000a8e <ssd1306_start_data>:
}

void ssd1306_start_data(void) {
	i2csw_start();
     a8e:	d2 df       	rcall	.-92     	; 0xa34 <i2csw_start>
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
     a90:	88 e7       	ldi	r24, 0x78	; 120
     a92:	dd df       	rcall	.-70     	; 0xa4e <i2csw_byte>
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
     a94:	80 e4       	ldi	r24, 0x40	; 64
     a96:	db df       	rcall	.-74     	; 0xa4e <i2csw_byte>
     a98:	08 95       	ret

00000a9a <ssd1306_data_byte>:
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     a9a:	d9 df       	rcall	.-78     	; 0xa4e <i2csw_byte>
     a9c:	08 95       	ret

00000a9e <ssd1306_stop>:
}

void ssd1306_stop(void) {
	i2csw_stop();
     a9e:	d1 df       	rcall	.-94     	; 0xa42 <i2csw_stop>
     aa0:	08 95       	ret

00000aa2 <ssd1306_init>:
}

// ============================================================================

void ssd1306_init(void) {
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
	ssd1306_start_command();	// Initiate transmission of command
     aaa:	eb df       	rcall	.-42     	; 0xa82 <ssd1306_start_command>
     aac:	c6 e4       	ldi	r28, 0x46	; 70
     aae:	d2 e0       	ldi	r29, 0x02	; 2
     ab0:	06 e6       	ldi	r16, 0x66	; 102
     ab2:	12 e0       	ldi	r17, 0x02	; 2
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
		ssd1306_data_byte(pgm_read_byte(&ssd1306_init_sequence[i]));	// Send the command out
     ab4:	fe 01       	movw	r30, r28
     ab6:	84 91       	lpm	r24, Z
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     ab8:	ca df       	rcall	.-108    	; 0xa4e <i2csw_byte>
     aba:	21 96       	adiw	r28, 0x01	; 1

// ============================================================================

void ssd1306_init(void) {
	ssd1306_start_command();	// Initiate transmission of command
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
     abc:	c0 17       	cp	r28, r16
     abe:	d1 07       	cpc	r29, r17
     ac0:	c9 f7       	brne	.-14     	; 0xab4 <ssd1306_init+0x12>
void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
}

void ssd1306_stop(void) {
	i2csw_stop();
     ac2:	bf df       	rcall	.-130    	; 0xa42 <i2csw_stop>
	ssd1306_start_command();	// Initiate transmission of command
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
		ssd1306_data_byte(pgm_read_byte(&ssd1306_init_sequence[i]));	// Send the command out
	}
	ssd1306_stop();	// Finish transmission
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	08 95       	ret

00000ace <ssd1306_setpos>:

void ssd1306_setpos(uint8_t x, uint8_t y) {
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	c8 2f       	mov	r28, r24
     ad4:	d6 2f       	mov	r29, r22
	ssd1306_start_command();
     ad6:	d5 df       	rcall	.-86     	; 0xa82 <ssd1306_start_command>
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     ad8:	8d 2f       	mov	r24, r29
     ada:	87 70       	andi	r24, 0x07	; 7
     adc:	80 6b       	ori	r24, 0xB0	; 176
     ade:	b7 df       	rcall	.-146    	; 0xa4e <i2csw_byte>
     ae0:	8c 2f       	mov	r24, r28
     ae2:	8f 70       	andi	r24, 0x0F	; 15
     ae4:	b4 df       	rcall	.-152    	; 0xa4e <i2csw_byte>
     ae6:	8c 2f       	mov	r24, r28
     ae8:	82 95       	swap	r24
     aea:	8f 70       	andi	r24, 0x0F	; 15
     aec:	80 61       	ori	r24, 0x10	; 16
     aee:	af df       	rcall	.-162    	; 0xa4e <i2csw_byte>
}

void ssd1306_stop(void) {
	i2csw_stop();
     af0:	a8 df       	rcall	.-176    	; 0xa42 <i2csw_stop>
	ssd1306_start_command();
	ssd1306_data_byte(0xb0 | (y & 0x07));	// Set page start address
	ssd1306_data_byte(x & 0x0f);			// Set the lower nibble of the column start address
	ssd1306_data_byte(0x10 | (x >> 4));		// Set the higher nibble of the column start address
	ssd1306_stop();	// Finish transmission
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <ssd1306_fill4>:

void ssd1306_fill4(uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4) {
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	e8 2e       	mov	r14, r24
     b06:	f6 2e       	mov	r15, r22
     b08:	04 2f       	mov	r16, r20
     b0a:	12 2f       	mov	r17, r18
	ssd1306_setpos(0, 0);
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	de df       	rcall	.-68     	; 0xace <ssd1306_setpos>
	ssd1306_start_data();	// Initiate transmission of data
     b12:	bd df       	rcall	.-134    	; 0xa8e <ssd1306_start_data>
     b14:	c0 e0       	ldi	r28, 0x00	; 0
     b16:	d1 e0       	ldi	r29, 0x01	; 1
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     b18:	8e 2d       	mov	r24, r14
     b1a:	99 df       	rcall	.-206    	; 0xa4e <i2csw_byte>
     b1c:	8f 2d       	mov	r24, r15
     b1e:	97 df       	rcall	.-210    	; 0xa4e <i2csw_byte>
     b20:	80 2f       	mov	r24, r16
     b22:	95 df       	rcall	.-214    	; 0xa4e <i2csw_byte>
     b24:	81 2f       	mov	r24, r17
     b26:	93 df       	rcall	.-218    	; 0xa4e <i2csw_byte>
     b28:	21 97       	sbiw	r28, 0x01	; 1
}

void ssd1306_fill4(uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4) {
	ssd1306_setpos(0, 0);
	ssd1306_start_data();	// Initiate transmission of data
	for (uint16_t i = 0; i < 128 * 8 / 4; i++) {
     b2a:	b1 f7       	brne	.-20     	; 0xb18 <ssd1306_fill4+0x20>
void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
}

void ssd1306_stop(void) {
	i2csw_stop();
     b2c:	8a df       	rcall	.-236    	; 0xa42 <i2csw_stop>
		ssd1306_data_byte(p2);
		ssd1306_data_byte(p3);
		ssd1306_data_byte(p4);
	}
	ssd1306_stop();	// Finish transmission
}
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	08 95       	ret

00000b3c <ssd1306_turn_display>:

void ssd1306_turn_display(bool on) {
     b3c:	cf 93       	push	r28
     b3e:	c8 2f       	mov	r28, r24
	ssd1306_start_command();
     b40:	a0 df       	rcall	.-192    	; 0xa82 <ssd1306_start_command>
	ssd1306_data_byte(on ? 0xAF : 0xAE);
     b42:	c1 11       	cpse	r28, r1
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <ssd1306_turn_display+0xe>
     b46:	8e ea       	ldi	r24, 0xAE	; 174
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <ssd1306_turn_display+0x10>
     b4a:	8f ea       	ldi	r24, 0xAF	; 175
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     b4c:	80 df       	rcall	.-256    	; 0xa4e <i2csw_byte>
}

void ssd1306_stop(void) {
	i2csw_stop();
     b4e:	79 df       	rcall	.-270    	; 0xa42 <i2csw_stop>

void ssd1306_turn_display(bool on) {
	ssd1306_start_command();
	ssd1306_data_byte(on ? 0xAF : 0xAE);
	ssd1306_stop();
}
     b50:	cf 91       	pop	r28
     b52:	08 95       	ret

00000b54 <ssd1306tx_init>:
uint8_t ssd1306tx_font_char_base;

// ----------------------------------------------------------------------------

void ssd1306tx_init(const uint8_t *fron_src, uint8_t char_base) {
	ssd1306tx_font_src = fron_src;
     b54:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <ssd1306tx_font_src+0x1>
     b58:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <ssd1306tx_font_src>
	ssd1306tx_font_char_base = char_base;
     b5c:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <ssd1306tx_font_char_base>
     b60:	08 95       	ret

00000b62 <ssd1306tx_char>:
}

// ----------------------------------------------------------------------------

void ssd1306tx_char(char ch) {
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
	uint16_t j = (ch << 2) + (ch << 1) - 192; // Equiv.: j=(ch-32)*6 <== Convert ASCII code to font data index.
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	8c 01       	movw	r16, r24
     b6e:	00 0f       	add	r16, r16
     b70:	11 1f       	adc	r17, r17
     b72:	00 0f       	add	r16, r16
     b74:	11 1f       	adc	r17, r17
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	08 0f       	add	r16, r24
     b7c:	19 1f       	adc	r17, r25
     b7e:	e8 01       	movw	r28, r16
     b80:	c0 5c       	subi	r28, 0xC0	; 192
     b82:	d1 09       	sbc	r29, r1
	ssd1306_start_data();
     b84:	84 df       	rcall	.-248    	; 0xa8e <ssd1306_start_data>
     b86:	0a 5b       	subi	r16, 0xBA	; 186
     b88:	11 09       	sbc	r17, r1
	for (uint8_t i = 0; i < 6; i++) {
		ssd1306_data_byte(pgm_read_byte(&ssd1306tx_font_src[j + i]));
     b8a:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <ssd1306tx_font_src>
     b8e:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <ssd1306tx_font_src+0x1>
     b92:	ec 0f       	add	r30, r28
     b94:	fd 1f       	adc	r31, r29
     b96:	84 91       	lpm	r24, Z
     b98:	80 df       	rcall	.-256    	; 0xa9a <ssd1306_data_byte>
     b9a:	21 96       	adiw	r28, 0x01	; 1
// ----------------------------------------------------------------------------

void ssd1306tx_char(char ch) {
	uint16_t j = (ch << 2) + (ch << 1) - 192; // Equiv.: j=(ch-32)*6 <== Convert ASCII code to font data index.
	ssd1306_start_data();
	for (uint8_t i = 0; i < 6; i++) {
     b9c:	c0 17       	cp	r28, r16
     b9e:	d1 07       	cpc	r29, r17
     ba0:	a1 f7       	brne	.-24     	; 0xb8a <ssd1306tx_char+0x28>
		ssd1306_data_byte(pgm_read_byte(&ssd1306tx_font_src[j + i]));
	}
	ssd1306_stop();
     ba2:	7d df       	rcall	.-262    	; 0xa9e <ssd1306_stop>
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	08 95       	ret

00000bae <ssd1306tx_string>:

void ssd1306tx_string(char *s) {
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	ec 01       	movw	r28, r24
	while (*s) {
     bb4:	88 81       	ld	r24, Y
     bb6:	88 23       	and	r24, r24
     bb8:	29 f0       	breq	.+10     	; 0xbc4 <ssd1306tx_string+0x16>
     bba:	21 96       	adiw	r28, 0x01	; 1
		ssd1306tx_char(*s++);
     bbc:	d2 df       	rcall	.-92     	; 0xb62 <ssd1306tx_char>
	}
	ssd1306_stop();
}

void ssd1306tx_string(char *s) {
	while (*s) {
     bbe:	89 91       	ld	r24, Y+
     bc0:	81 11       	cpse	r24, r1
     bc2:	fc cf       	rjmp	.-8      	; 0xbbc <ssd1306tx_string+0xe>
		ssd1306tx_char(*s++);
	}
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <itoa>:
	return result;
}

long abs_val(long v) {
	return v < 0 ? -v : v;
}
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	ec 01       	movw	r28, r24
     bdc:	7b 01       	movw	r14, r22
     bde:	6a 01       	movw	r12, r20
     be0:	8b 01       	movw	r16, r22
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <itoa+0x1e>
     be4:	8d 01       	movw	r16, r26
     be6:	e9 01       	movw	r28, r18
     be8:	ce 01       	movw	r24, r28
     bea:	b6 01       	movw	r22, r12
     bec:	e9 d2       	rcall	.+1490   	; 0x11c0 <__divmodhi4>
     bee:	9b 01       	movw	r18, r22
     bf0:	d8 01       	movw	r26, r16
     bf2:	11 96       	adiw	r26, 0x01	; 1
     bf4:	c6 01       	movw	r24, r12
     bf6:	d3 d2       	rcall	.+1446   	; 0x119e <__mulhi3>
     bf8:	fe 01       	movw	r30, r28
     bfa:	e8 1b       	sub	r30, r24
     bfc:	f9 0b       	sbc	r31, r25
     bfe:	ef 55       	subi	r30, 0x5F	; 95
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	83 a1       	ldd	r24, Z+35	; 0x23
     c04:	f8 01       	movw	r30, r16
     c06:	80 83       	st	Z, r24
     c08:	21 15       	cp	r18, r1
     c0a:	31 05       	cpc	r19, r1
     c0c:	59 f7       	brne	.-42     	; 0xbe4 <itoa+0x1a>
     c0e:	dd 23       	and	r29, r29
     c10:	1c f4       	brge	.+6      	; 0xc18 <itoa+0x4e>
     c12:	11 96       	adiw	r26, 0x01	; 1
     c14:	8d e2       	ldi	r24, 0x2D	; 45
     c16:	81 83       	std	Z+1, r24	; 0x01
     c18:	fd 01       	movw	r30, r26
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	1c 92       	st	X, r1
     c1e:	ee 16       	cp	r14, r30
     c20:	ff 06       	cpc	r15, r31
     c22:	50 f4       	brcc	.+20     	; 0xc38 <itoa+0x6e>
     c24:	d7 01       	movw	r26, r14
     c26:	e7 01       	movw	r28, r14
     c28:	80 81       	ld	r24, Z
     c2a:	31 97       	sbiw	r30, 0x01	; 1
     c2c:	9d 91       	ld	r25, X+
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	89 93       	st	Y+, r24
     c32:	ae 17       	cp	r26, r30
     c34:	bf 07       	cpc	r27, r31
     c36:	c0 f3       	brcs	.-16     	; 0xc28 <itoa+0x5e>
     c38:	c7 01       	movw	r24, r14
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	ff 90       	pop	r15
     c44:	ef 90       	pop	r14
     c46:	df 90       	pop	r13
     c48:	cf 90       	pop	r12
     c4a:	08 95       	ret

00000c4c <ftoa>:

char *ftoa(char *a, float f, int precision) {
     c4c:	2f 92       	push	r2
     c4e:	3f 92       	push	r3
     c50:	4f 92       	push	r4
     c52:	5f 92       	push	r5
     c54:	6f 92       	push	r6
     c56:	7f 92       	push	r7
     c58:	8f 92       	push	r8
     c5a:	9f 92       	push	r9
     c5c:	af 92       	push	r10
     c5e:	bf 92       	push	r11
     c60:	cf 92       	push	r12
     c62:	df 92       	push	r13
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	a4 97       	sbiw	r28, 0x24	; 36
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	8c 01       	movw	r16, r24
     c82:	6a 01       	movw	r12, r20
     c84:	7b 01       	movw	r14, r22
     c86:	39 01       	movw	r6, r18
	long p[] = {0, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000};
     c88:	84 e2       	ldi	r24, 0x24	; 36
     c8a:	e0 e6       	ldi	r30, 0x60	; 96
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	de 01       	movw	r26, r28
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	01 90       	ld	r0, Z+
     c94:	0d 92       	st	X+, r0
     c96:	8a 95       	dec	r24
     c98:	e1 f7       	brne	.-8      	; 0xc92 <ftoa+0x46>
	char *ret = a;
	long number = (long) f;
     c9a:	cb 01       	movw	r24, r22
     c9c:	ba 01       	movw	r22, r20
     c9e:	2d d1       	rcall	.+602    	; 0xefa <__fixsfsi>
     ca0:	4b 01       	movw	r8, r22
     ca2:	5c 01       	movw	r10, r24
	itoa(number, a, 10);
     ca4:	4a e0       	ldi	r20, 0x0A	; 10
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	b8 01       	movw	r22, r16
     caa:	c4 01       	movw	r24, r8
     cac:	8e df       	rcall	.-228    	; 0xbca <itoa>
	while (*a != '\0') a++;
     cae:	f8 01       	movw	r30, r16
     cb0:	80 81       	ld	r24, Z
     cb2:	88 23       	and	r24, r24
     cb4:	41 f0       	breq	.+16     	; 0xcc6 <ftoa+0x7a>
     cb6:	c8 01       	movw	r24, r16
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	fc 01       	movw	r30, r24
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	20 81       	ld	r18, Z
     cc0:	21 11       	cpse	r18, r1
     cc2:	fb cf       	rjmp	.-10     	; 0xcba <ftoa+0x6e>
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <ftoa+0x7c>
     cc6:	f8 01       	movw	r30, r16
	*a++ = '.';
     cc8:	8e e2       	ldi	r24, 0x2E	; 46
     cca:	81 93       	st	Z+, r24
     ccc:	1f 01       	movw	r2, r30
	long decimal = abs_val((long)((f - number) * p[precision]));
     cce:	66 0c       	add	r6, r6
     cd0:	77 1c       	adc	r7, r7
     cd2:	66 0c       	add	r6, r6
     cd4:	77 1c       	adc	r7, r7
     cd6:	fe 01       	movw	r30, r28
     cd8:	e6 0d       	add	r30, r6
     cda:	f7 1d       	adc	r31, r7
	itoa(decimal, a, 10);
     cdc:	61 81       	ldd	r22, Z+1	; 0x01
     cde:	72 81       	ldd	r23, Z+2	; 0x02
     ce0:	83 81       	ldd	r24, Z+3	; 0x03
     ce2:	94 81       	ldd	r25, Z+4	; 0x04
     ce4:	3d d1       	rcall	.+634    	; 0xf60 <__floatsisf>
     ce6:	2b 01       	movw	r4, r22
     ce8:	3c 01       	movw	r6, r24
     cea:	c5 01       	movw	r24, r10
     cec:	b4 01       	movw	r22, r8
     cee:	38 d1       	rcall	.+624    	; 0xf60 <__floatsisf>
     cf0:	9b 01       	movw	r18, r22
     cf2:	ac 01       	movw	r20, r24
     cf4:	c7 01       	movw	r24, r14
     cf6:	b6 01       	movw	r22, r12
     cf8:	2f d0       	rcall	.+94     	; 0xd58 <__subsf3>
     cfa:	9b 01       	movw	r18, r22
     cfc:	ac 01       	movw	r20, r24
     cfe:	c3 01       	movw	r24, r6
     d00:	b2 01       	movw	r22, r4
     d02:	e2 d1       	rcall	.+964    	; 0x10c8 <__mulsf3>
     d04:	fa d0       	rcall	.+500    	; 0xefa <__fixsfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	bb 23       	and	r27, r27
     d0c:	3c f4       	brge	.+14     	; 0xd1c <ftoa+0xd0>
     d0e:	b0 95       	com	r27
     d10:	a0 95       	com	r26
     d12:	90 95       	com	r25
     d14:	81 95       	neg	r24
     d16:	9f 4f       	sbci	r25, 0xFF	; 255
     d18:	af 4f       	sbci	r26, 0xFF	; 255
     d1a:	bf 4f       	sbci	r27, 0xFF	; 255
     d1c:	4a e0       	ldi	r20, 0x0A	; 10
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	b1 01       	movw	r22, r2
     d22:	53 df       	rcall	.-346    	; 0xbca <itoa>
	return ret;
}
     d24:	c8 01       	movw	r24, r16
     d26:	a4 96       	adiw	r28, 0x24	; 36
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	9f 90       	pop	r9
     d48:	8f 90       	pop	r8
     d4a:	7f 90       	pop	r7
     d4c:	6f 90       	pop	r6
     d4e:	5f 90       	pop	r5
     d50:	4f 90       	pop	r4
     d52:	3f 90       	pop	r3
     d54:	2f 90       	pop	r2
     d56:	08 95       	ret

00000d58 <__subsf3>:
     d58:	50 58       	subi	r21, 0x80	; 128

00000d5a <__addsf3>:
     d5a:	bb 27       	eor	r27, r27
     d5c:	aa 27       	eor	r26, r26
     d5e:	0e d0       	rcall	.+28     	; 0xd7c <__addsf3x>
     d60:	75 c1       	rjmp	.+746    	; 0x104c <__fp_round>
     d62:	66 d1       	rcall	.+716    	; 0x1030 <__fp_pscA>
     d64:	30 f0       	brcs	.+12     	; 0xd72 <__addsf3+0x18>
     d66:	6b d1       	rcall	.+726    	; 0x103e <__fp_pscB>
     d68:	20 f0       	brcs	.+8      	; 0xd72 <__addsf3+0x18>
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__addsf3+0x1e>
     d6c:	9f 3f       	cpi	r25, 0xFF	; 255
     d6e:	11 f4       	brne	.+4      	; 0xd74 <__addsf3+0x1a>
     d70:	1e f4       	brtc	.+6      	; 0xd78 <__addsf3+0x1e>
     d72:	5b c1       	rjmp	.+694    	; 0x102a <__fp_nan>
     d74:	0e f4       	brtc	.+2      	; 0xd78 <__addsf3+0x1e>
     d76:	e0 95       	com	r30
     d78:	e7 fb       	bst	r30, 7
     d7a:	51 c1       	rjmp	.+674    	; 0x101e <__fp_inf>

00000d7c <__addsf3x>:
     d7c:	e9 2f       	mov	r30, r25
     d7e:	77 d1       	rcall	.+750    	; 0x106e <__fp_split3>
     d80:	80 f3       	brcs	.-32     	; 0xd62 <__addsf3+0x8>
     d82:	ba 17       	cp	r27, r26
     d84:	62 07       	cpc	r22, r18
     d86:	73 07       	cpc	r23, r19
     d88:	84 07       	cpc	r24, r20
     d8a:	95 07       	cpc	r25, r21
     d8c:	18 f0       	brcs	.+6      	; 0xd94 <__addsf3x+0x18>
     d8e:	71 f4       	brne	.+28     	; 0xdac <__addsf3x+0x30>
     d90:	9e f5       	brtc	.+102    	; 0xdf8 <__addsf3x+0x7c>
     d92:	8f c1       	rjmp	.+798    	; 0x10b2 <__fp_zero>
     d94:	0e f4       	brtc	.+2      	; 0xd98 <__addsf3x+0x1c>
     d96:	e0 95       	com	r30
     d98:	0b 2e       	mov	r0, r27
     d9a:	ba 2f       	mov	r27, r26
     d9c:	a0 2d       	mov	r26, r0
     d9e:	0b 01       	movw	r0, r22
     da0:	b9 01       	movw	r22, r18
     da2:	90 01       	movw	r18, r0
     da4:	0c 01       	movw	r0, r24
     da6:	ca 01       	movw	r24, r20
     da8:	a0 01       	movw	r20, r0
     daa:	11 24       	eor	r1, r1
     dac:	ff 27       	eor	r31, r31
     dae:	59 1b       	sub	r21, r25
     db0:	99 f0       	breq	.+38     	; 0xdd8 <__addsf3x+0x5c>
     db2:	59 3f       	cpi	r21, 0xF9	; 249
     db4:	50 f4       	brcc	.+20     	; 0xdca <__addsf3x+0x4e>
     db6:	50 3e       	cpi	r21, 0xE0	; 224
     db8:	68 f1       	brcs	.+90     	; 0xe14 <__addsf3x+0x98>
     dba:	1a 16       	cp	r1, r26
     dbc:	f0 40       	sbci	r31, 0x00	; 0
     dbe:	a2 2f       	mov	r26, r18
     dc0:	23 2f       	mov	r18, r19
     dc2:	34 2f       	mov	r19, r20
     dc4:	44 27       	eor	r20, r20
     dc6:	58 5f       	subi	r21, 0xF8	; 248
     dc8:	f3 cf       	rjmp	.-26     	; 0xdb0 <__addsf3x+0x34>
     dca:	46 95       	lsr	r20
     dcc:	37 95       	ror	r19
     dce:	27 95       	ror	r18
     dd0:	a7 95       	ror	r26
     dd2:	f0 40       	sbci	r31, 0x00	; 0
     dd4:	53 95       	inc	r21
     dd6:	c9 f7       	brne	.-14     	; 0xdca <__addsf3x+0x4e>
     dd8:	7e f4       	brtc	.+30     	; 0xdf8 <__addsf3x+0x7c>
     dda:	1f 16       	cp	r1, r31
     ddc:	ba 0b       	sbc	r27, r26
     dde:	62 0b       	sbc	r22, r18
     de0:	73 0b       	sbc	r23, r19
     de2:	84 0b       	sbc	r24, r20
     de4:	ba f0       	brmi	.+46     	; 0xe14 <__addsf3x+0x98>
     de6:	91 50       	subi	r25, 0x01	; 1
     de8:	a1 f0       	breq	.+40     	; 0xe12 <__addsf3x+0x96>
     dea:	ff 0f       	add	r31, r31
     dec:	bb 1f       	adc	r27, r27
     dee:	66 1f       	adc	r22, r22
     df0:	77 1f       	adc	r23, r23
     df2:	88 1f       	adc	r24, r24
     df4:	c2 f7       	brpl	.-16     	; 0xde6 <__addsf3x+0x6a>
     df6:	0e c0       	rjmp	.+28     	; 0xe14 <__addsf3x+0x98>
     df8:	ba 0f       	add	r27, r26
     dfa:	62 1f       	adc	r22, r18
     dfc:	73 1f       	adc	r23, r19
     dfe:	84 1f       	adc	r24, r20
     e00:	48 f4       	brcc	.+18     	; 0xe14 <__addsf3x+0x98>
     e02:	87 95       	ror	r24
     e04:	77 95       	ror	r23
     e06:	67 95       	ror	r22
     e08:	b7 95       	ror	r27
     e0a:	f7 95       	ror	r31
     e0c:	9e 3f       	cpi	r25, 0xFE	; 254
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <__addsf3x+0x96>
     e10:	b3 cf       	rjmp	.-154    	; 0xd78 <__addsf3+0x1e>
     e12:	93 95       	inc	r25
     e14:	88 0f       	add	r24, r24
     e16:	08 f0       	brcs	.+2      	; 0xe1a <__addsf3x+0x9e>
     e18:	99 27       	eor	r25, r25
     e1a:	ee 0f       	add	r30, r30
     e1c:	97 95       	ror	r25
     e1e:	87 95       	ror	r24
     e20:	08 95       	ret

00000e22 <__cmpsf2>:
     e22:	d9 d0       	rcall	.+434    	; 0xfd6 <__fp_cmp>
     e24:	08 f4       	brcc	.+2      	; 0xe28 <__cmpsf2+0x6>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	08 95       	ret

00000e2a <__divsf3>:
     e2a:	0c d0       	rcall	.+24     	; 0xe44 <__divsf3x>
     e2c:	0f c1       	rjmp	.+542    	; 0x104c <__fp_round>
     e2e:	07 d1       	rcall	.+526    	; 0x103e <__fp_pscB>
     e30:	40 f0       	brcs	.+16     	; 0xe42 <__divsf3+0x18>
     e32:	fe d0       	rcall	.+508    	; 0x1030 <__fp_pscA>
     e34:	30 f0       	brcs	.+12     	; 0xe42 <__divsf3+0x18>
     e36:	21 f4       	brne	.+8      	; 0xe40 <__divsf3+0x16>
     e38:	5f 3f       	cpi	r21, 0xFF	; 255
     e3a:	19 f0       	breq	.+6      	; 0xe42 <__divsf3+0x18>
     e3c:	f0 c0       	rjmp	.+480    	; 0x101e <__fp_inf>
     e3e:	51 11       	cpse	r21, r1
     e40:	39 c1       	rjmp	.+626    	; 0x10b4 <__fp_szero>
     e42:	f3 c0       	rjmp	.+486    	; 0x102a <__fp_nan>

00000e44 <__divsf3x>:
     e44:	14 d1       	rcall	.+552    	; 0x106e <__fp_split3>
     e46:	98 f3       	brcs	.-26     	; 0xe2e <__divsf3+0x4>

00000e48 <__divsf3_pse>:
     e48:	99 23       	and	r25, r25
     e4a:	c9 f3       	breq	.-14     	; 0xe3e <__divsf3+0x14>
     e4c:	55 23       	and	r21, r21
     e4e:	b1 f3       	breq	.-20     	; 0xe3c <__divsf3+0x12>
     e50:	95 1b       	sub	r25, r21
     e52:	55 0b       	sbc	r21, r21
     e54:	bb 27       	eor	r27, r27
     e56:	aa 27       	eor	r26, r26
     e58:	62 17       	cp	r22, r18
     e5a:	73 07       	cpc	r23, r19
     e5c:	84 07       	cpc	r24, r20
     e5e:	38 f0       	brcs	.+14     	; 0xe6e <__divsf3_pse+0x26>
     e60:	9f 5f       	subi	r25, 0xFF	; 255
     e62:	5f 4f       	sbci	r21, 0xFF	; 255
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	44 1f       	adc	r20, r20
     e6a:	aa 1f       	adc	r26, r26
     e6c:	a9 f3       	breq	.-22     	; 0xe58 <__divsf3_pse+0x10>
     e6e:	33 d0       	rcall	.+102    	; 0xed6 <__divsf3_pse+0x8e>
     e70:	0e 2e       	mov	r0, r30
     e72:	3a f0       	brmi	.+14     	; 0xe82 <__divsf3_pse+0x3a>
     e74:	e0 e8       	ldi	r30, 0x80	; 128
     e76:	30 d0       	rcall	.+96     	; 0xed8 <__divsf3_pse+0x90>
     e78:	91 50       	subi	r25, 0x01	; 1
     e7a:	50 40       	sbci	r21, 0x00	; 0
     e7c:	e6 95       	lsr	r30
     e7e:	00 1c       	adc	r0, r0
     e80:	ca f7       	brpl	.-14     	; 0xe74 <__divsf3_pse+0x2c>
     e82:	29 d0       	rcall	.+82     	; 0xed6 <__divsf3_pse+0x8e>
     e84:	fe 2f       	mov	r31, r30
     e86:	27 d0       	rcall	.+78     	; 0xed6 <__divsf3_pse+0x8e>
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	88 1f       	adc	r24, r24
     e8e:	bb 1f       	adc	r27, r27
     e90:	26 17       	cp	r18, r22
     e92:	37 07       	cpc	r19, r23
     e94:	48 07       	cpc	r20, r24
     e96:	ab 07       	cpc	r26, r27
     e98:	b0 e8       	ldi	r27, 0x80	; 128
     e9a:	09 f0       	breq	.+2      	; 0xe9e <__divsf3_pse+0x56>
     e9c:	bb 0b       	sbc	r27, r27
     e9e:	80 2d       	mov	r24, r0
     ea0:	bf 01       	movw	r22, r30
     ea2:	ff 27       	eor	r31, r31
     ea4:	93 58       	subi	r25, 0x83	; 131
     ea6:	5f 4f       	sbci	r21, 0xFF	; 255
     ea8:	2a f0       	brmi	.+10     	; 0xeb4 <__divsf3_pse+0x6c>
     eaa:	9e 3f       	cpi	r25, 0xFE	; 254
     eac:	51 05       	cpc	r21, r1
     eae:	68 f0       	brcs	.+26     	; 0xeca <__divsf3_pse+0x82>
     eb0:	b6 c0       	rjmp	.+364    	; 0x101e <__fp_inf>
     eb2:	00 c1       	rjmp	.+512    	; 0x10b4 <__fp_szero>
     eb4:	5f 3f       	cpi	r21, 0xFF	; 255
     eb6:	ec f3       	brlt	.-6      	; 0xeb2 <__divsf3_pse+0x6a>
     eb8:	98 3e       	cpi	r25, 0xE8	; 232
     eba:	dc f3       	brlt	.-10     	; 0xeb2 <__divsf3_pse+0x6a>
     ebc:	86 95       	lsr	r24
     ebe:	77 95       	ror	r23
     ec0:	67 95       	ror	r22
     ec2:	b7 95       	ror	r27
     ec4:	f7 95       	ror	r31
     ec6:	9f 5f       	subi	r25, 0xFF	; 255
     ec8:	c9 f7       	brne	.-14     	; 0xebc <__divsf3_pse+0x74>
     eca:	88 0f       	add	r24, r24
     ecc:	91 1d       	adc	r25, r1
     ece:	96 95       	lsr	r25
     ed0:	87 95       	ror	r24
     ed2:	97 f9       	bld	r25, 7
     ed4:	08 95       	ret
     ed6:	e1 e0       	ldi	r30, 0x01	; 1
     ed8:	66 0f       	add	r22, r22
     eda:	77 1f       	adc	r23, r23
     edc:	88 1f       	adc	r24, r24
     ede:	bb 1f       	adc	r27, r27
     ee0:	62 17       	cp	r22, r18
     ee2:	73 07       	cpc	r23, r19
     ee4:	84 07       	cpc	r24, r20
     ee6:	ba 07       	cpc	r27, r26
     ee8:	20 f0       	brcs	.+8      	; 0xef2 <__divsf3_pse+0xaa>
     eea:	62 1b       	sub	r22, r18
     eec:	73 0b       	sbc	r23, r19
     eee:	84 0b       	sbc	r24, r20
     ef0:	ba 0b       	sbc	r27, r26
     ef2:	ee 1f       	adc	r30, r30
     ef4:	88 f7       	brcc	.-30     	; 0xed8 <__divsf3_pse+0x90>
     ef6:	e0 95       	com	r30
     ef8:	08 95       	ret

00000efa <__fixsfsi>:
     efa:	04 d0       	rcall	.+8      	; 0xf04 <__fixunssfsi>
     efc:	68 94       	set
     efe:	b1 11       	cpse	r27, r1
     f00:	d9 c0       	rjmp	.+434    	; 0x10b4 <__fp_szero>
     f02:	08 95       	ret

00000f04 <__fixunssfsi>:
     f04:	bc d0       	rcall	.+376    	; 0x107e <__fp_splitA>
     f06:	88 f0       	brcs	.+34     	; 0xf2a <__fixunssfsi+0x26>
     f08:	9f 57       	subi	r25, 0x7F	; 127
     f0a:	90 f0       	brcs	.+36     	; 0xf30 <__fixunssfsi+0x2c>
     f0c:	b9 2f       	mov	r27, r25
     f0e:	99 27       	eor	r25, r25
     f10:	b7 51       	subi	r27, 0x17	; 23
     f12:	a0 f0       	brcs	.+40     	; 0xf3c <__fixunssfsi+0x38>
     f14:	d1 f0       	breq	.+52     	; 0xf4a <__fixunssfsi+0x46>
     f16:	66 0f       	add	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	1a f0       	brmi	.+6      	; 0xf26 <__fixunssfsi+0x22>
     f20:	ba 95       	dec	r27
     f22:	c9 f7       	brne	.-14     	; 0xf16 <__fixunssfsi+0x12>
     f24:	12 c0       	rjmp	.+36     	; 0xf4a <__fixunssfsi+0x46>
     f26:	b1 30       	cpi	r27, 0x01	; 1
     f28:	81 f0       	breq	.+32     	; 0xf4a <__fixunssfsi+0x46>
     f2a:	c3 d0       	rcall	.+390    	; 0x10b2 <__fp_zero>
     f2c:	b1 e0       	ldi	r27, 0x01	; 1
     f2e:	08 95       	ret
     f30:	c0 c0       	rjmp	.+384    	; 0x10b2 <__fp_zero>
     f32:	67 2f       	mov	r22, r23
     f34:	78 2f       	mov	r23, r24
     f36:	88 27       	eor	r24, r24
     f38:	b8 5f       	subi	r27, 0xF8	; 248
     f3a:	39 f0       	breq	.+14     	; 0xf4a <__fixunssfsi+0x46>
     f3c:	b9 3f       	cpi	r27, 0xF9	; 249
     f3e:	cc f3       	brlt	.-14     	; 0xf32 <__fixunssfsi+0x2e>
     f40:	86 95       	lsr	r24
     f42:	77 95       	ror	r23
     f44:	67 95       	ror	r22
     f46:	b3 95       	inc	r27
     f48:	d9 f7       	brne	.-10     	; 0xf40 <__fixunssfsi+0x3c>
     f4a:	3e f4       	brtc	.+14     	; 0xf5a <__fixunssfsi+0x56>
     f4c:	90 95       	com	r25
     f4e:	80 95       	com	r24
     f50:	70 95       	com	r23
     f52:	61 95       	neg	r22
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	8f 4f       	sbci	r24, 0xFF	; 255
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	08 95       	ret

00000f5c <__floatunsisf>:
     f5c:	e8 94       	clt
     f5e:	09 c0       	rjmp	.+18     	; 0xf72 <__floatsisf+0x12>

00000f60 <__floatsisf>:
     f60:	97 fb       	bst	r25, 7
     f62:	3e f4       	brtc	.+14     	; 0xf72 <__floatsisf+0x12>
     f64:	90 95       	com	r25
     f66:	80 95       	com	r24
     f68:	70 95       	com	r23
     f6a:	61 95       	neg	r22
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	8f 4f       	sbci	r24, 0xFF	; 255
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	99 23       	and	r25, r25
     f74:	a9 f0       	breq	.+42     	; 0xfa0 <__floatsisf+0x40>
     f76:	f9 2f       	mov	r31, r25
     f78:	96 e9       	ldi	r25, 0x96	; 150
     f7a:	bb 27       	eor	r27, r27
     f7c:	93 95       	inc	r25
     f7e:	f6 95       	lsr	r31
     f80:	87 95       	ror	r24
     f82:	77 95       	ror	r23
     f84:	67 95       	ror	r22
     f86:	b7 95       	ror	r27
     f88:	f1 11       	cpse	r31, r1
     f8a:	f8 cf       	rjmp	.-16     	; 0xf7c <__floatsisf+0x1c>
     f8c:	fa f4       	brpl	.+62     	; 0xfcc <__floatsisf+0x6c>
     f8e:	bb 0f       	add	r27, r27
     f90:	11 f4       	brne	.+4      	; 0xf96 <__floatsisf+0x36>
     f92:	60 ff       	sbrs	r22, 0
     f94:	1b c0       	rjmp	.+54     	; 0xfcc <__floatsisf+0x6c>
     f96:	6f 5f       	subi	r22, 0xFF	; 255
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	8f 4f       	sbci	r24, 0xFF	; 255
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	16 c0       	rjmp	.+44     	; 0xfcc <__floatsisf+0x6c>
     fa0:	88 23       	and	r24, r24
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <__floatsisf+0x48>
     fa4:	96 e9       	ldi	r25, 0x96	; 150
     fa6:	11 c0       	rjmp	.+34     	; 0xfca <__floatsisf+0x6a>
     fa8:	77 23       	and	r23, r23
     faa:	21 f0       	breq	.+8      	; 0xfb4 <__floatsisf+0x54>
     fac:	9e e8       	ldi	r25, 0x8E	; 142
     fae:	87 2f       	mov	r24, r23
     fb0:	76 2f       	mov	r23, r22
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <__floatsisf+0x5e>
     fb4:	66 23       	and	r22, r22
     fb6:	71 f0       	breq	.+28     	; 0xfd4 <__floatsisf+0x74>
     fb8:	96 e8       	ldi	r25, 0x86	; 134
     fba:	86 2f       	mov	r24, r22
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	2a f0       	brmi	.+10     	; 0xfcc <__floatsisf+0x6c>
     fc2:	9a 95       	dec	r25
     fc4:	66 0f       	add	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	88 1f       	adc	r24, r24
     fca:	da f7       	brpl	.-10     	; 0xfc2 <__floatsisf+0x62>
     fcc:	88 0f       	add	r24, r24
     fce:	96 95       	lsr	r25
     fd0:	87 95       	ror	r24
     fd2:	97 f9       	bld	r25, 7
     fd4:	08 95       	ret

00000fd6 <__fp_cmp>:
     fd6:	99 0f       	add	r25, r25
     fd8:	00 08       	sbc	r0, r0
     fda:	55 0f       	add	r21, r21
     fdc:	aa 0b       	sbc	r26, r26
     fde:	e0 e8       	ldi	r30, 0x80	; 128
     fe0:	fe ef       	ldi	r31, 0xFE	; 254
     fe2:	16 16       	cp	r1, r22
     fe4:	17 06       	cpc	r1, r23
     fe6:	e8 07       	cpc	r30, r24
     fe8:	f9 07       	cpc	r31, r25
     fea:	c0 f0       	brcs	.+48     	; 0x101c <__fp_cmp+0x46>
     fec:	12 16       	cp	r1, r18
     fee:	13 06       	cpc	r1, r19
     ff0:	e4 07       	cpc	r30, r20
     ff2:	f5 07       	cpc	r31, r21
     ff4:	98 f0       	brcs	.+38     	; 0x101c <__fp_cmp+0x46>
     ff6:	62 1b       	sub	r22, r18
     ff8:	73 0b       	sbc	r23, r19
     ffa:	84 0b       	sbc	r24, r20
     ffc:	95 0b       	sbc	r25, r21
     ffe:	39 f4       	brne	.+14     	; 0x100e <__fp_cmp+0x38>
    1000:	0a 26       	eor	r0, r26
    1002:	61 f0       	breq	.+24     	; 0x101c <__fp_cmp+0x46>
    1004:	23 2b       	or	r18, r19
    1006:	24 2b       	or	r18, r20
    1008:	25 2b       	or	r18, r21
    100a:	21 f4       	brne	.+8      	; 0x1014 <__fp_cmp+0x3e>
    100c:	08 95       	ret
    100e:	0a 26       	eor	r0, r26
    1010:	09 f4       	brne	.+2      	; 0x1014 <__fp_cmp+0x3e>
    1012:	a1 40       	sbci	r26, 0x01	; 1
    1014:	a6 95       	lsr	r26
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	81 1d       	adc	r24, r1
    101a:	81 1d       	adc	r24, r1
    101c:	08 95       	ret

0000101e <__fp_inf>:
    101e:	97 f9       	bld	r25, 7
    1020:	9f 67       	ori	r25, 0x7F	; 127
    1022:	80 e8       	ldi	r24, 0x80	; 128
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	08 95       	ret

0000102a <__fp_nan>:
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    102c:	80 ec       	ldi	r24, 0xC0	; 192
    102e:	08 95       	ret

00001030 <__fp_pscA>:
    1030:	00 24       	eor	r0, r0
    1032:	0a 94       	dec	r0
    1034:	16 16       	cp	r1, r22
    1036:	17 06       	cpc	r1, r23
    1038:	18 06       	cpc	r1, r24
    103a:	09 06       	cpc	r0, r25
    103c:	08 95       	ret

0000103e <__fp_pscB>:
    103e:	00 24       	eor	r0, r0
    1040:	0a 94       	dec	r0
    1042:	12 16       	cp	r1, r18
    1044:	13 06       	cpc	r1, r19
    1046:	14 06       	cpc	r1, r20
    1048:	05 06       	cpc	r0, r21
    104a:	08 95       	ret

0000104c <__fp_round>:
    104c:	09 2e       	mov	r0, r25
    104e:	03 94       	inc	r0
    1050:	00 0c       	add	r0, r0
    1052:	11 f4       	brne	.+4      	; 0x1058 <__fp_round+0xc>
    1054:	88 23       	and	r24, r24
    1056:	52 f0       	brmi	.+20     	; 0x106c <__fp_round+0x20>
    1058:	bb 0f       	add	r27, r27
    105a:	40 f4       	brcc	.+16     	; 0x106c <__fp_round+0x20>
    105c:	bf 2b       	or	r27, r31
    105e:	11 f4       	brne	.+4      	; 0x1064 <__fp_round+0x18>
    1060:	60 ff       	sbrs	r22, 0
    1062:	04 c0       	rjmp	.+8      	; 0x106c <__fp_round+0x20>
    1064:	6f 5f       	subi	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	08 95       	ret

0000106e <__fp_split3>:
    106e:	57 fd       	sbrc	r21, 7
    1070:	90 58       	subi	r25, 0x80	; 128
    1072:	44 0f       	add	r20, r20
    1074:	55 1f       	adc	r21, r21
    1076:	59 f0       	breq	.+22     	; 0x108e <__fp_splitA+0x10>
    1078:	5f 3f       	cpi	r21, 0xFF	; 255
    107a:	71 f0       	breq	.+28     	; 0x1098 <__fp_splitA+0x1a>
    107c:	47 95       	ror	r20

0000107e <__fp_splitA>:
    107e:	88 0f       	add	r24, r24
    1080:	97 fb       	bst	r25, 7
    1082:	99 1f       	adc	r25, r25
    1084:	61 f0       	breq	.+24     	; 0x109e <__fp_splitA+0x20>
    1086:	9f 3f       	cpi	r25, 0xFF	; 255
    1088:	79 f0       	breq	.+30     	; 0x10a8 <__fp_splitA+0x2a>
    108a:	87 95       	ror	r24
    108c:	08 95       	ret
    108e:	12 16       	cp	r1, r18
    1090:	13 06       	cpc	r1, r19
    1092:	14 06       	cpc	r1, r20
    1094:	55 1f       	adc	r21, r21
    1096:	f2 cf       	rjmp	.-28     	; 0x107c <__fp_split3+0xe>
    1098:	46 95       	lsr	r20
    109a:	f1 df       	rcall	.-30     	; 0x107e <__fp_splitA>
    109c:	08 c0       	rjmp	.+16     	; 0x10ae <__fp_splitA+0x30>
    109e:	16 16       	cp	r1, r22
    10a0:	17 06       	cpc	r1, r23
    10a2:	18 06       	cpc	r1, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	f1 cf       	rjmp	.-30     	; 0x108a <__fp_splitA+0xc>
    10a8:	86 95       	lsr	r24
    10aa:	71 05       	cpc	r23, r1
    10ac:	61 05       	cpc	r22, r1
    10ae:	08 94       	sec
    10b0:	08 95       	ret

000010b2 <__fp_zero>:
    10b2:	e8 94       	clt

000010b4 <__fp_szero>:
    10b4:	bb 27       	eor	r27, r27
    10b6:	66 27       	eor	r22, r22
    10b8:	77 27       	eor	r23, r23
    10ba:	cb 01       	movw	r24, r22
    10bc:	97 f9       	bld	r25, 7
    10be:	08 95       	ret

000010c0 <__gesf2>:
    10c0:	8a df       	rcall	.-236    	; 0xfd6 <__fp_cmp>
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <__gesf2+0x6>
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	08 95       	ret

000010c8 <__mulsf3>:
    10c8:	0a d0       	rcall	.+20     	; 0x10de <__mulsf3x>
    10ca:	c0 cf       	rjmp	.-128    	; 0x104c <__fp_round>
    10cc:	b1 df       	rcall	.-158    	; 0x1030 <__fp_pscA>
    10ce:	28 f0       	brcs	.+10     	; 0x10da <__mulsf3+0x12>
    10d0:	b6 df       	rcall	.-148    	; 0x103e <__fp_pscB>
    10d2:	18 f0       	brcs	.+6      	; 0x10da <__mulsf3+0x12>
    10d4:	95 23       	and	r25, r21
    10d6:	09 f0       	breq	.+2      	; 0x10da <__mulsf3+0x12>
    10d8:	a2 cf       	rjmp	.-188    	; 0x101e <__fp_inf>
    10da:	a7 cf       	rjmp	.-178    	; 0x102a <__fp_nan>
    10dc:	eb cf       	rjmp	.-42     	; 0x10b4 <__fp_szero>

000010de <__mulsf3x>:
    10de:	c7 df       	rcall	.-114    	; 0x106e <__fp_split3>
    10e0:	a8 f3       	brcs	.-22     	; 0x10cc <__mulsf3+0x4>

000010e2 <__mulsf3_pse>:
    10e2:	99 23       	and	r25, r25
    10e4:	d9 f3       	breq	.-10     	; 0x10dc <__mulsf3+0x14>
    10e6:	55 23       	and	r21, r21
    10e8:	c9 f3       	breq	.-14     	; 0x10dc <__mulsf3+0x14>
    10ea:	95 0f       	add	r25, r21
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	55 1f       	adc	r21, r21
    10f0:	aa 27       	eor	r26, r26
    10f2:	ee 27       	eor	r30, r30
    10f4:	ff 27       	eor	r31, r31
    10f6:	bb 27       	eor	r27, r27
    10f8:	00 24       	eor	r0, r0
    10fa:	08 94       	sec
    10fc:	67 95       	ror	r22
    10fe:	20 f4       	brcc	.+8      	; 0x1108 <__mulsf3_pse+0x26>
    1100:	e2 0f       	add	r30, r18
    1102:	f3 1f       	adc	r31, r19
    1104:	b4 1f       	adc	r27, r20
    1106:	0a 1e       	adc	r0, r26
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	44 1f       	adc	r20, r20
    110e:	aa 1f       	adc	r26, r26
    1110:	66 95       	lsr	r22
    1112:	a9 f7       	brne	.-22     	; 0x10fe <__mulsf3_pse+0x1c>
    1114:	77 95       	ror	r23
    1116:	30 f4       	brcc	.+12     	; 0x1124 <__mulsf3_pse+0x42>
    1118:	f3 0f       	add	r31, r19
    111a:	b4 1f       	adc	r27, r20
    111c:	0a 1e       	adc	r0, r26
    111e:	12 1e       	adc	r1, r18
    1120:	08 f4       	brcc	.+2      	; 0x1124 <__mulsf3_pse+0x42>
    1122:	63 95       	inc	r22
    1124:	33 0f       	add	r19, r19
    1126:	44 1f       	adc	r20, r20
    1128:	aa 1f       	adc	r26, r26
    112a:	22 1f       	adc	r18, r18
    112c:	76 95       	lsr	r23
    112e:	99 f7       	brne	.-26     	; 0x1116 <__mulsf3_pse+0x34>
    1130:	87 95       	ror	r24
    1132:	20 f4       	brcc	.+8      	; 0x113c <__mulsf3_pse+0x5a>
    1134:	b4 0f       	add	r27, r20
    1136:	0a 1e       	adc	r0, r26
    1138:	12 1e       	adc	r1, r18
    113a:	63 1f       	adc	r22, r19
    113c:	44 0f       	add	r20, r20
    113e:	aa 1f       	adc	r26, r26
    1140:	22 1f       	adc	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	86 95       	lsr	r24
    1146:	a9 f7       	brne	.-22     	; 0x1132 <__mulsf3_pse+0x50>
    1148:	86 2f       	mov	r24, r22
    114a:	71 2d       	mov	r23, r1
    114c:	60 2d       	mov	r22, r0
    114e:	11 24       	eor	r1, r1
    1150:	9f 57       	subi	r25, 0x7F	; 127
    1152:	50 40       	sbci	r21, 0x00	; 0
    1154:	8a f0       	brmi	.+34     	; 0x1178 <__mulsf3_pse+0x96>
    1156:	e1 f0       	breq	.+56     	; 0x1190 <__mulsf3_pse+0xae>
    1158:	88 23       	and	r24, r24
    115a:	4a f0       	brmi	.+18     	; 0x116e <__mulsf3_pse+0x8c>
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	bb 1f       	adc	r27, r27
    1162:	66 1f       	adc	r22, r22
    1164:	77 1f       	adc	r23, r23
    1166:	88 1f       	adc	r24, r24
    1168:	91 50       	subi	r25, 0x01	; 1
    116a:	50 40       	sbci	r21, 0x00	; 0
    116c:	a9 f7       	brne	.-22     	; 0x1158 <__mulsf3_pse+0x76>
    116e:	9e 3f       	cpi	r25, 0xFE	; 254
    1170:	51 05       	cpc	r21, r1
    1172:	70 f0       	brcs	.+28     	; 0x1190 <__mulsf3_pse+0xae>
    1174:	54 cf       	rjmp	.-344    	; 0x101e <__fp_inf>
    1176:	9e cf       	rjmp	.-196    	; 0x10b4 <__fp_szero>
    1178:	5f 3f       	cpi	r21, 0xFF	; 255
    117a:	ec f3       	brlt	.-6      	; 0x1176 <__mulsf3_pse+0x94>
    117c:	98 3e       	cpi	r25, 0xE8	; 232
    117e:	dc f3       	brlt	.-10     	; 0x1176 <__mulsf3_pse+0x94>
    1180:	86 95       	lsr	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	b7 95       	ror	r27
    1188:	f7 95       	ror	r31
    118a:	e7 95       	ror	r30
    118c:	9f 5f       	subi	r25, 0xFF	; 255
    118e:	c1 f7       	brne	.-16     	; 0x1180 <__mulsf3_pse+0x9e>
    1190:	fe 2b       	or	r31, r30
    1192:	88 0f       	add	r24, r24
    1194:	91 1d       	adc	r25, r1
    1196:	96 95       	lsr	r25
    1198:	87 95       	ror	r24
    119a:	97 f9       	bld	r25, 7
    119c:	08 95       	ret

0000119e <__mulhi3>:
    119e:	00 24       	eor	r0, r0
    11a0:	55 27       	eor	r21, r21
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <__mulhi3+0xe>
    11a4:	08 0e       	add	r0, r24
    11a6:	59 1f       	adc	r21, r25
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	29 f0       	breq	.+10     	; 0x11ba <__mulhi3+0x1c>
    11b0:	76 95       	lsr	r23
    11b2:	67 95       	ror	r22
    11b4:	b8 f3       	brcs	.-18     	; 0x11a4 <__mulhi3+0x6>
    11b6:	71 05       	cpc	r23, r1
    11b8:	b9 f7       	brne	.-18     	; 0x11a8 <__mulhi3+0xa>
    11ba:	80 2d       	mov	r24, r0
    11bc:	95 2f       	mov	r25, r21
    11be:	08 95       	ret

000011c0 <__divmodhi4>:
    11c0:	97 fb       	bst	r25, 7
    11c2:	07 2e       	mov	r0, r23
    11c4:	16 f4       	brtc	.+4      	; 0x11ca <__divmodhi4+0xa>
    11c6:	00 94       	com	r0
    11c8:	06 d0       	rcall	.+12     	; 0x11d6 <__divmodhi4_neg1>
    11ca:	77 fd       	sbrc	r23, 7
    11cc:	08 d0       	rcall	.+16     	; 0x11de <__divmodhi4_neg2>
    11ce:	2d d0       	rcall	.+90     	; 0x122a <__udivmodhi4>
    11d0:	07 fc       	sbrc	r0, 7
    11d2:	05 d0       	rcall	.+10     	; 0x11de <__divmodhi4_neg2>
    11d4:	3e f4       	brtc	.+14     	; 0x11e4 <__divmodhi4_exit>

000011d6 <__divmodhi4_neg1>:
    11d6:	90 95       	com	r25
    11d8:	81 95       	neg	r24
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	08 95       	ret

000011de <__divmodhi4_neg2>:
    11de:	70 95       	com	r23
    11e0:	61 95       	neg	r22
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255

000011e4 <__divmodhi4_exit>:
    11e4:	08 95       	ret

000011e6 <__udivmodsi4>:
    11e6:	a1 e2       	ldi	r26, 0x21	; 33
    11e8:	1a 2e       	mov	r1, r26
    11ea:	aa 1b       	sub	r26, r26
    11ec:	bb 1b       	sub	r27, r27
    11ee:	fd 01       	movw	r30, r26
    11f0:	0d c0       	rjmp	.+26     	; 0x120c <__udivmodsi4_ep>

000011f2 <__udivmodsi4_loop>:
    11f2:	aa 1f       	adc	r26, r26
    11f4:	bb 1f       	adc	r27, r27
    11f6:	ee 1f       	adc	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	a2 17       	cp	r26, r18
    11fc:	b3 07       	cpc	r27, r19
    11fe:	e4 07       	cpc	r30, r20
    1200:	f5 07       	cpc	r31, r21
    1202:	20 f0       	brcs	.+8      	; 0x120c <__udivmodsi4_ep>
    1204:	a2 1b       	sub	r26, r18
    1206:	b3 0b       	sbc	r27, r19
    1208:	e4 0b       	sbc	r30, r20
    120a:	f5 0b       	sbc	r31, r21

0000120c <__udivmodsi4_ep>:
    120c:	66 1f       	adc	r22, r22
    120e:	77 1f       	adc	r23, r23
    1210:	88 1f       	adc	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	1a 94       	dec	r1
    1216:	69 f7       	brne	.-38     	; 0x11f2 <__udivmodsi4_loop>
    1218:	60 95       	com	r22
    121a:	70 95       	com	r23
    121c:	80 95       	com	r24
    121e:	90 95       	com	r25
    1220:	9b 01       	movw	r18, r22
    1222:	ac 01       	movw	r20, r24
    1224:	bd 01       	movw	r22, r26
    1226:	cf 01       	movw	r24, r30
    1228:	08 95       	ret

0000122a <__udivmodhi4>:
    122a:	aa 1b       	sub	r26, r26
    122c:	bb 1b       	sub	r27, r27
    122e:	51 e1       	ldi	r21, 0x11	; 17
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <__udivmodhi4_ep>

00001232 <__udivmodhi4_loop>:
    1232:	aa 1f       	adc	r26, r26
    1234:	bb 1f       	adc	r27, r27
    1236:	a6 17       	cp	r26, r22
    1238:	b7 07       	cpc	r27, r23
    123a:	10 f0       	brcs	.+4      	; 0x1240 <__udivmodhi4_ep>
    123c:	a6 1b       	sub	r26, r22
    123e:	b7 0b       	sbc	r27, r23

00001240 <__udivmodhi4_ep>:
    1240:	88 1f       	adc	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	5a 95       	dec	r21
    1246:	a9 f7       	brne	.-22     	; 0x1232 <__udivmodhi4_loop>
    1248:	80 95       	com	r24
    124a:	90 95       	com	r25
    124c:	bc 01       	movw	r22, r24
    124e:	cd 01       	movw	r24, r26
    1250:	08 95       	ret

00001252 <eeprom_read_byte>:
    1252:	e1 99       	sbic	0x1c, 1	; 28
    1254:	fe cf       	rjmp	.-4      	; 0x1252 <eeprom_read_byte>
    1256:	9f bb       	out	0x1f, r25	; 31
    1258:	8e bb       	out	0x1e, r24	; 30
    125a:	e0 9a       	sbi	0x1c, 0	; 28
    125c:	99 27       	eor	r25, r25
    125e:	8d b3       	in	r24, 0x1d	; 29
    1260:	08 95       	ret

00001262 <eeprom_write_byte>:
    1262:	26 2f       	mov	r18, r22

00001264 <eeprom_write_r18>:
    1264:	e1 99       	sbic	0x1c, 1	; 28
    1266:	fe cf       	rjmp	.-4      	; 0x1264 <eeprom_write_r18>
    1268:	1c ba       	out	0x1c, r1	; 28
    126a:	9f bb       	out	0x1f, r25	; 31
    126c:	8e bb       	out	0x1e, r24	; 30
    126e:	2d bb       	out	0x1d, r18	; 29
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	e2 9a       	sbi	0x1c, 2	; 28
    1276:	e1 9a       	sbi	0x1c, 1	; 28
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	08 95       	ret

0000127e <_exit>:
    127e:	f8 94       	cli

00001280 <__stop_program>:
    1280:	ff cf       	rjmp	.-2      	; 0x1280 <__stop_program>
