
Velo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001356  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001356  0000140a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  008000a0  008000a0  0000144a  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  0000144a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000190  00000000  00000000  000014b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c25  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a92  00000000  00000000  0000326d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5b  00000000  00000000  00003cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000047c  00000000  00000000  00004b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000071f  00000000  00000000  00004fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001426  00000000  00000000  000056f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  00006b1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	32 c1       	rjmp	.+612    	; 0x266 <__ctors_end>
       2:	4c c1       	rjmp	.+664    	; 0x29c <__bad_interrupt>
       4:	4b c1       	rjmp	.+662    	; 0x29c <__bad_interrupt>
       6:	4a c1       	rjmp	.+660    	; 0x29c <__bad_interrupt>
       8:	49 c1       	rjmp	.+658    	; 0x29c <__bad_interrupt>
       a:	48 c1       	rjmp	.+656    	; 0x29c <__bad_interrupt>
       c:	47 c1       	rjmp	.+654    	; 0x29c <__bad_interrupt>
       e:	46 c1       	rjmp	.+652    	; 0x29c <__bad_interrupt>
      10:	45 c1       	rjmp	.+650    	; 0x29c <__bad_interrupt>
      12:	44 c1       	rjmp	.+648    	; 0x29c <__bad_interrupt>
      14:	52 c1       	rjmp	.+676    	; 0x2ba <__vector_10>
      16:	42 c1       	rjmp	.+644    	; 0x29c <__bad_interrupt>
      18:	41 c1       	rjmp	.+642    	; 0x29c <__bad_interrupt>
      1a:	40 c1       	rjmp	.+640    	; 0x29c <__bad_interrupt>
      1c:	3f c1       	rjmp	.+638    	; 0x29c <__bad_interrupt>

0000001e <__trampolines_end>:
      1e:	ae d5       	rcall	.+2908   	; 0xb7c <ssd1306_turn_display+0x14>
      20:	f0 a8       	ldd	r15, Z+48	; 0x30
      22:	3f d3       	rcall	.+1662   	; 0x6a2 <calc_avg_speed+0x60>
      24:	00 40       	sbci	r16, 0x00	; 0
      26:	8d 14       	cp	r8, r13
      28:	20 00       	.word	0x0020	; ????
      2a:	a1 c8       	rjmp	.-3774   	; 0xfffff16e <__eeprom_end+0xff7ef16d>
      2c:	da 12       	cpse	r13, r26
      2e:	81 3f       	cpi	r24, 0xF1	; 241
      30:	d9 22       	and	r13, r25
      32:	db 20       	and	r13, r11
      34:	a4 a6       	std	Z+44, r10	; 0x2c
      36:	2e af       	std	Y+62, r18	; 0x3e
      38:	22 00       	.word	0x0022	; ????
      3a:	3f 21       	and	r19, r15
      3c:	00 7f       	andi	r16, 0xF0	; 240

0000003e <ssd1306xled_font6x8data>:
	...
      46:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
      56:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
      66:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
      76:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
      86:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
      96:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
      a6:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
      b6:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
      c6:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
      d6:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
      e6:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
      f6:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     106:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     116:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     126:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     136:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     146:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     156:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     166:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     176:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     186:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     196:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     1a6:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
     1b6:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
     1c6:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     1d6:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     1e6:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     1f6:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     206:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     216:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     226:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     236:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     246:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     256:	a0 a0 a0 7c 00 44 64 54 4c 44 14 14 14 14 14 14     ...|.DdTLD......

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf e5       	ldi	r28, 0x5F	; 95
     26c:	d2 e0       	ldi	r29, 0x02	; 2
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61

00000272 <__do_copy_data>:
     272:	10 e0       	ldi	r17, 0x00	; 0
     274:	a0 e6       	ldi	r26, 0x60	; 96
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	e6 e5       	ldi	r30, 0x56	; 86
     27a:	f3 e1       	ldi	r31, 0x13	; 19
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a0 3a       	cpi	r26, 0xA0	; 160
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	20 e0       	ldi	r18, 0x00	; 0
     28a:	a0 ea       	ldi	r26, 0xA0	; 160
     28c:	b0 e0       	ldi	r27, 0x00	; 0
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	a9 3f       	cpi	r26, 0xF9	; 249
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	c5 d2       	rcall	.+1418   	; 0x824 <main>
     29a:	5b c8       	rjmp	.-3914   	; 0xfffff352 <__eeprom_end+0xff7ef351>

0000029c <__bad_interrupt>:
     29c:	b1 ce       	rjmp	.-670    	; 0x0 <__vectors>

0000029e <start_millis_timer>:
		}
    }
}

void start_millis_timer() {
	cli();
     29e:	f8 94       	cli
	
	// set timer0 CTC mode
	TCCR0A |= _BV(WGM01);
     2a0:	8a b5       	in	r24, 0x2a	; 42
     2a2:	82 60       	ori	r24, 0x02	; 2
     2a4:	8a bd       	out	0x2a, r24	; 42
	
	// set timer0 compare value
	OCR0A = 135; // 125
     2a6:	87 e8       	ldi	r24, 0x87	; 135
     2a8:	89 bd       	out	0x29, r24	; 41
	
	// set timer0 prescaler 64
	TCCR0B |= _BV(CS00) | _BV(CS01);
     2aa:	83 b7       	in	r24, 0x33	; 51
     2ac:	83 60       	ori	r24, 0x03	; 3
     2ae:	83 bf       	out	0x33, r24	; 51
	
	// enable interrupt
	TIMSK |= _BV(OCIE0A);
     2b0:	89 b7       	in	r24, 0x39	; 57
     2b2:	80 61       	ori	r24, 0x10	; 16
     2b4:	89 bf       	out	0x39, r24	; 57
	
	sei();
     2b6:	78 94       	sei
     2b8:	08 95       	ret

000002ba <__vector_10>:
}

ISR(TIMER0_COMPA_vect) {
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
	ms++;
     2cc:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <ms>
     2d0:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <ms+0x1>
     2d4:	a0 91 ae 00 	lds	r26, 0x00AE	; 0x8000ae <ms+0x2>
     2d8:	b0 91 af 00 	lds	r27, 0x00AF	; 0x8000af <ms+0x3>
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	a1 1d       	adc	r26, r1
     2e0:	b1 1d       	adc	r27, r1
     2e2:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <ms>
     2e6:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <ms+0x1>
     2ea:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <ms+0x2>
     2ee:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <ms+0x3>
}
     2f2:	bf 91       	pop	r27
     2f4:	af 91       	pop	r26
     2f6:	9f 91       	pop	r25
     2f8:	8f 91       	pop	r24
     2fa:	0f 90       	pop	r0
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	0f 90       	pop	r0
     300:	1f 90       	pop	r1
     302:	18 95       	reti

00000304 <millis>:

uint32_t millis() {
	uint32_t copy;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     304:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     306:	f8 94       	cli
		copy = ms;
     308:	60 91 ac 00 	lds	r22, 0x00AC	; 0x8000ac <ms>
     30c:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <ms+0x1>
     310:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <ms+0x2>
     314:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <ms+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     318:	2f bf       	out	0x3f, r18	; 63
	}
	
	return copy;
}
     31a:	08 95       	ret

0000031c <set_wheel_diameter>:
	}
	wheel_length = (diameter * 3.14) / 100000.0;
}

void set_wheel_diameter(uint8_t diameter) {
	if (diameter > 0 && diameter < 0xFF) {
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	98 0f       	add	r25, r24
     320:	9e 3f       	cpi	r25, 0xFE	; 254
     322:	20 f4       	brcc	.+8      	; 0x32c <set_wheel_diameter+0x10>
     324:	68 2f       	mov	r22, r24
		eeprom_write_byte(&EEPROM_WHEEL_DIAMETER, diameter);
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	05 d8       	rcall	.-4086   	; 0xfffff336 <__eeprom_end+0xff7ef335>
     32c:	08 95       	ret

0000032e <calc_wheel_length>:
	
	return copy;
}

void calc_wheel_length() {
	uint8_t diameter = eeprom_read_byte(&EEPROM_WHEEL_DIAMETER); // cm
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	f9 d7       	rcall	.+4082   	; 0x1326 <eeprom_read_byte>
	if (diameter == 0xFF) {
     334:	8f 3f       	cpi	r24, 0xFF	; 255
     336:	19 f4       	brne	.+6      	; 0x33e <calc_wheel_length+0x10>
		diameter = 64; // default
		set_wheel_diameter(diameter);
     338:	80 e4       	ldi	r24, 0x40	; 64
     33a:	f0 df       	rcall	.-32     	; 0x31c <set_wheel_diameter>
}

void calc_wheel_length() {
	uint8_t diameter = eeprom_read_byte(&EEPROM_WHEEL_DIAMETER); // cm
	if (diameter == 0xFF) {
		diameter = 64; // default
     33c:	80 e4       	ldi	r24, 0x40	; 64
		set_wheel_diameter(diameter);
	}
	wheel_length = (diameter * 3.14) / 100000.0;
     33e:	68 2f       	mov	r22, r24
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	6b d6       	rcall	.+3286   	; 0x101e <__floatsisf>
     348:	23 ec       	ldi	r18, 0xC3	; 195
     34a:	35 ef       	ldi	r19, 0xF5	; 245
     34c:	48 e4       	ldi	r20, 0x48	; 72
     34e:	50 e4       	ldi	r21, 0x40	; 64
     350:	1a d7       	rcall	.+3636   	; 0x1186 <__mulsf3>
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e5       	ldi	r19, 0x50	; 80
     356:	43 ec       	ldi	r20, 0xC3	; 195
     358:	57 e4       	ldi	r21, 0x47	; 71
     35a:	c6 d5       	rcall	.+2956   	; 0xee8 <__divsf3>
     35c:	60 93 b7 00 	sts	0x00B7, r22	; 0x8000b7 <wheel_length>
     360:	70 93 b8 00 	sts	0x00B8, r23	; 0x8000b8 <wheel_length+0x1>
     364:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <wheel_length+0x2>
     368:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <wheel_length+0x3>
     36c:	08 95       	ret

0000036e <turn_display>:
		eeprom_write_byte(&EEPROM_WHEEL_DIAMETER, diameter);
	}
}

void turn_display(bool on) {
	display_turned = on;
     36e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <display_turned>
	ssd1306_turn_display(on);
     372:	fa d3       	rcall	.+2036   	; 0xb68 <ssd1306_turn_display>
     374:	08 95       	ret

00000376 <switch_display_menu>:
}

void switch_display_menu() {
	ssd1306_clear();
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	d2 d3       	rcall	.+1956   	; 0xb24 <ssd1306_fill4>
	display_menu++;
     380:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <display_menu>
     384:	8f 5f       	subi	r24, 0xFF	; 255
	if (display_menu == 4) {
     386:	84 30       	cpi	r24, 0x04	; 4
     388:	19 f0       	breq	.+6      	; 0x390 <switch_display_menu+0x1a>
	ssd1306_turn_display(on);
}

void switch_display_menu() {
	ssd1306_clear();
	display_menu++;
     38a:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <display_menu>
     38e:	08 95       	ret
	if (display_menu == 4) {
		display_menu = 0;
     390:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <display_menu>
     394:	08 95       	ret

00000396 <display_data>:
	}
}

void display_data() {
     396:	2f 92       	push	r2
     398:	3f 92       	push	r3
     39a:	4f 92       	push	r4
     39c:	5f 92       	push	r5
     39e:	6f 92       	push	r6
     3a0:	7f 92       	push	r7
     3a2:	8f 92       	push	r8
     3a4:	9f 92       	push	r9
     3a6:	af 92       	push	r10
     3a8:	bf 92       	push	r11
     3aa:	cf 92       	push	r12
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
	switch(display_menu) {
     3ba:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <display_menu>
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	89 f1       	breq	.+98     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3c2:	38 f0       	brcs	.+14     	; 0x3d2 <display_data+0x3c>
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	09 f4       	brne	.+2      	; 0x3ca <display_data+0x34>
     3c8:	56 c0       	rjmp	.+172    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     3ca:	83 30       	cpi	r24, 0x03	; 3
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <display_data+0x3a>
     3ce:	9e c0       	rjmp	.+316    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     3d0:	b0 c0       	rjmp	.+352    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		case MENU_MAIN:
			ssd1306_set_pos(0, 0);
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	8d d3       	rcall	.+1818   	; 0xaf2 <ssd1306_set_pos>
			ssd1306tx_string("s: ");
     3d8:	8f e8       	ldi	r24, 0x8F	; 143
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	f2 d3       	rcall	.+2020   	; 0xbc2 <ssd1306tx_string>
			ssd1306tx_float(speed, 1);
     3de:	60 91 ef 00 	lds	r22, 0x00EF	; 0x8000ef <speed>
     3e2:	70 91 f0 00 	lds	r23, 0x00F0	; 0x8000f0 <speed+0x1>
     3e6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <speed+0x2>
     3ea:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <speed+0x3>
     3ee:	41 e0       	ldi	r20, 0x01	; 1
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	d6 d4       	rcall	.+2476   	; 0xda0 <ssd1306tx_float>
			ssd1306tx_string(" km/h    ");
     3f4:	83 e7       	ldi	r24, 0x73	; 115
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	e4 d3       	rcall	.+1992   	; 0xbc2 <ssd1306tx_string>

			ssd1306_set_pos(0, 2);
     3fa:	62 e0       	ldi	r22, 0x02	; 2
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	79 d3       	rcall	.+1778   	; 0xaf2 <ssd1306_set_pos>
			ssd1306tx_string("d: ");
     400:	8d e7       	ldi	r24, 0x7D	; 125
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	de d3       	rcall	.+1980   	; 0xbc2 <ssd1306tx_string>
			ssd1306tx_float(distance, 2);
     406:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <distance>
     40a:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <distance+0x1>
     40e:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <distance+0x2>
     412:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <distance+0x3>
     416:	42 e0       	ldi	r20, 0x02	; 2
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	c2 d4       	rcall	.+2436   	; 0xda0 <ssd1306tx_float>
			ssd1306tx_string(" km    ");
     41c:	81 e8       	ldi	r24, 0x81	; 129
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	d0 d3       	rcall	.+1952   	; 0xbc2 <ssd1306tx_string>
			break;
     422:	87 c0       	rjmp	.+270    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		
		case MENU_SPEED:
			ssd1306_set_pos(0, 0);
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	64 d3       	rcall	.+1736   	; 0xaf2 <ssd1306_set_pos>
			ssd1306tx_string("ms: ");
     42a:	89 e8       	ldi	r24, 0x89	; 137
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	c9 d3       	rcall	.+1938   	; 0xbc2 <ssd1306tx_string>
			ssd1306tx_float(max_speed, 1);
     430:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <max_speed>
     434:	70 91 b2 00 	lds	r23, 0x00B2	; 0x8000b2 <max_speed+0x1>
     438:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <max_speed+0x2>
     43c:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <max_speed+0x3>
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	ad d4       	rcall	.+2394   	; 0xda0 <ssd1306tx_float>
			ssd1306tx_string(" km/h    ");
     446:	83 e7       	ldi	r24, 0x73	; 115
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	bb d3       	rcall	.+1910   	; 0xbc2 <ssd1306tx_string>

			ssd1306_set_pos(0, 2);
     44c:	62 e0       	ldi	r22, 0x02	; 2
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	50 d3       	rcall	.+1696   	; 0xaf2 <ssd1306_set_pos>
			ssd1306tx_string("as: ");
     452:	8e e8       	ldi	r24, 0x8E	; 142
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	b5 d3       	rcall	.+1898   	; 0xbc2 <ssd1306tx_string>
			ssd1306tx_float(avg_speed, 1);
     458:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <avg_speed>
     45c:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <avg_speed+0x1>
     460:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <avg_speed+0x2>
     464:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <avg_speed+0x3>
     468:	41 e0       	ldi	r20, 0x01	; 1
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	99 d4       	rcall	.+2354   	; 0xda0 <ssd1306tx_float>
			ssd1306tx_string(" km/h    ");
     46e:	83 e7       	ldi	r24, 0x73	; 115
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	a7 d3       	rcall	.+1870   	; 0xbc2 <ssd1306tx_string>
			break;
     474:	5e c0       	rjmp	.+188    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>

		case MENU_TIME: {
			uint32_t now = millis();
     476:	46 df       	rcall	.-372    	; 0x304 <millis>
     478:	6b 01       	movw	r12, r22
     47a:	7c 01       	movw	r14, r24
			uint32_t sec = now / 1000ul;
			int hours = (sec / 3600ul);
     47c:	20 e8       	ldi	r18, 0x80	; 128
     47e:	3e ee       	ldi	r19, 0xEE	; 238
     480:	46 e3       	ldi	r20, 0x36	; 54
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	fe d6       	rcall	.+3580   	; 0x1282 <__udivmodsi4>
     486:	49 01       	movw	r8, r18
     488:	5a 01       	movw	r10, r20
			int minutes = (sec % 3600ul) / 60ul;
     48a:	c7 01       	movw	r24, r14
     48c:	b6 01       	movw	r22, r12
     48e:	28 ee       	ldi	r18, 0xE8	; 232
     490:	33 e0       	ldi	r19, 0x03	; 3
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	f5 d6       	rcall	.+3562   	; 0x1282 <__udivmodsi4>
     498:	ca 01       	movw	r24, r20
     49a:	b9 01       	movw	r22, r18
     49c:	20 e1       	ldi	r18, 0x10	; 16
     49e:	3e e0       	ldi	r19, 0x0E	; 14
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	ee d6       	rcall	.+3548   	; 0x1282 <__udivmodsi4>
     4a6:	2c e3       	ldi	r18, 0x3C	; 60
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	e9 d6       	rcall	.+3538   	; 0x1282 <__udivmodsi4>
     4b0:	29 01       	movw	r4, r18
     4b2:	3a 01       	movw	r6, r20
     4b4:	6b 01       	movw	r12, r22
     4b6:	7c 01       	movw	r14, r24
     4b8:	89 01       	movw	r16, r18
			int seconds = (sec % 3600ul) % 60ul;
     4ba:	eb 01       	movw	r28, r22
			
			ssd1306_set_pos(0, 0);
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	18 d3       	rcall	.+1584   	; 0xaf2 <ssd1306_set_pos>
			ssd1306tx_string("time:");
     4c2:	83 e9       	ldi	r24, 0x93	; 147
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	7d d3       	rcall	.+1786   	; 0xbc2 <ssd1306tx_string>
			
			ssd1306_set_pos(0, 2);
     4c8:	62 e0       	ldi	r22, 0x02	; 2
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	12 d3       	rcall	.+1572   	; 0xaf2 <ssd1306_set_pos>
			if (hours < 10) {
     4ce:	8a e0       	ldi	r24, 0x0A	; 10
     4d0:	88 16       	cp	r8, r24
     4d2:	91 04       	cpc	r9, r1
     4d4:	1c f4       	brge	.+6      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				ssd1306tx_string("0");
     4d6:	89 e9       	ldi	r24, 0x99	; 153
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	73 d3       	rcall	.+1766   	; 0xbc2 <ssd1306tx_string>
			}
			ssd1306tx_int(hours);
     4dc:	c4 01       	movw	r24, r8
     4de:	c4 d3       	rcall	.+1928   	; 0xc68 <ssd1306tx_int>
			ssd1306tx_string(":");
     4e0:	8e e9       	ldi	r24, 0x9E	; 158
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	6e d3       	rcall	.+1756   	; 0xbc2 <ssd1306tx_string>
			
			if (minutes < 10) {
     4e6:	0a 30       	cpi	r16, 0x0A	; 10
     4e8:	11 05       	cpc	r17, r1
     4ea:	1c f4       	brge	.+6      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
				ssd1306tx_string("0");
     4ec:	89 e9       	ldi	r24, 0x99	; 153
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	68 d3       	rcall	.+1744   	; 0xbc2 <ssd1306tx_string>
			}
			ssd1306tx_int(minutes);
     4f2:	c2 01       	movw	r24, r4
     4f4:	b9 d3       	rcall	.+1906   	; 0xc68 <ssd1306tx_int>
			ssd1306tx_string(":");
     4f6:	8e e9       	ldi	r24, 0x9E	; 158
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	63 d3       	rcall	.+1734   	; 0xbc2 <ssd1306tx_string>
			
			if (seconds < 10) {
     4fc:	2a 97       	sbiw	r28, 0x0a	; 10
     4fe:	1c f4       	brge	.+6      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
				ssd1306tx_string("0");
     500:	89 e9       	ldi	r24, 0x99	; 153
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	5e d3       	rcall	.+1724   	; 0xbc2 <ssd1306tx_string>
			}
			ssd1306tx_int(seconds);
     506:	c6 01       	movw	r24, r12
     508:	af d3       	rcall	.+1886   	; 0xc68 <ssd1306tx_int>
			break;
     50a:	13 c0       	rjmp	.+38     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		}
		
		case MENU_LED:
			ssd1306_set_pos(0, 0);
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	f0 d2       	rcall	.+1504   	; 0xaf2 <ssd1306_set_pos>
			ssd1306tx_string("led:");
     512:	8b e9       	ldi	r24, 0x9B	; 155
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	55 d3       	rcall	.+1706   	; 0xbc2 <ssd1306tx_string>

			ssd1306_set_pos(0, 2);
     518:	62 e0       	ldi	r22, 0x02	; 2
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	ea d2       	rcall	.+1492   	; 0xaf2 <ssd1306_set_pos>
			ssd1306tx_string(led_turned ? "on " : "off");
     51e:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <led_turned>
     522:	81 11       	cpse	r24, r1
     524:	03 c0       	rjmp	.+6      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     526:	8f e6       	ldi	r24, 0x6F	; 111
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     52c:	8b e6       	ldi	r24, 0x6B	; 107
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	48 d3       	rcall	.+1680   	; 0xbc2 <ssd1306tx_string>
			break;
	}
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	bf 90       	pop	r11
     544:	af 90       	pop	r10
     546:	9f 90       	pop	r9
     548:	8f 90       	pop	r8
     54a:	7f 90       	pop	r7
     54c:	6f 90       	pop	r6
     54e:	5f 90       	pop	r5
     550:	4f 90       	pop	r4
     552:	3f 90       	pop	r3
     554:	2f 90       	pop	r2
     556:	08 95       	ret

00000558 <turn_led>:

void turn_led(bool on) {
	led_turned = on;
     558:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <led_turned>
	// turn off led
	PORTB &= ~_BV(LED_PIN);
     55c:	c4 98       	cbi	0x18, 4	; 24
     55e:	08 95       	ret

00000560 <handle_btn_click>:
}

void handle_btn_click(uint8_t pin_state, uint32_t timer_now) {
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	6a 01       	movw	r12, r20
     56a:	7b 01       	movw	r14, r22
	// click start
	if (!btn_pressed && !pin_state) {
     56c:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <btn_pressed>
     570:	91 11       	cpse	r25, r1
     572:	5f c0       	rjmp	.+190    	; 0x632 <handle_btn_click+0xd2>
     574:	81 11       	cpse	r24, r1
     576:	60 c0       	rjmp	.+192    	; 0x638 <handle_btn_click+0xd8>
		btn_pressed = true;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <btn_pressed>
		btn_timer = timer_now;
     57e:	40 93 e6 00 	sts	0x00E6, r20	; 0x8000e6 <btn_timer>
     582:	50 93 e7 00 	sts	0x00E7, r21	; 0x8000e7 <btn_timer+0x1>
     586:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <btn_timer+0x2>
     58a:	70 93 e9 00 	sts	0x00E9, r23	; 0x8000e9 <btn_timer+0x3>
     58e:	26 c0       	rjmp	.+76     	; 0x5dc <handle_btn_click+0x7c>
	}
	
	// handle single button click
	if (btn_pressed && pin_state) {
		btn_pressed = false;
     590:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <btn_pressed>
		if (!btn_long_pressed && display_turned && timer_now - btn_timer >= 50) { // single press
     594:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <btn_long_pressed>
     598:	81 11       	cpse	r24, r1
     59a:	19 c0       	rjmp	.+50     	; 0x5ce <handle_btn_click+0x6e>
     59c:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <display_turned>
     5a0:	88 23       	and	r24, r24
     5a2:	a9 f0       	breq	.+42     	; 0x5ce <handle_btn_click+0x6e>
     5a4:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <btn_timer>
     5a8:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <btn_timer+0x1>
     5ac:	a0 91 e8 00 	lds	r26, 0x00E8	; 0x8000e8 <btn_timer+0x2>
     5b0:	b0 91 e9 00 	lds	r27, 0x00E9	; 0x8000e9 <btn_timer+0x3>
     5b4:	a7 01       	movw	r20, r14
     5b6:	96 01       	movw	r18, r12
     5b8:	28 1b       	sub	r18, r24
     5ba:	39 0b       	sbc	r19, r25
     5bc:	4a 0b       	sbc	r20, r26
     5be:	5b 0b       	sbc	r21, r27
     5c0:	22 33       	cpi	r18, 0x32	; 50
     5c2:	31 05       	cpc	r19, r1
     5c4:	41 05       	cpc	r20, r1
     5c6:	51 05       	cpc	r21, r1
     5c8:	10 f0       	brcs	.+4      	; 0x5ce <handle_btn_click+0x6e>
			switch_display_menu();
     5ca:	d5 de       	rcall	.-598    	; 0x376 <switch_display_menu>
			display_data();
     5cc:	e4 de       	rcall	.-568    	; 0x396 <display_data>
		}
		btn_long_pressed = false;
     5ce:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <btn_long_pressed>
	}
	
	// handle long button click
	if (btn_pressed && !btn_long_pressed && ((timer_now - btn_timer) >= LONG_PRESS_TIME)) {
     5d2:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <btn_pressed>
     5d6:	81 11       	cpse	r24, r1
     5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <handle_btn_click+0x84>
     5da:	2e c0       	rjmp	.+92     	; 0x638 <handle_btn_click+0xd8>
     5dc:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <btn_long_pressed>
     5e0:	81 11       	cpse	r24, r1
     5e2:	2a c0       	rjmp	.+84     	; 0x638 <handle_btn_click+0xd8>
     5e4:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <btn_timer>
     5e8:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <btn_timer+0x1>
     5ec:	a0 91 e8 00 	lds	r26, 0x00E8	; 0x8000e8 <btn_timer+0x2>
     5f0:	b0 91 e9 00 	lds	r27, 0x00E9	; 0x8000e9 <btn_timer+0x3>
     5f4:	c8 1a       	sub	r12, r24
     5f6:	d9 0a       	sbc	r13, r25
     5f8:	ea 0a       	sbc	r14, r26
     5fa:	fb 0a       	sbc	r15, r27
     5fc:	34 ef       	ldi	r19, 0xF4	; 244
     5fe:	c3 16       	cp	r12, r19
     600:	31 e0       	ldi	r19, 0x01	; 1
     602:	d3 06       	cpc	r13, r19
     604:	e1 04       	cpc	r14, r1
     606:	f1 04       	cpc	r15, r1
     608:	b8 f0       	brcs	.+46     	; 0x638 <handle_btn_click+0xd8>
		btn_long_pressed = true;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <btn_long_pressed>
		switch (display_menu) {
     610:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <display_menu>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	39 f4       	brne	.+14     	; 0x626 <handle_btn_click+0xc6>
			case MENU_LED:
				turn_led(!led_turned);
     618:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <led_turned>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	89 27       	eor	r24, r25
     620:	9b df       	rcall	.-202    	; 0x558 <turn_led>
				display_data();
     622:	b9 de       	rcall	.-654    	; 0x396 <display_data>
				break;
     624:	09 c0       	rjmp	.+18     	; 0x638 <handle_btn_click+0xd8>
			default:
				turn_display(!display_turned);
     626:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <display_turned>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	89 27       	eor	r24, r25
     62e:	9f de       	rcall	.-706    	; 0x36e <turn_display>
				break;
		}
	}
}
     630:	03 c0       	rjmp	.+6      	; 0x638 <handle_btn_click+0xd8>
		btn_pressed = true;
		btn_timer = timer_now;
	}
	
	// handle single button click
	if (btn_pressed && pin_state) {
     632:	81 11       	cpse	r24, r1
     634:	ad cf       	rjmp	.-166    	; 0x590 <handle_btn_click+0x30>
     636:	d2 cf       	rjmp	.-92     	; 0x5dc <handle_btn_click+0x7c>
			default:
				turn_display(!display_turned);
				break;
		}
	}
}
     638:	ff 90       	pop	r15
     63a:	ef 90       	pop	r14
     63c:	df 90       	pop	r13
     63e:	cf 90       	pop	r12
     640:	08 95       	ret

00000642 <calc_avg_speed>:
		wheel_rotation_counter = 0;
		wheel_rotation_start_time = 0;
	}
}

void calc_avg_speed(float speed) {
     642:	8f 92       	push	r8
     644:	9f 92       	push	r9
     646:	af 92       	push	r10
     648:	bf 92       	push	r11
     64a:	cf 92       	push	r12
     64c:	df 92       	push	r13
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	6b 01       	movw	r12, r22
     65c:	7c 01       	movw	r14, r24
	if (speed == 0) {
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	a9 01       	movw	r20, r18
     664:	3d d4       	rcall	.+2170   	; 0xee0 <__cmpsf2>
     666:	88 23       	and	r24, r24
     668:	09 f4       	brne	.+2      	; 0x66c <calc_avg_speed+0x2a>
     66a:	57 c0       	rjmp	.+174    	; 0x71a <calc_avg_speed+0xd8>
		return;
	}
	
	speed_arr[speed_arr_index++] = speed;
     66c:	e0 91 c3 00 	lds	r30, 0x00C3	; 0x8000c3 <speed_arr_index>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	8e 0f       	add	r24, r30
     674:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <speed_arr_index>
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	ee 0f       	add	r30, r30
     680:	ff 1f       	adc	r31, r31
     682:	eb 53       	subi	r30, 0x3B	; 59
     684:	ff 4f       	sbci	r31, 0xFF	; 255
     686:	c0 82       	st	Z, r12
     688:	d1 82       	std	Z+1, r13	; 0x01
     68a:	e2 82       	std	Z+2, r14	; 0x02
     68c:	f3 82       	std	Z+3, r15	; 0x03
	
	if (speed_arr_index == 8) {
     68e:	88 30       	cpi	r24, 0x08	; 8
     690:	09 f0       	breq	.+2      	; 0x694 <calc_avg_speed+0x52>
     692:	43 c0       	rjmp	.+134    	; 0x71a <calc_avg_speed+0xd8>
		speed_arr_index = 0;
     694:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <speed_arr_index>
     698:	c5 ec       	ldi	r28, 0xC5	; 197
     69a:	d0 e0       	ldi	r29, 0x00	; 0
     69c:	05 ee       	ldi	r16, 0xE5	; 229
     69e:	10 e0       	ldi	r17, 0x00	; 0
		float sum = 0;
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	cb 01       	movw	r24, r22
		for (uint8_t i = 0; i < 8; i++) {
			sum += speed_arr[i];
     6a6:	29 91       	ld	r18, Y+
     6a8:	39 91       	ld	r19, Y+
     6aa:	49 91       	ld	r20, Y+
     6ac:	59 91       	ld	r21, Y+
     6ae:	b4 d3       	rcall	.+1896   	; 0xe18 <__addsf3>
	speed_arr[speed_arr_index++] = speed;
	
	if (speed_arr_index == 8) {
		speed_arr_index = 0;
		float sum = 0;
		for (uint8_t i = 0; i < 8; i++) {
     6b0:	c0 17       	cp	r28, r16
     6b2:	d1 07       	cpc	r29, r17
     6b4:	c1 f7       	brne	.-16     	; 0x6a6 <calc_avg_speed+0x64>
			sum += speed_arr[i];
		}
		
		sum /= 8;
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	5e e3       	ldi	r21, 0x3E	; 62
     6be:	63 d5       	rcall	.+2758   	; 0x1186 <__mulsf3>
     6c0:	4b 01       	movw	r8, r22
     6c2:	5c 01       	movw	r10, r24
		if (avg_speed == 0) {
     6c4:	c0 90 a3 00 	lds	r12, 0x00A3	; 0x8000a3 <avg_speed>
     6c8:	d0 90 a4 00 	lds	r13, 0x00A4	; 0x8000a4 <avg_speed+0x1>
     6cc:	e0 90 a5 00 	lds	r14, 0x00A5	; 0x8000a5 <avg_speed+0x2>
     6d0:	f0 90 a6 00 	lds	r15, 0x00A6	; 0x8000a6 <avg_speed+0x3>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	a9 01       	movw	r20, r18
     6da:	c7 01       	movw	r24, r14
     6dc:	b6 01       	movw	r22, r12
     6de:	00 d4       	rcall	.+2048   	; 0xee0 <__cmpsf2>
     6e0:	81 11       	cpse	r24, r1
     6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <calc_avg_speed+0xb4>
			avg_speed = sum;
     6e4:	80 92 a3 00 	sts	0x00A3, r8	; 0x8000a3 <avg_speed>
     6e8:	90 92 a4 00 	sts	0x00A4, r9	; 0x8000a4 <avg_speed+0x1>
     6ec:	a0 92 a5 00 	sts	0x00A5, r10	; 0x8000a5 <avg_speed+0x2>
     6f0:	b0 92 a6 00 	sts	0x00A6, r11	; 0x8000a6 <avg_speed+0x3>
     6f4:	12 c0       	rjmp	.+36     	; 0x71a <calc_avg_speed+0xd8>
		} else {
			avg_speed = (avg_speed + sum) / 2;
     6f6:	a7 01       	movw	r20, r14
     6f8:	96 01       	movw	r18, r12
     6fa:	c5 01       	movw	r24, r10
     6fc:	b4 01       	movw	r22, r8
     6fe:	8c d3       	rcall	.+1816   	; 0xe18 <__addsf3>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e0       	ldi	r20, 0x00	; 0
     706:	5f e3       	ldi	r21, 0x3F	; 63
     708:	3e d5       	rcall	.+2684   	; 0x1186 <__mulsf3>
     70a:	60 93 a3 00 	sts	0x00A3, r22	; 0x8000a3 <avg_speed>
     70e:	70 93 a4 00 	sts	0x00A4, r23	; 0x8000a4 <avg_speed+0x1>
     712:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <avg_speed+0x2>
     716:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <avg_speed+0x3>
		}
	}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	9f 90       	pop	r9
     730:	8f 90       	pop	r8
     732:	08 95       	ret

00000734 <calc_speed>:
				break;
		}
	}
}

void calc_speed(uint32_t timer_now) {
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
	if (wheel_rotation_counter == 5) {
     73c:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <wheel_rotation_counter>
     740:	25 30       	cpi	r18, 0x05	; 5
     742:	09 f0       	breq	.+2      	; 0x746 <calc_speed+0x12>
     744:	6a c0       	rjmp	.+212    	; 0x81a <calc_speed+0xe6>
		uint32_t interval = timer_now - wheel_rotation_start_time;
		uint16_t avg_interval = interval / 4;

		uint16_t rpm = 60000 / avg_interval;
     746:	c0 90 a8 00 	lds	r12, 0x00A8	; 0x8000a8 <wheel_rotation_start_time>
     74a:	d0 90 a9 00 	lds	r13, 0x00A9	; 0x8000a9 <wheel_rotation_start_time+0x1>
     74e:	e0 90 aa 00 	lds	r14, 0x00AA	; 0x8000aa <wheel_rotation_start_time+0x2>
     752:	f0 90 ab 00 	lds	r15, 0x00AB	; 0x8000ab <wheel_rotation_start_time+0x3>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	8c 19       	sub	r24, r12
     75c:	9d 09       	sbc	r25, r13
     75e:	ae 09       	sbc	r26, r14
     760:	bf 09       	sbc	r27, r15
     762:	b6 95       	lsr	r27
     764:	a7 95       	ror	r26
     766:	97 95       	ror	r25
     768:	87 95       	ror	r24
     76a:	b6 95       	lsr	r27
     76c:	a7 95       	ror	r26
     76e:	97 95       	ror	r25
     770:	87 95       	ror	r24
     772:	9c 01       	movw	r18, r24
     774:	ad 01       	movw	r20, r26
     776:	44 27       	eor	r20, r20
     778:	55 27       	eor	r21, r21
     77a:	60 e6       	ldi	r22, 0x60	; 96
     77c:	7a ee       	ldi	r23, 0xEA	; 234
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	a1 d5       	rcall	.+2882   	; 0x12c6 <__divmodsi4>
		if (rpm < WHEEL_RPM_MAX) {
     784:	28 35       	cpi	r18, 0x58	; 88
     786:	82 e0       	ldi	r24, 0x02	; 2
     788:	38 07       	cpc	r19, r24
     78a:	e8 f5       	brcc	.+122    	; 0x806 <calc_speed+0xd2>
			wheel_rpm = rpm;
     78c:	30 93 b6 00 	sts	0x00B6, r19	; 0x8000b6 <wheel_rpm+0x1>
     790:	20 93 b5 00 	sts	0x00B5, r18	; 0x8000b5 <wheel_rpm>
			speed = wheel_rpm * 60 * wheel_length;
     794:	b9 01       	movw	r22, r18
     796:	62 95       	swap	r22
     798:	72 95       	swap	r23
     79a:	70 7f       	andi	r23, 0xF0	; 240
     79c:	76 27       	eor	r23, r22
     79e:	60 7f       	andi	r22, 0xF0	; 240
     7a0:	76 27       	eor	r23, r22
     7a2:	62 1b       	sub	r22, r18
     7a4:	73 0b       	sbc	r23, r19
     7a6:	66 0f       	add	r22, r22
     7a8:	77 1f       	adc	r23, r23
     7aa:	66 0f       	add	r22, r22
     7ac:	77 1f       	adc	r23, r23
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	33 d4       	rcall	.+2150   	; 0x101a <__floatunsisf>
     7b4:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <wheel_length>
     7b8:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <wheel_length+0x1>
     7bc:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <wheel_length+0x2>
     7c0:	50 91 ba 00 	lds	r21, 0x00BA	; 0x8000ba <wheel_length+0x3>
     7c4:	e0 d4       	rcall	.+2496   	; 0x1186 <__mulsf3>
     7c6:	6b 01       	movw	r12, r22
     7c8:	7c 01       	movw	r14, r24
     7ca:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <speed>
     7ce:	70 93 f0 00 	sts	0x00F0, r23	; 0x8000f0 <speed+0x1>
     7d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <speed+0x2>
     7d6:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <speed+0x3>
			if (speed >= max_speed) {
     7da:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <max_speed>
     7de:	30 91 b2 00 	lds	r19, 0x00B2	; 0x8000b2 <max_speed+0x1>
     7e2:	40 91 b3 00 	lds	r20, 0x00B3	; 0x8000b3 <max_speed+0x2>
     7e6:	50 91 b4 00 	lds	r21, 0x00B4	; 0x8000b4 <max_speed+0x3>
     7ea:	c9 d4       	rcall	.+2450   	; 0x117e <__gesf2>
     7ec:	88 23       	and	r24, r24
     7ee:	44 f0       	brlt	.+16     	; 0x800 <calc_speed+0xcc>
				max_speed = speed;
     7f0:	c0 92 b1 00 	sts	0x00B1, r12	; 0x8000b1 <max_speed>
     7f4:	d0 92 b2 00 	sts	0x00B2, r13	; 0x8000b2 <max_speed+0x1>
     7f8:	e0 92 b3 00 	sts	0x00B3, r14	; 0x8000b3 <max_speed+0x2>
     7fc:	f0 92 b4 00 	sts	0x00B4, r15	; 0x8000b4 <max_speed+0x3>
			}
			calc_avg_speed(speed);
     800:	c7 01       	movw	r24, r14
     802:	b6 01       	movw	r22, r12
     804:	1e df       	rcall	.-452    	; 0x642 <calc_avg_speed>
			// display_data();
		}

		wheel_rotation_counter = 0;
     806:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <wheel_rotation_counter>
		wheel_rotation_start_time = 0;
     80a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <wheel_rotation_start_time>
     80e:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <wheel_rotation_start_time+0x1>
     812:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <wheel_rotation_start_time+0x2>
     816:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <wheel_rotation_start_time+0x3>
	}
}
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
     822:	08 95       	ret

00000824 <main>:
void handle_btn_click(uint8_t pin_state, uint32_t timer_now);
void calc_speed(uint32_t timer_now);

int main(void) {
	// set 8 MHz frequency
	CLKPR = 1 << CLKPCE;
     824:	80 e8       	ldi	r24, 0x80	; 128
     826:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;
     828:	16 bc       	out	0x26, r1	; 38
	
	DDRB = 0;
     82a:	17 ba       	out	0x17, r1	; 23
	// led pin as output
	DDRB |= _BV(LED_PIN);
     82c:	bc 9a       	sbi	0x17, 4	; 23
	
	// turn on btn pin input pullup
	PORTB |= _BV(BTN_PIN);
     82e:	c3 9a       	sbi	0x18, 3	; 24
	
	start_millis_timer();
     830:	36 dd       	rcall	.-1428   	; 0x29e <start_millis_timer>
	
	calc_wheel_length();
     832:	7d dd       	rcall	.-1286   	; 0x32e <calc_wheel_length>
	display_data();
     834:	b0 dd       	rcall	.-1184   	; 0x396 <display_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     836:	2f ef       	ldi	r18, 0xFF	; 255
     838:	30 e7       	ldi	r19, 0x70	; 112
     83a:	42 e0       	ldi	r20, 0x02	; 2
     83c:	21 50       	subi	r18, 0x01	; 1
     83e:	30 40       	sbci	r19, 0x00	; 0
     840:	40 40       	sbci	r20, 0x00	; 0
     842:	e1 f7       	brne	.-8      	; 0x83c <main+0x18>
     844:	00 c0       	rjmp	.+0      	; 0x846 <main+0x22>
     846:	00 00       	nop
	
	_delay_ms(100);
	ssd1306_init();
     848:	3e d1       	rcall	.+636    	; 0xac6 <ssd1306_init>
	ssd1306_clear();
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	68 d1       	rcall	.+720    	; 0xb24 <ssd1306_fill4>
	display_data();
     854:	a0 dd       	rcall	.-1216   	; 0x396 <display_data>
	
	display_turned = true;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <display_turned>
		timer_now = millis();
		
		wheel_pin_state = PINB & _BV(WHEEL_PIN);
		// detect rotation start
		if (!wheel_pin_state && !wheel_rotation_started) {
			wheel_rotation_started = true;
     85c:	d1 e0       	ldi	r29, 0x01	; 1
		
		handle_btn_click(PINB & _BV(BTN_PIN), timer_now);
		
		// toggle led every 250 ms
		if (led_turned && (timer_now - led_timer) >= 250) {
			PORTB ^= _BV(LED_PIN);
     85e:	c0 e1       	ldi	r28, 0x10	; 16
	
	uint32_t timer_now;
	bool wheel_pin_state;
    
    while (1) {
		timer_now = millis();
     860:	51 dd       	rcall	.-1374   	; 0x304 <millis>
     862:	6b 01       	movw	r12, r22
     864:	7c 01       	movw	r14, r24
		
		wheel_pin_state = PINB & _BV(WHEEL_PIN);
		// detect rotation start
		if (!wheel_pin_state && !wheel_rotation_started) {
     866:	b2 99       	sbic	0x16, 2	; 22
     868:	f2 c0       	rjmp	.+484    	; 0xa4e <main+0x22a>
     86a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <wheel_rotation_started>
     86e:	81 11       	cpse	r24, r1
     870:	3f c0       	rjmp	.+126    	; 0x8f0 <main+0xcc>
			wheel_rotation_started = true;
     872:	d0 93 ee 00 	sts	0x00EE, r29	; 0x8000ee <wheel_rotation_started>
     876:	3c c0       	rjmp	.+120    	; 0x8f0 <main+0xcc>
		}
		// detect when magnet passes by the hall sensor
		if (wheel_pin_state && wheel_rotation_started) {
			wheel_rotation_started = false;
     878:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <wheel_rotation_started>
			
			wheel_rotation_last_time = timer_now;
     87c:	c0 92 f3 00 	sts	0x00F3, r12	; 0x8000f3 <wheel_rotation_last_time>
     880:	d0 92 f4 00 	sts	0x00F4, r13	; 0x8000f4 <wheel_rotation_last_time+0x1>
     884:	e0 92 f5 00 	sts	0x00F5, r14	; 0x8000f5 <wheel_rotation_last_time+0x2>
     888:	f0 92 f6 00 	sts	0x00F6, r15	; 0x8000f6 <wheel_rotation_last_time+0x3>
			if (wheel_rotation_start_time == 0) {
     88c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <wheel_rotation_start_time>
     890:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <wheel_rotation_start_time+0x1>
     894:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <wheel_rotation_start_time+0x2>
     898:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <wheel_rotation_start_time+0x3>
     89c:	89 2b       	or	r24, r25
     89e:	8a 2b       	or	r24, r26
     8a0:	8b 2b       	or	r24, r27
     8a2:	41 f4       	brne	.+16     	; 0x8b4 <main+0x90>
				wheel_rotation_start_time = timer_now;
     8a4:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <wheel_rotation_start_time>
     8a8:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <wheel_rotation_start_time+0x1>
     8ac:	e0 92 aa 00 	sts	0x00AA, r14	; 0x8000aa <wheel_rotation_start_time+0x2>
     8b0:	f0 92 ab 00 	sts	0x00AB, r15	; 0x8000ab <wheel_rotation_start_time+0x3>
			}

			wheel_rotation_counter++;
     8b4:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <wheel_rotation_counter>
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <wheel_rotation_counter>
			distance += wheel_length;
     8be:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <wheel_length>
     8c2:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <wheel_length+0x1>
     8c6:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <wheel_length+0x2>
     8ca:	50 91 ba 00 	lds	r21, 0x00BA	; 0x8000ba <wheel_length+0x3>
     8ce:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <distance>
     8d2:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <distance+0x1>
     8d6:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <distance+0x2>
     8da:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <distance+0x3>
     8de:	9c d2       	rcall	.+1336   	; 0xe18 <__addsf3>
     8e0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <distance>
     8e4:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <distance+0x1>
     8e8:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <distance+0x2>
     8ec:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <distance+0x3>
		}
		
		calc_speed(timer_now);
     8f0:	c7 01       	movw	r24, r14
     8f2:	b6 01       	movw	r22, r12
     8f4:	1f df       	rcall	.-450    	; 0x734 <calc_speed>
		
		handle_btn_click(PINB & _BV(BTN_PIN), timer_now);
     8f6:	86 b3       	in	r24, 0x16	; 22
     8f8:	b7 01       	movw	r22, r14
     8fa:	a6 01       	movw	r20, r12
     8fc:	88 70       	andi	r24, 0x08	; 8
     8fe:	30 de       	rcall	.-928    	; 0x560 <handle_btn_click>
		
		// toggle led every 250 ms
		if (led_turned && (timer_now - led_timer) >= 250) {
     900:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <led_turned>
     904:	88 23       	and	r24, r24
     906:	f1 f0       	breq	.+60     	; 0x944 <main+0x120>
     908:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <led_timer>
     90c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <led_timer+0x1>
     910:	a0 91 c1 00 	lds	r26, 0x00C1	; 0x8000c1 <led_timer+0x2>
     914:	b0 91 c2 00 	lds	r27, 0x00C2	; 0x8000c2 <led_timer+0x3>
     918:	a7 01       	movw	r20, r14
     91a:	96 01       	movw	r18, r12
     91c:	28 1b       	sub	r18, r24
     91e:	39 0b       	sbc	r19, r25
     920:	4a 0b       	sbc	r20, r26
     922:	5b 0b       	sbc	r21, r27
     924:	2a 3f       	cpi	r18, 0xFA	; 250
     926:	31 05       	cpc	r19, r1
     928:	41 05       	cpc	r20, r1
     92a:	51 05       	cpc	r21, r1
     92c:	58 f0       	brcs	.+22     	; 0x944 <main+0x120>
			PORTB ^= _BV(LED_PIN);
     92e:	88 b3       	in	r24, 0x18	; 24
     930:	8c 27       	eor	r24, r28
     932:	88 bb       	out	0x18, r24	; 24
			led_timer = timer_now;
     934:	c0 92 bf 00 	sts	0x00BF, r12	; 0x8000bf <led_timer>
     938:	d0 92 c0 00 	sts	0x00C0, r13	; 0x8000c0 <led_timer+0x1>
     93c:	e0 92 c1 00 	sts	0x00C1, r14	; 0x8000c1 <led_timer+0x2>
     940:	f0 92 c2 00 	sts	0x00C2, r15	; 0x8000c2 <led_timer+0x3>
		}
		
		// idle
		if (speed != 0 && timer_now - wheel_rotation_last_time >= 4000) {
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	a9 01       	movw	r20, r18
     94a:	60 91 ef 00 	lds	r22, 0x00EF	; 0x8000ef <speed>
     94e:	70 91 f0 00 	lds	r23, 0x00F0	; 0x8000f0 <speed+0x1>
     952:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <speed+0x2>
     956:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <speed+0x3>
     95a:	c2 d2       	rcall	.+1412   	; 0xee0 <__cmpsf2>
     95c:	88 23       	and	r24, r24
     95e:	61 f1       	breq	.+88     	; 0x9b8 <main+0x194>
     960:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <wheel_rotation_last_time>
     964:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <wheel_rotation_last_time+0x1>
     968:	a0 91 f5 00 	lds	r26, 0x00F5	; 0x8000f5 <wheel_rotation_last_time+0x2>
     96c:	b0 91 f6 00 	lds	r27, 0x00F6	; 0x8000f6 <wheel_rotation_last_time+0x3>
     970:	a7 01       	movw	r20, r14
     972:	96 01       	movw	r18, r12
     974:	28 1b       	sub	r18, r24
     976:	39 0b       	sbc	r19, r25
     978:	4a 0b       	sbc	r20, r26
     97a:	5b 0b       	sbc	r21, r27
     97c:	da 01       	movw	r26, r20
     97e:	c9 01       	movw	r24, r18
     980:	80 3a       	cpi	r24, 0xA0	; 160
     982:	9f 40       	sbci	r25, 0x0F	; 15
     984:	a1 05       	cpc	r26, r1
     986:	b1 05       	cpc	r27, r1
     988:	b8 f0       	brcs	.+46     	; 0x9b8 <main+0x194>
			speed = 0;
     98a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <speed>
     98e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <speed+0x1>
     992:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <speed+0x2>
     996:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <speed+0x3>
			wheel_rpm = 0;
     99a:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <wheel_rpm+0x1>
     99e:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <wheel_rpm>
			wheel_rotation_counter = 0;
     9a2:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <wheel_rotation_counter>
			wheel_rotation_start_time = 0;
     9a6:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <wheel_rotation_start_time>
     9aa:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <wheel_rotation_start_time+0x1>
     9ae:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <wheel_rotation_start_time+0x2>
     9b2:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <wheel_rotation_start_time+0x3>
			display_data();
     9b6:	ef dc       	rcall	.-1570   	; 0x396 <display_data>
		}
		
		bool upd_time = display_menu == MENU_TIME && timer_now - display_timer >= 1000;
     9b8:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <display_menu>
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	b1 f4       	brne	.+44     	; 0x9ec <main+0x1c8>
     9c0:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <display_timer>
     9c4:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <display_timer+0x1>
     9c8:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <display_timer+0x2>
     9cc:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <display_timer+0x3>
     9d0:	a7 01       	movw	r20, r14
     9d2:	96 01       	movw	r18, r12
     9d4:	28 1b       	sub	r18, r24
     9d6:	39 0b       	sbc	r19, r25
     9d8:	4a 0b       	sbc	r20, r26
     9da:	5b 0b       	sbc	r21, r27
     9dc:	da 01       	movw	r26, r20
     9de:	c9 01       	movw	r24, r18
     9e0:	88 3e       	cpi	r24, 0xE8	; 232
     9e2:	93 40       	sbci	r25, 0x03	; 3
     9e4:	a1 05       	cpc	r26, r1
     9e6:	b1 05       	cpc	r27, r1
     9e8:	40 f5       	brcc	.+80     	; 0xa3a <main+0x216>
     9ea:	3a cf       	rjmp	.-396    	; 0x860 <main+0x3c>
		bool upd_display = display_menu == MENU_MAIN && speed > 0 && timer_now - display_timer >= 4000;
     9ec:	81 11       	cpse	r24, r1
     9ee:	38 cf       	rjmp	.-400    	; 0x860 <main+0x3c>
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	a9 01       	movw	r20, r18
     9f6:	60 91 ef 00 	lds	r22, 0x00EF	; 0x8000ef <speed>
     9fa:	70 91 f0 00 	lds	r23, 0x00F0	; 0x8000f0 <speed+0x1>
     9fe:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <speed+0x2>
     a02:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <speed+0x3>
     a06:	bb d3       	rcall	.+1910   	; 0x117e <__gesf2>
     a08:	18 16       	cp	r1, r24
     a0a:	0c f0       	brlt	.+2      	; 0xa0e <main+0x1ea>
     a0c:	29 cf       	rjmp	.-430    	; 0x860 <main+0x3c>
     a0e:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <display_timer>
     a12:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <display_timer+0x1>
     a16:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <display_timer+0x2>
     a1a:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <display_timer+0x3>
     a1e:	a7 01       	movw	r20, r14
     a20:	96 01       	movw	r18, r12
     a22:	28 1b       	sub	r18, r24
     a24:	39 0b       	sbc	r19, r25
     a26:	4a 0b       	sbc	r20, r26
     a28:	5b 0b       	sbc	r21, r27
     a2a:	da 01       	movw	r26, r20
     a2c:	c9 01       	movw	r24, r18
     a2e:	80 3a       	cpi	r24, 0xA0	; 160
     a30:	9f 40       	sbci	r25, 0x0F	; 15
     a32:	a1 05       	cpc	r26, r1
     a34:	b1 05       	cpc	r27, r1
     a36:	08 f4       	brcc	.+2      	; 0xa3a <main+0x216>
     a38:	13 cf       	rjmp	.-474    	; 0x860 <main+0x3c>
		if (upd_time || upd_display) {
			display_data();
     a3a:	ad dc       	rcall	.-1702   	; 0x396 <display_data>
			display_timer = timer_now;
     a3c:	c0 92 ea 00 	sts	0x00EA, r12	; 0x8000ea <display_timer>
     a40:	d0 92 eb 00 	sts	0x00EB, r13	; 0x8000eb <display_timer+0x1>
     a44:	e0 92 ec 00 	sts	0x00EC, r14	; 0x8000ec <display_timer+0x2>
     a48:	f0 92 ed 00 	sts	0x00ED, r15	; 0x8000ed <display_timer+0x3>
     a4c:	09 cf       	rjmp	.-494    	; 0x860 <main+0x3c>
		// detect rotation start
		if (!wheel_pin_state && !wheel_rotation_started) {
			wheel_rotation_started = true;
		}
		// detect when magnet passes by the hall sensor
		if (wheel_pin_state && wheel_rotation_started) {
     a4e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <wheel_rotation_started>
     a52:	81 11       	cpse	r24, r1
     a54:	11 cf       	rjmp	.-478    	; 0x878 <main+0x54>
     a56:	4c cf       	rjmp	.-360    	; 0x8f0 <main+0xcc>

00000a58 <i2csw_start>:
void i2csw_byte(uint8_t byte);

// ----------------------------------------------------------------------------

void i2csw_start() {
	DDRB |= (1 << SSD1306_SDA);	// Set port as output
     a58:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1 << SSD1306_SCL);	// Set port as output
     a5a:	b9 9a       	sbi	0x17, 1	; 23
	I2CSW_HIGH(SSD1306_SCL);	// Set to HIGH
     a5c:	c1 9a       	sbi	0x18, 1	; 24
	I2CSW_HIGH(SSD1306_SDA);	// Set to HIGH
     a5e:	c0 9a       	sbi	0x18, 0	; 24
	I2CSW_LOW(SSD1306_SDA);		// Set to LOW
     a60:	c0 98       	cbi	0x18, 0	; 24
	I2CSW_LOW(SSD1306_SCL);		// Set to LOW
     a62:	c1 98       	cbi	0x18, 1	; 24
     a64:	08 95       	ret

00000a66 <i2csw_stop>:
}

void i2csw_stop() {
	I2CSW_LOW(SSD1306_SCL);		// Set to LOW
     a66:	c1 98       	cbi	0x18, 1	; 24
	I2CSW_LOW(SSD1306_SDA);		// Set to LOW
     a68:	c0 98       	cbi	0x18, 0	; 24
	I2CSW_HIGH(SSD1306_SCL);	// Set to HIGH
     a6a:	c1 9a       	sbi	0x18, 1	; 24
	I2CSW_HIGH(SSD1306_SDA);	// Set to HIGH
     a6c:	c0 9a       	sbi	0x18, 0	; 24
	DDRB &= ~(1 << SSD1306_SDA);// Set port as input
     a6e:	b8 98       	cbi	0x17, 0	; 23
     a70:	08 95       	ret

00000a72 <i2csw_byte>:
}

void i2csw_byte(uint8_t byte) {
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++) {
		if ((byte << i) & 0x80)
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	ac 01       	movw	r20, r24
     a7a:	02 2e       	mov	r0, r18
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <i2csw_byte+0x10>
     a7e:	44 0f       	add	r20, r20
     a80:	55 1f       	adc	r21, r21
     a82:	0a 94       	dec	r0
     a84:	e2 f7       	brpl	.-8      	; 0xa7e <i2csw_byte+0xc>
     a86:	47 ff       	sbrs	r20, 7
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <i2csw_byte+0x1c>
			I2CSW_HIGH(SSD1306_SDA);
     a8a:	c0 9a       	sbi	0x18, 0	; 24
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <i2csw_byte+0x1e>
		else
			I2CSW_LOW(SSD1306_SDA);
     a8e:	c0 98       	cbi	0x18, 0	; 24
		I2CSW_HIGH(SSD1306_SCL);
     a90:	c1 9a       	sbi	0x18, 1	; 24
		I2CSW_LOW(SSD1306_SCL);
     a92:	c1 98       	cbi	0x18, 1	; 24
     a94:	2f 5f       	subi	r18, 0xFF	; 255
     a96:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRB &= ~(1 << SSD1306_SDA);// Set port as input
}

void i2csw_byte(uint8_t byte) {
	uint8_t i;
	for (i = 0; i < 8; i++) {
     a98:	28 30       	cpi	r18, 0x08	; 8
     a9a:	31 05       	cpc	r19, r1
     a9c:	69 f7       	brne	.-38     	; 0xa78 <i2csw_byte+0x6>
		else
			I2CSW_LOW(SSD1306_SDA);
		I2CSW_HIGH(SSD1306_SCL);
		I2CSW_LOW(SSD1306_SCL);
	}
	I2CSW_HIGH(SSD1306_SDA);
     a9e:	c0 9a       	sbi	0x18, 0	; 24
	I2CSW_HIGH(SSD1306_SCL);
     aa0:	c1 9a       	sbi	0x18, 1	; 24
	I2CSW_LOW(SSD1306_SCL);
     aa2:	c1 98       	cbi	0x18, 1	; 24
     aa4:	08 95       	ret

00000aa6 <ssd1306_start_command>:
}

// ============================================================================

void ssd1306_start_command() {
	i2csw_start();
     aa6:	d8 df       	rcall	.-80     	; 0xa58 <i2csw_start>
	i2csw_byte(SSD1306_SADDR);	// Slave address: R/W(SA0)=0 - write
     aa8:	88 e7       	ldi	r24, 0x78	; 120
     aaa:	e3 df       	rcall	.-58     	; 0xa72 <i2csw_byte>
	i2csw_byte(0x00);			// Control byte: D/C=0 - write command
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	e1 df       	rcall	.-62     	; 0xa72 <i2csw_byte>
     ab0:	08 95       	ret

00000ab2 <ssd1306_start_data>:
}

void ssd1306_start_data() {
	i2csw_start();
     ab2:	d2 df       	rcall	.-92     	; 0xa58 <i2csw_start>
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
     ab4:	88 e7       	ldi	r24, 0x78	; 120
     ab6:	dd df       	rcall	.-70     	; 0xa72 <i2csw_byte>
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
     ab8:	80 e4       	ldi	r24, 0x40	; 64
     aba:	db df       	rcall	.-74     	; 0xa72 <i2csw_byte>
     abc:	08 95       	ret

00000abe <ssd1306_data_byte>:
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     abe:	d9 df       	rcall	.-78     	; 0xa72 <i2csw_byte>
     ac0:	08 95       	ret

00000ac2 <ssd1306_stop>:
}

void ssd1306_stop() {
	i2csw_stop();
     ac2:	d1 df       	rcall	.-94     	; 0xa66 <i2csw_stop>
     ac4:	08 95       	ret

00000ac6 <ssd1306_init>:
// ============================================================================

uint8_t pos_x = 0;
uint8_t pos_y = 0;

void ssd1306_init() {
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
	ssd1306_start_command();	// Initiate transmission of command
     ace:	eb df       	rcall	.-42     	; 0xaa6 <ssd1306_start_command>
     ad0:	ce e1       	ldi	r28, 0x1E	; 30
     ad2:	d0 e0       	ldi	r29, 0x00	; 0
     ad4:	0e e3       	ldi	r16, 0x3E	; 62
     ad6:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
		ssd1306_data_byte(pgm_read_byte(&ssd1306_init_sequence[i]));	// Send the command out
     ad8:	fe 01       	movw	r30, r28
     ada:	84 91       	lpm	r24, Z
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     adc:	ca df       	rcall	.-108    	; 0xa72 <i2csw_byte>
     ade:	21 96       	adiw	r28, 0x01	; 1
uint8_t pos_x = 0;
uint8_t pos_y = 0;

void ssd1306_init() {
	ssd1306_start_command();	// Initiate transmission of command
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
     ae0:	c0 17       	cp	r28, r16
     ae2:	d1 07       	cpc	r29, r17
     ae4:	c9 f7       	brne	.-14     	; 0xad8 <ssd1306_init+0x12>
void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
}

void ssd1306_stop() {
	i2csw_stop();
     ae6:	bf df       	rcall	.-130    	; 0xa66 <i2csw_stop>
	ssd1306_start_command();	// Initiate transmission of command
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
		ssd1306_data_byte(pgm_read_byte(&ssd1306_init_sequence[i]));	// Send the command out
	}
	ssd1306_stop();	// Finish transmission
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	08 95       	ret

00000af2 <ssd1306_set_pos>:

void ssd1306_set_pos(uint8_t x, uint8_t y) {
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	c8 2f       	mov	r28, r24
     af8:	d6 2f       	mov	r29, r22
	pos_x = x;
     afa:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <pos_x>
	pos_y = y;
     afe:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <__data_end>
	
	ssd1306_start_command();
     b02:	d1 df       	rcall	.-94     	; 0xaa6 <ssd1306_start_command>
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     b04:	8d 2f       	mov	r24, r29
     b06:	87 70       	andi	r24, 0x07	; 7
     b08:	80 6b       	ori	r24, 0xB0	; 176
     b0a:	b3 df       	rcall	.-154    	; 0xa72 <i2csw_byte>
     b0c:	8c 2f       	mov	r24, r28
     b0e:	8f 70       	andi	r24, 0x0F	; 15
     b10:	b0 df       	rcall	.-160    	; 0xa72 <i2csw_byte>
     b12:	8c 2f       	mov	r24, r28
     b14:	82 95       	swap	r24
     b16:	8f 70       	andi	r24, 0x0F	; 15
     b18:	80 61       	ori	r24, 0x10	; 16
     b1a:	ab df       	rcall	.-170    	; 0xa72 <i2csw_byte>
}

void ssd1306_stop() {
	i2csw_stop();
     b1c:	a4 df       	rcall	.-184    	; 0xa66 <i2csw_stop>
	ssd1306_start_command();
	ssd1306_data_byte(0xb0 | (y & 0x07));	// Set page start address
	ssd1306_data_byte(x & 0x0f);			// Set the lower nibble of the column start address
	ssd1306_data_byte(0x10 | (x >> 4));		// Set the higher nibble of the column start address
	ssd1306_stop();	// Finish transmission
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <ssd1306_fill4>:

void ssd1306_fill4(uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4) {
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	e8 2e       	mov	r14, r24
     b32:	f6 2e       	mov	r15, r22
     b34:	04 2f       	mov	r16, r20
     b36:	12 2f       	mov	r17, r18
	ssd1306_set_pos(0, 0);
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	da df       	rcall	.-76     	; 0xaf2 <ssd1306_set_pos>
	ssd1306_start_data();	// Initiate transmission of data
     b3e:	b9 df       	rcall	.-142    	; 0xab2 <ssd1306_start_data>
     b40:	c0 e0       	ldi	r28, 0x00	; 0
     b42:	d1 e0       	ldi	r29, 0x01	; 1
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     b44:	8e 2d       	mov	r24, r14
     b46:	95 df       	rcall	.-214    	; 0xa72 <i2csw_byte>
     b48:	8f 2d       	mov	r24, r15
     b4a:	93 df       	rcall	.-218    	; 0xa72 <i2csw_byte>
     b4c:	80 2f       	mov	r24, r16
     b4e:	91 df       	rcall	.-222    	; 0xa72 <i2csw_byte>
     b50:	81 2f       	mov	r24, r17
     b52:	8f df       	rcall	.-226    	; 0xa72 <i2csw_byte>
     b54:	21 97       	sbiw	r28, 0x01	; 1
}

void ssd1306_fill4(uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4) {
	ssd1306_set_pos(0, 0);
	ssd1306_start_data();	// Initiate transmission of data
	for (uint16_t i = 0; i < 128 * 8 / 4; i++) {
     b56:	b1 f7       	brne	.-20     	; 0xb44 <ssd1306_fill4+0x20>
void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
}

void ssd1306_stop() {
	i2csw_stop();
     b58:	86 df       	rcall	.-244    	; 0xa66 <i2csw_stop>
		ssd1306_data_byte(p2);
		ssd1306_data_byte(p3);
		ssd1306_data_byte(p4);
	}
	ssd1306_stop();	// Finish transmission
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	08 95       	ret

00000b68 <ssd1306_turn_display>:

void ssd1306_turn_display(bool on) {
     b68:	cf 93       	push	r28
     b6a:	c8 2f       	mov	r28, r24
	ssd1306_start_command();
     b6c:	9c df       	rcall	.-200    	; 0xaa6 <ssd1306_start_command>
	ssd1306_data_byte(on ? 0xAF : 0xAE);
     b6e:	c1 11       	cpse	r28, r1
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <ssd1306_turn_display+0xe>
     b72:	8e ea       	ldi	r24, 0xAE	; 174
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <ssd1306_turn_display+0x10>
     b76:	8f ea       	ldi	r24, 0xAF	; 175
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     b78:	7c df       	rcall	.-264    	; 0xa72 <i2csw_byte>
}

void ssd1306_stop() {
	i2csw_stop();
     b7a:	75 df       	rcall	.-278    	; 0xa66 <i2csw_stop>

void ssd1306_turn_display(bool on) {
	ssd1306_start_command();
	ssd1306_data_byte(on ? 0xAF : 0xAE);
	ssd1306_stop();
}
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <ssd1306tx_char_6x8>:
	}
}

int abs_val(int v) {
	return v < 0 ? -v : v;
}
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	8c 01       	movw	r16, r24
     b8c:	00 0f       	add	r16, r16
     b8e:	11 1f       	adc	r17, r17
     b90:	00 0f       	add	r16, r16
     b92:	11 1f       	adc	r17, r17
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	08 0f       	add	r16, r24
     b9a:	19 1f       	adc	r17, r25
     b9c:	8a df       	rcall	.-236    	; 0xab2 <ssd1306_start_data>
     b9e:	e8 01       	movw	r28, r16
     ba0:	c2 58       	subi	r28, 0x82	; 130
     ba2:	d0 40       	sbci	r29, 0x00	; 0
     ba4:	0c 57       	subi	r16, 0x7C	; 124
     ba6:	10 40       	sbci	r17, 0x00	; 0
     ba8:	fe 01       	movw	r30, r28
     baa:	84 91       	lpm	r24, Z
     bac:	88 df       	rcall	.-240    	; 0xabe <ssd1306_data_byte>
     bae:	21 96       	adiw	r28, 0x01	; 1
     bb0:	c0 17       	cp	r28, r16
     bb2:	d1 07       	cpc	r29, r17
     bb4:	c9 f7       	brne	.-14     	; 0xba8 <ssd1306tx_char_6x8+0x28>
     bb6:	85 df       	rcall	.-246    	; 0xac2 <ssd1306_stop>
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <ssd1306tx_string>:
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	ec 01       	movw	r28, r24
     bc8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	41 f4       	brne	.+16     	; 0xbe0 <ssd1306tx_string+0x1e>
     bd0:	88 81       	ld	r24, Y
     bd2:	88 23       	and	r24, r24
     bd4:	29 f0       	breq	.+10     	; 0xbe0 <ssd1306tx_string+0x1e>
     bd6:	21 96       	adiw	r28, 0x01	; 1
     bd8:	d3 df       	rcall	.-90     	; 0xb80 <ssd1306tx_char_6x8>
     bda:	89 91       	ld	r24, Y+
     bdc:	81 11       	cpse	r24, r1
     bde:	fc cf       	rjmp	.-8      	; 0xbd8 <ssd1306tx_string+0x16>
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <itoa>:
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	7b 01       	movw	r14, r22
     bf8:	eb 01       	movw	r28, r22
     bfa:	fb 01       	movw	r30, r22
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	0f 2e       	mov	r0, r31
     c02:	fa e0       	ldi	r31, 0x0A	; 10
     c04:	cf 2e       	mov	r12, r31
     c06:	d1 2c       	mov	r13, r1
     c08:	f0 2d       	mov	r31, r0
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <itoa+0x28>
     c0c:	98 01       	movw	r18, r16
     c0e:	89 01       	movw	r16, r18
     c10:	0f 5f       	subi	r16, 0xFF	; 255
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	b6 01       	movw	r22, r12
     c16:	22 d3       	rcall	.+1604   	; 0x125c <__divmodhi4>
     c18:	80 5d       	subi	r24, 0xD0	; 208
     c1a:	81 93       	st	Z+, r24
     c1c:	86 2f       	mov	r24, r22
     c1e:	97 2f       	mov	r25, r23
     c20:	18 16       	cp	r1, r24
     c22:	19 06       	cpc	r1, r25
     c24:	9c f3       	brlt	.-26     	; 0xc0c <itoa+0x26>
     c26:	f7 01       	movw	r30, r14
     c28:	e0 0f       	add	r30, r16
     c2a:	f1 1f       	adc	r31, r17
     c2c:	10 82       	st	Z, r1
     c2e:	12 16       	cp	r1, r18
     c30:	13 06       	cpc	r1, r19
     c32:	8c f4       	brge	.+34     	; 0xc56 <itoa+0x70>
     c34:	a9 01       	movw	r20, r18
     c36:	f7 01       	movw	r30, r14
     c38:	e0 0f       	add	r30, r16
     c3a:	f1 1f       	adc	r31, r17
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	28 81       	ld	r18, Y
     c42:	32 91       	ld	r19, -Z
     c44:	39 93       	st	Y+, r19
     c46:	20 83       	st	Z, r18
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	9a 01       	movw	r18, r20
     c4c:	28 1b       	sub	r18, r24
     c4e:	39 0b       	sbc	r19, r25
     c50:	82 17       	cp	r24, r18
     c52:	93 07       	cpc	r25, r19
     c54:	ac f3       	brlt	.-22     	; 0xc40 <itoa+0x5a>
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	df 90       	pop	r13
     c64:	cf 90       	pop	r12
     c66:	08 95       	ret

00000c68 <ssd1306tx_int>:
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <ssd1306tx_int+0x6>
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <ssd1306tx_int+0x8>
     c70:	1f 92       	push	r1
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	88 3e       	cpi	r24, 0xE8	; 232
     c78:	23 e0       	ldi	r18, 0x03	; 3
     c7a:	92 07       	cpc	r25, r18
     c7c:	38 f4       	brcc	.+14     	; 0xc8c <ssd1306tx_int+0x24>
     c7e:	be 01       	movw	r22, r28
     c80:	6f 5f       	subi	r22, 0xFF	; 255
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	b0 df       	rcall	.-160    	; 0xbe6 <itoa>
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	9b df       	rcall	.-202    	; 0xbc2 <ssd1306tx_string>
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <ftoa>:

void ftoa(float f, int precision, char *buf) {
     c9c:	4f 92       	push	r4
     c9e:	5f 92       	push	r5
     ca0:	6f 92       	push	r6
     ca2:	7f 92       	push	r7
     ca4:	8f 92       	push	r8
     ca6:	9f 92       	push	r9
     ca8:	af 92       	push	r10
     caa:	bf 92       	push	r11
     cac:	cf 92       	push	r12
     cae:	df 92       	push	r13
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	2a 97       	sbiw	r28, 0x0a	; 10
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	4b 01       	movw	r8, r22
     cce:	5c 01       	movw	r10, r24
     cd0:	64 2e       	mov	r6, r20
     cd2:	75 2e       	mov	r7, r21
     cd4:	89 01       	movw	r16, r18
	int number = (int) f;
     cd6:	70 d1       	rcall	.+736    	; 0xfb8 <__fixsfsi>
     cd8:	6b 01       	movw	r12, r22
     cda:	7c 01       	movw	r14, r24
	itoa(number, buf);
     cdc:	b8 01       	movw	r22, r16
     cde:	c6 01       	movw	r24, r12
     ce0:	82 df       	rcall	.-252    	; 0xbe6 <itoa>
	while (*buf != '\0') buf++;
     ce2:	f8 01       	movw	r30, r16
     ce4:	80 81       	ld	r24, Z
     ce6:	88 23       	and	r24, r24
     ce8:	41 f0       	breq	.+16     	; 0xcfa <ftoa+0x5e>
     cea:	c8 01       	movw	r24, r16
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	8c 01       	movw	r16, r24
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	f8 01       	movw	r30, r16
     cf4:	20 81       	ld	r18, Z
     cf6:	21 11       	cpse	r18, r1
     cf8:	fa cf       	rjmp	.-12     	; 0xcee <ftoa+0x52>
	*buf++ = '.';
     cfa:	8e e2       	ldi	r24, 0x2E	; 46
     cfc:	f8 01       	movw	r30, r16
     cfe:	81 93       	st	Z+, r24
     d00:	8f 01       	movw	r16, r30
	
	if (precision > 4) {
		precision = 4;
	}
	int p[] = {0, 10, 100, 1000, 10000};
     d02:	8a e0       	ldi	r24, 0x0A	; 10
     d04:	e1 e6       	ldi	r30, 0x61	; 97
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	de 01       	movw	r26, r28
     d0a:	11 96       	adiw	r26, 0x01	; 1
     d0c:	01 90       	ld	r0, Z+
     d0e:	0d 92       	st	X+, r0
     d10:	8a 95       	dec	r24
     d12:	e1 f7       	brne	.-8      	; 0xd0c <ftoa+0x70>
	int decimal = abs_val((int)((f - number) * p[precision]));
     d14:	86 2d       	mov	r24, r6
     d16:	97 2d       	mov	r25, r7
     d18:	85 30       	cpi	r24, 0x05	; 5
     d1a:	91 05       	cpc	r25, r1
     d1c:	14 f0       	brlt	.+4      	; 0xd22 <ftoa+0x86>
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	fe 01       	movw	r30, r28
     d28:	e8 0f       	add	r30, r24
     d2a:	f9 1f       	adc	r31, r25
	itoa(decimal, buf);
     d2c:	61 81       	ldd	r22, Z+1	; 0x01
     d2e:	72 81       	ldd	r23, Z+2	; 0x02
     d30:	07 2e       	mov	r0, r23
     d32:	00 0c       	add	r0, r0
     d34:	88 0b       	sbc	r24, r24
     d36:	99 0b       	sbc	r25, r25
     d38:	72 d1       	rcall	.+740    	; 0x101e <__floatsisf>
     d3a:	2b 01       	movw	r4, r22
     d3c:	3c 01       	movw	r6, r24
     d3e:	b6 01       	movw	r22, r12
     d40:	dd 0c       	add	r13, r13
     d42:	88 0b       	sbc	r24, r24
     d44:	99 0b       	sbc	r25, r25
     d46:	6b d1       	rcall	.+726    	; 0x101e <__floatsisf>
     d48:	9b 01       	movw	r18, r22
     d4a:	ac 01       	movw	r20, r24
     d4c:	c5 01       	movw	r24, r10
     d4e:	b4 01       	movw	r22, r8
     d50:	62 d0       	rcall	.+196    	; 0xe16 <__subsf3>
     d52:	9b 01       	movw	r18, r22
     d54:	ac 01       	movw	r20, r24
     d56:	c3 01       	movw	r24, r6
     d58:	b2 01       	movw	r22, r4
     d5a:	15 d2       	rcall	.+1066   	; 0x1186 <__mulsf3>
     d5c:	2d d1       	rcall	.+602    	; 0xfb8 <__fixsfsi>
     d5e:	9b 01       	movw	r18, r22
     d60:	77 23       	and	r23, r23
     d62:	24 f4       	brge	.+8      	; 0xd6c <ftoa+0xd0>
     d64:	22 27       	eor	r18, r18
     d66:	33 27       	eor	r19, r19
     d68:	26 1b       	sub	r18, r22
     d6a:	37 0b       	sbc	r19, r23
     d6c:	b8 01       	movw	r22, r16
     d6e:	c9 01       	movw	r24, r18
     d70:	3a df       	rcall	.-396    	; 0xbe6 <itoa>
     d72:	2a 96       	adiw	r28, 0x0a	; 10
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	bf 90       	pop	r11
     d90:	af 90       	pop	r10
     d92:	9f 90       	pop	r9
     d94:	8f 90       	pop	r8
     d96:	7f 90       	pop	r7
     d98:	6f 90       	pop	r6
     d9a:	5f 90       	pop	r5
     d9c:	4f 90       	pop	r4
     d9e:	08 95       	ret

00000da0 <ssd1306tx_float>:
		ssd1306_data_byte(pgm_read_byte(&ssd1306xled_font8x16data[row + col]));
	}
	ssd1306_stop();
}

void ssd1306tx_float(float f, int precision) {
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	2a 97       	sbiw	r28, 0x0a	; 10
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	6b 01       	movw	r12, r22
     dc2:	7c 01       	movw	r14, r24
     dc4:	8a 01       	movw	r16, r20
	if (f < 0 || f >= 1000) {
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	a9 01       	movw	r20, r18
     dcc:	89 d0       	rcall	.+274    	; 0xee0 <__cmpsf2>
     dce:	88 23       	and	r24, r24
     dd0:	9c f0       	brlt	.+38     	; 0xdf8 <ssd1306tx_float+0x58>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	4a e7       	ldi	r20, 0x7A	; 122
     dd8:	54 e4       	ldi	r21, 0x44	; 68
     dda:	c7 01       	movw	r24, r14
     ddc:	b6 01       	movw	r22, r12
     dde:	cf d1       	rcall	.+926    	; 0x117e <__gesf2>
     de0:	88 23       	and	r24, r24
     de2:	54 f4       	brge	.+20     	; 0xdf8 <ssd1306tx_float+0x58>
		return;
	}
	
	char buf[10];
	ftoa(f, precision, buf);
     de4:	9e 01       	movw	r18, r28
     de6:	2f 5f       	subi	r18, 0xFF	; 255
     de8:	3f 4f       	sbci	r19, 0xFF	; 255
     dea:	a8 01       	movw	r20, r16
     dec:	c7 01       	movw	r24, r14
     dee:	b6 01       	movw	r22, r12
     df0:	55 df       	rcall	.-342    	; 0xc9c <ftoa>
	ssd1306tx_string(buf);
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	e5 de       	rcall	.-566    	; 0xbc2 <ssd1306tx_string>
}
     df8:	2a 96       	adiw	r28, 0x0a	; 10
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	08 95       	ret

00000e16 <__subsf3>:
     e16:	50 58       	subi	r21, 0x80	; 128

00000e18 <__addsf3>:
     e18:	bb 27       	eor	r27, r27
     e1a:	aa 27       	eor	r26, r26
     e1c:	0e d0       	rcall	.+28     	; 0xe3a <__addsf3x>
     e1e:	75 c1       	rjmp	.+746    	; 0x110a <__fp_round>
     e20:	66 d1       	rcall	.+716    	; 0x10ee <__fp_pscA>
     e22:	30 f0       	brcs	.+12     	; 0xe30 <__addsf3+0x18>
     e24:	6b d1       	rcall	.+726    	; 0x10fc <__fp_pscB>
     e26:	20 f0       	brcs	.+8      	; 0xe30 <__addsf3+0x18>
     e28:	31 f4       	brne	.+12     	; 0xe36 <__addsf3+0x1e>
     e2a:	9f 3f       	cpi	r25, 0xFF	; 255
     e2c:	11 f4       	brne	.+4      	; 0xe32 <__addsf3+0x1a>
     e2e:	1e f4       	brtc	.+6      	; 0xe36 <__addsf3+0x1e>
     e30:	5b c1       	rjmp	.+694    	; 0x10e8 <__fp_nan>
     e32:	0e f4       	brtc	.+2      	; 0xe36 <__addsf3+0x1e>
     e34:	e0 95       	com	r30
     e36:	e7 fb       	bst	r30, 7
     e38:	51 c1       	rjmp	.+674    	; 0x10dc <__fp_inf>

00000e3a <__addsf3x>:
     e3a:	e9 2f       	mov	r30, r25
     e3c:	77 d1       	rcall	.+750    	; 0x112c <__fp_split3>
     e3e:	80 f3       	brcs	.-32     	; 0xe20 <__addsf3+0x8>
     e40:	ba 17       	cp	r27, r26
     e42:	62 07       	cpc	r22, r18
     e44:	73 07       	cpc	r23, r19
     e46:	84 07       	cpc	r24, r20
     e48:	95 07       	cpc	r25, r21
     e4a:	18 f0       	brcs	.+6      	; 0xe52 <__addsf3x+0x18>
     e4c:	71 f4       	brne	.+28     	; 0xe6a <__addsf3x+0x30>
     e4e:	9e f5       	brtc	.+102    	; 0xeb6 <__addsf3x+0x7c>
     e50:	8f c1       	rjmp	.+798    	; 0x1170 <__fp_zero>
     e52:	0e f4       	brtc	.+2      	; 0xe56 <__addsf3x+0x1c>
     e54:	e0 95       	com	r30
     e56:	0b 2e       	mov	r0, r27
     e58:	ba 2f       	mov	r27, r26
     e5a:	a0 2d       	mov	r26, r0
     e5c:	0b 01       	movw	r0, r22
     e5e:	b9 01       	movw	r22, r18
     e60:	90 01       	movw	r18, r0
     e62:	0c 01       	movw	r0, r24
     e64:	ca 01       	movw	r24, r20
     e66:	a0 01       	movw	r20, r0
     e68:	11 24       	eor	r1, r1
     e6a:	ff 27       	eor	r31, r31
     e6c:	59 1b       	sub	r21, r25
     e6e:	99 f0       	breq	.+38     	; 0xe96 <__addsf3x+0x5c>
     e70:	59 3f       	cpi	r21, 0xF9	; 249
     e72:	50 f4       	brcc	.+20     	; 0xe88 <__addsf3x+0x4e>
     e74:	50 3e       	cpi	r21, 0xE0	; 224
     e76:	68 f1       	brcs	.+90     	; 0xed2 <__addsf3x+0x98>
     e78:	1a 16       	cp	r1, r26
     e7a:	f0 40       	sbci	r31, 0x00	; 0
     e7c:	a2 2f       	mov	r26, r18
     e7e:	23 2f       	mov	r18, r19
     e80:	34 2f       	mov	r19, r20
     e82:	44 27       	eor	r20, r20
     e84:	58 5f       	subi	r21, 0xF8	; 248
     e86:	f3 cf       	rjmp	.-26     	; 0xe6e <__addsf3x+0x34>
     e88:	46 95       	lsr	r20
     e8a:	37 95       	ror	r19
     e8c:	27 95       	ror	r18
     e8e:	a7 95       	ror	r26
     e90:	f0 40       	sbci	r31, 0x00	; 0
     e92:	53 95       	inc	r21
     e94:	c9 f7       	brne	.-14     	; 0xe88 <__addsf3x+0x4e>
     e96:	7e f4       	brtc	.+30     	; 0xeb6 <__addsf3x+0x7c>
     e98:	1f 16       	cp	r1, r31
     e9a:	ba 0b       	sbc	r27, r26
     e9c:	62 0b       	sbc	r22, r18
     e9e:	73 0b       	sbc	r23, r19
     ea0:	84 0b       	sbc	r24, r20
     ea2:	ba f0       	brmi	.+46     	; 0xed2 <__addsf3x+0x98>
     ea4:	91 50       	subi	r25, 0x01	; 1
     ea6:	a1 f0       	breq	.+40     	; 0xed0 <__addsf3x+0x96>
     ea8:	ff 0f       	add	r31, r31
     eaa:	bb 1f       	adc	r27, r27
     eac:	66 1f       	adc	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	88 1f       	adc	r24, r24
     eb2:	c2 f7       	brpl	.-16     	; 0xea4 <__addsf3x+0x6a>
     eb4:	0e c0       	rjmp	.+28     	; 0xed2 <__addsf3x+0x98>
     eb6:	ba 0f       	add	r27, r26
     eb8:	62 1f       	adc	r22, r18
     eba:	73 1f       	adc	r23, r19
     ebc:	84 1f       	adc	r24, r20
     ebe:	48 f4       	brcc	.+18     	; 0xed2 <__addsf3x+0x98>
     ec0:	87 95       	ror	r24
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	b7 95       	ror	r27
     ec8:	f7 95       	ror	r31
     eca:	9e 3f       	cpi	r25, 0xFE	; 254
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <__addsf3x+0x96>
     ece:	b3 cf       	rjmp	.-154    	; 0xe36 <__addsf3+0x1e>
     ed0:	93 95       	inc	r25
     ed2:	88 0f       	add	r24, r24
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <__addsf3x+0x9e>
     ed6:	99 27       	eor	r25, r25
     ed8:	ee 0f       	add	r30, r30
     eda:	97 95       	ror	r25
     edc:	87 95       	ror	r24
     ede:	08 95       	ret

00000ee0 <__cmpsf2>:
     ee0:	d9 d0       	rcall	.+434    	; 0x1094 <__fp_cmp>
     ee2:	08 f4       	brcc	.+2      	; 0xee6 <__cmpsf2+0x6>
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	08 95       	ret

00000ee8 <__divsf3>:
     ee8:	0c d0       	rcall	.+24     	; 0xf02 <__divsf3x>
     eea:	0f c1       	rjmp	.+542    	; 0x110a <__fp_round>
     eec:	07 d1       	rcall	.+526    	; 0x10fc <__fp_pscB>
     eee:	40 f0       	brcs	.+16     	; 0xf00 <__divsf3+0x18>
     ef0:	fe d0       	rcall	.+508    	; 0x10ee <__fp_pscA>
     ef2:	30 f0       	brcs	.+12     	; 0xf00 <__divsf3+0x18>
     ef4:	21 f4       	brne	.+8      	; 0xefe <__divsf3+0x16>
     ef6:	5f 3f       	cpi	r21, 0xFF	; 255
     ef8:	19 f0       	breq	.+6      	; 0xf00 <__divsf3+0x18>
     efa:	f0 c0       	rjmp	.+480    	; 0x10dc <__fp_inf>
     efc:	51 11       	cpse	r21, r1
     efe:	39 c1       	rjmp	.+626    	; 0x1172 <__fp_szero>
     f00:	f3 c0       	rjmp	.+486    	; 0x10e8 <__fp_nan>

00000f02 <__divsf3x>:
     f02:	14 d1       	rcall	.+552    	; 0x112c <__fp_split3>
     f04:	98 f3       	brcs	.-26     	; 0xeec <__divsf3+0x4>

00000f06 <__divsf3_pse>:
     f06:	99 23       	and	r25, r25
     f08:	c9 f3       	breq	.-14     	; 0xefc <__divsf3+0x14>
     f0a:	55 23       	and	r21, r21
     f0c:	b1 f3       	breq	.-20     	; 0xefa <__divsf3+0x12>
     f0e:	95 1b       	sub	r25, r21
     f10:	55 0b       	sbc	r21, r21
     f12:	bb 27       	eor	r27, r27
     f14:	aa 27       	eor	r26, r26
     f16:	62 17       	cp	r22, r18
     f18:	73 07       	cpc	r23, r19
     f1a:	84 07       	cpc	r24, r20
     f1c:	38 f0       	brcs	.+14     	; 0xf2c <__divsf3_pse+0x26>
     f1e:	9f 5f       	subi	r25, 0xFF	; 255
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
     f22:	22 0f       	add	r18, r18
     f24:	33 1f       	adc	r19, r19
     f26:	44 1f       	adc	r20, r20
     f28:	aa 1f       	adc	r26, r26
     f2a:	a9 f3       	breq	.-22     	; 0xf16 <__divsf3_pse+0x10>
     f2c:	33 d0       	rcall	.+102    	; 0xf94 <__divsf3_pse+0x8e>
     f2e:	0e 2e       	mov	r0, r30
     f30:	3a f0       	brmi	.+14     	; 0xf40 <__divsf3_pse+0x3a>
     f32:	e0 e8       	ldi	r30, 0x80	; 128
     f34:	30 d0       	rcall	.+96     	; 0xf96 <__divsf3_pse+0x90>
     f36:	91 50       	subi	r25, 0x01	; 1
     f38:	50 40       	sbci	r21, 0x00	; 0
     f3a:	e6 95       	lsr	r30
     f3c:	00 1c       	adc	r0, r0
     f3e:	ca f7       	brpl	.-14     	; 0xf32 <__divsf3_pse+0x2c>
     f40:	29 d0       	rcall	.+82     	; 0xf94 <__divsf3_pse+0x8e>
     f42:	fe 2f       	mov	r31, r30
     f44:	27 d0       	rcall	.+78     	; 0xf94 <__divsf3_pse+0x8e>
     f46:	66 0f       	add	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	88 1f       	adc	r24, r24
     f4c:	bb 1f       	adc	r27, r27
     f4e:	26 17       	cp	r18, r22
     f50:	37 07       	cpc	r19, r23
     f52:	48 07       	cpc	r20, r24
     f54:	ab 07       	cpc	r26, r27
     f56:	b0 e8       	ldi	r27, 0x80	; 128
     f58:	09 f0       	breq	.+2      	; 0xf5c <__divsf3_pse+0x56>
     f5a:	bb 0b       	sbc	r27, r27
     f5c:	80 2d       	mov	r24, r0
     f5e:	bf 01       	movw	r22, r30
     f60:	ff 27       	eor	r31, r31
     f62:	93 58       	subi	r25, 0x83	; 131
     f64:	5f 4f       	sbci	r21, 0xFF	; 255
     f66:	2a f0       	brmi	.+10     	; 0xf72 <__divsf3_pse+0x6c>
     f68:	9e 3f       	cpi	r25, 0xFE	; 254
     f6a:	51 05       	cpc	r21, r1
     f6c:	68 f0       	brcs	.+26     	; 0xf88 <__divsf3_pse+0x82>
     f6e:	b6 c0       	rjmp	.+364    	; 0x10dc <__fp_inf>
     f70:	00 c1       	rjmp	.+512    	; 0x1172 <__fp_szero>
     f72:	5f 3f       	cpi	r21, 0xFF	; 255
     f74:	ec f3       	brlt	.-6      	; 0xf70 <__divsf3_pse+0x6a>
     f76:	98 3e       	cpi	r25, 0xE8	; 232
     f78:	dc f3       	brlt	.-10     	; 0xf70 <__divsf3_pse+0x6a>
     f7a:	86 95       	lsr	r24
     f7c:	77 95       	ror	r23
     f7e:	67 95       	ror	r22
     f80:	b7 95       	ror	r27
     f82:	f7 95       	ror	r31
     f84:	9f 5f       	subi	r25, 0xFF	; 255
     f86:	c9 f7       	brne	.-14     	; 0xf7a <__divsf3_pse+0x74>
     f88:	88 0f       	add	r24, r24
     f8a:	91 1d       	adc	r25, r1
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret
     f94:	e1 e0       	ldi	r30, 0x01	; 1
     f96:	66 0f       	add	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	88 1f       	adc	r24, r24
     f9c:	bb 1f       	adc	r27, r27
     f9e:	62 17       	cp	r22, r18
     fa0:	73 07       	cpc	r23, r19
     fa2:	84 07       	cpc	r24, r20
     fa4:	ba 07       	cpc	r27, r26
     fa6:	20 f0       	brcs	.+8      	; 0xfb0 <__divsf3_pse+0xaa>
     fa8:	62 1b       	sub	r22, r18
     faa:	73 0b       	sbc	r23, r19
     fac:	84 0b       	sbc	r24, r20
     fae:	ba 0b       	sbc	r27, r26
     fb0:	ee 1f       	adc	r30, r30
     fb2:	88 f7       	brcc	.-30     	; 0xf96 <__divsf3_pse+0x90>
     fb4:	e0 95       	com	r30
     fb6:	08 95       	ret

00000fb8 <__fixsfsi>:
     fb8:	04 d0       	rcall	.+8      	; 0xfc2 <__fixunssfsi>
     fba:	68 94       	set
     fbc:	b1 11       	cpse	r27, r1
     fbe:	d9 c0       	rjmp	.+434    	; 0x1172 <__fp_szero>
     fc0:	08 95       	ret

00000fc2 <__fixunssfsi>:
     fc2:	bc d0       	rcall	.+376    	; 0x113c <__fp_splitA>
     fc4:	88 f0       	brcs	.+34     	; 0xfe8 <__fixunssfsi+0x26>
     fc6:	9f 57       	subi	r25, 0x7F	; 127
     fc8:	90 f0       	brcs	.+36     	; 0xfee <__fixunssfsi+0x2c>
     fca:	b9 2f       	mov	r27, r25
     fcc:	99 27       	eor	r25, r25
     fce:	b7 51       	subi	r27, 0x17	; 23
     fd0:	a0 f0       	brcs	.+40     	; 0xffa <__fixunssfsi+0x38>
     fd2:	d1 f0       	breq	.+52     	; 0x1008 <__fixunssfsi+0x46>
     fd4:	66 0f       	add	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	88 1f       	adc	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	1a f0       	brmi	.+6      	; 0xfe4 <__fixunssfsi+0x22>
     fde:	ba 95       	dec	r27
     fe0:	c9 f7       	brne	.-14     	; 0xfd4 <__fixunssfsi+0x12>
     fe2:	12 c0       	rjmp	.+36     	; 0x1008 <__fixunssfsi+0x46>
     fe4:	b1 30       	cpi	r27, 0x01	; 1
     fe6:	81 f0       	breq	.+32     	; 0x1008 <__fixunssfsi+0x46>
     fe8:	c3 d0       	rcall	.+390    	; 0x1170 <__fp_zero>
     fea:	b1 e0       	ldi	r27, 0x01	; 1
     fec:	08 95       	ret
     fee:	c0 c0       	rjmp	.+384    	; 0x1170 <__fp_zero>
     ff0:	67 2f       	mov	r22, r23
     ff2:	78 2f       	mov	r23, r24
     ff4:	88 27       	eor	r24, r24
     ff6:	b8 5f       	subi	r27, 0xF8	; 248
     ff8:	39 f0       	breq	.+14     	; 0x1008 <__fixunssfsi+0x46>
     ffa:	b9 3f       	cpi	r27, 0xF9	; 249
     ffc:	cc f3       	brlt	.-14     	; 0xff0 <__fixunssfsi+0x2e>
     ffe:	86 95       	lsr	r24
    1000:	77 95       	ror	r23
    1002:	67 95       	ror	r22
    1004:	b3 95       	inc	r27
    1006:	d9 f7       	brne	.-10     	; 0xffe <__fixunssfsi+0x3c>
    1008:	3e f4       	brtc	.+14     	; 0x1018 <__fixunssfsi+0x56>
    100a:	90 95       	com	r25
    100c:	80 95       	com	r24
    100e:	70 95       	com	r23
    1010:	61 95       	neg	r22
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	08 95       	ret

0000101a <__floatunsisf>:
    101a:	e8 94       	clt
    101c:	09 c0       	rjmp	.+18     	; 0x1030 <__floatsisf+0x12>

0000101e <__floatsisf>:
    101e:	97 fb       	bst	r25, 7
    1020:	3e f4       	brtc	.+14     	; 0x1030 <__floatsisf+0x12>
    1022:	90 95       	com	r25
    1024:	80 95       	com	r24
    1026:	70 95       	com	r23
    1028:	61 95       	neg	r22
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8f 4f       	sbci	r24, 0xFF	; 255
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	99 23       	and	r25, r25
    1032:	a9 f0       	breq	.+42     	; 0x105e <__floatsisf+0x40>
    1034:	f9 2f       	mov	r31, r25
    1036:	96 e9       	ldi	r25, 0x96	; 150
    1038:	bb 27       	eor	r27, r27
    103a:	93 95       	inc	r25
    103c:	f6 95       	lsr	r31
    103e:	87 95       	ror	r24
    1040:	77 95       	ror	r23
    1042:	67 95       	ror	r22
    1044:	b7 95       	ror	r27
    1046:	f1 11       	cpse	r31, r1
    1048:	f8 cf       	rjmp	.-16     	; 0x103a <__floatsisf+0x1c>
    104a:	fa f4       	brpl	.+62     	; 0x108a <__floatsisf+0x6c>
    104c:	bb 0f       	add	r27, r27
    104e:	11 f4       	brne	.+4      	; 0x1054 <__floatsisf+0x36>
    1050:	60 ff       	sbrs	r22, 0
    1052:	1b c0       	rjmp	.+54     	; 0x108a <__floatsisf+0x6c>
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	8f 4f       	sbci	r24, 0xFF	; 255
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	16 c0       	rjmp	.+44     	; 0x108a <__floatsisf+0x6c>
    105e:	88 23       	and	r24, r24
    1060:	11 f0       	breq	.+4      	; 0x1066 <__floatsisf+0x48>
    1062:	96 e9       	ldi	r25, 0x96	; 150
    1064:	11 c0       	rjmp	.+34     	; 0x1088 <__floatsisf+0x6a>
    1066:	77 23       	and	r23, r23
    1068:	21 f0       	breq	.+8      	; 0x1072 <__floatsisf+0x54>
    106a:	9e e8       	ldi	r25, 0x8E	; 142
    106c:	87 2f       	mov	r24, r23
    106e:	76 2f       	mov	r23, r22
    1070:	05 c0       	rjmp	.+10     	; 0x107c <__floatsisf+0x5e>
    1072:	66 23       	and	r22, r22
    1074:	71 f0       	breq	.+28     	; 0x1092 <__floatsisf+0x74>
    1076:	96 e8       	ldi	r25, 0x86	; 134
    1078:	86 2f       	mov	r24, r22
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	2a f0       	brmi	.+10     	; 0x108a <__floatsisf+0x6c>
    1080:	9a 95       	dec	r25
    1082:	66 0f       	add	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	88 1f       	adc	r24, r24
    1088:	da f7       	brpl	.-10     	; 0x1080 <__floatsisf+0x62>
    108a:	88 0f       	add	r24, r24
    108c:	96 95       	lsr	r25
    108e:	87 95       	ror	r24
    1090:	97 f9       	bld	r25, 7
    1092:	08 95       	ret

00001094 <__fp_cmp>:
    1094:	99 0f       	add	r25, r25
    1096:	00 08       	sbc	r0, r0
    1098:	55 0f       	add	r21, r21
    109a:	aa 0b       	sbc	r26, r26
    109c:	e0 e8       	ldi	r30, 0x80	; 128
    109e:	fe ef       	ldi	r31, 0xFE	; 254
    10a0:	16 16       	cp	r1, r22
    10a2:	17 06       	cpc	r1, r23
    10a4:	e8 07       	cpc	r30, r24
    10a6:	f9 07       	cpc	r31, r25
    10a8:	c0 f0       	brcs	.+48     	; 0x10da <__fp_cmp+0x46>
    10aa:	12 16       	cp	r1, r18
    10ac:	13 06       	cpc	r1, r19
    10ae:	e4 07       	cpc	r30, r20
    10b0:	f5 07       	cpc	r31, r21
    10b2:	98 f0       	brcs	.+38     	; 0x10da <__fp_cmp+0x46>
    10b4:	62 1b       	sub	r22, r18
    10b6:	73 0b       	sbc	r23, r19
    10b8:	84 0b       	sbc	r24, r20
    10ba:	95 0b       	sbc	r25, r21
    10bc:	39 f4       	brne	.+14     	; 0x10cc <__fp_cmp+0x38>
    10be:	0a 26       	eor	r0, r26
    10c0:	61 f0       	breq	.+24     	; 0x10da <__fp_cmp+0x46>
    10c2:	23 2b       	or	r18, r19
    10c4:	24 2b       	or	r18, r20
    10c6:	25 2b       	or	r18, r21
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <__fp_cmp+0x3e>
    10ca:	08 95       	ret
    10cc:	0a 26       	eor	r0, r26
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <__fp_cmp+0x3e>
    10d0:	a1 40       	sbci	r26, 0x01	; 1
    10d2:	a6 95       	lsr	r26
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	81 1d       	adc	r24, r1
    10d8:	81 1d       	adc	r24, r1
    10da:	08 95       	ret

000010dc <__fp_inf>:
    10dc:	97 f9       	bld	r25, 7
    10de:	9f 67       	ori	r25, 0x7F	; 127
    10e0:	80 e8       	ldi	r24, 0x80	; 128
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	08 95       	ret

000010e8 <__fp_nan>:
    10e8:	9f ef       	ldi	r25, 0xFF	; 255
    10ea:	80 ec       	ldi	r24, 0xC0	; 192
    10ec:	08 95       	ret

000010ee <__fp_pscA>:
    10ee:	00 24       	eor	r0, r0
    10f0:	0a 94       	dec	r0
    10f2:	16 16       	cp	r1, r22
    10f4:	17 06       	cpc	r1, r23
    10f6:	18 06       	cpc	r1, r24
    10f8:	09 06       	cpc	r0, r25
    10fa:	08 95       	ret

000010fc <__fp_pscB>:
    10fc:	00 24       	eor	r0, r0
    10fe:	0a 94       	dec	r0
    1100:	12 16       	cp	r1, r18
    1102:	13 06       	cpc	r1, r19
    1104:	14 06       	cpc	r1, r20
    1106:	05 06       	cpc	r0, r21
    1108:	08 95       	ret

0000110a <__fp_round>:
    110a:	09 2e       	mov	r0, r25
    110c:	03 94       	inc	r0
    110e:	00 0c       	add	r0, r0
    1110:	11 f4       	brne	.+4      	; 0x1116 <__fp_round+0xc>
    1112:	88 23       	and	r24, r24
    1114:	52 f0       	brmi	.+20     	; 0x112a <__fp_round+0x20>
    1116:	bb 0f       	add	r27, r27
    1118:	40 f4       	brcc	.+16     	; 0x112a <__fp_round+0x20>
    111a:	bf 2b       	or	r27, r31
    111c:	11 f4       	brne	.+4      	; 0x1122 <__fp_round+0x18>
    111e:	60 ff       	sbrs	r22, 0
    1120:	04 c0       	rjmp	.+8      	; 0x112a <__fp_round+0x20>
    1122:	6f 5f       	subi	r22, 0xFF	; 255
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	8f 4f       	sbci	r24, 0xFF	; 255
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	08 95       	ret

0000112c <__fp_split3>:
    112c:	57 fd       	sbrc	r21, 7
    112e:	90 58       	subi	r25, 0x80	; 128
    1130:	44 0f       	add	r20, r20
    1132:	55 1f       	adc	r21, r21
    1134:	59 f0       	breq	.+22     	; 0x114c <__fp_splitA+0x10>
    1136:	5f 3f       	cpi	r21, 0xFF	; 255
    1138:	71 f0       	breq	.+28     	; 0x1156 <__fp_splitA+0x1a>
    113a:	47 95       	ror	r20

0000113c <__fp_splitA>:
    113c:	88 0f       	add	r24, r24
    113e:	97 fb       	bst	r25, 7
    1140:	99 1f       	adc	r25, r25
    1142:	61 f0       	breq	.+24     	; 0x115c <__fp_splitA+0x20>
    1144:	9f 3f       	cpi	r25, 0xFF	; 255
    1146:	79 f0       	breq	.+30     	; 0x1166 <__fp_splitA+0x2a>
    1148:	87 95       	ror	r24
    114a:	08 95       	ret
    114c:	12 16       	cp	r1, r18
    114e:	13 06       	cpc	r1, r19
    1150:	14 06       	cpc	r1, r20
    1152:	55 1f       	adc	r21, r21
    1154:	f2 cf       	rjmp	.-28     	; 0x113a <__fp_split3+0xe>
    1156:	46 95       	lsr	r20
    1158:	f1 df       	rcall	.-30     	; 0x113c <__fp_splitA>
    115a:	08 c0       	rjmp	.+16     	; 0x116c <__fp_splitA+0x30>
    115c:	16 16       	cp	r1, r22
    115e:	17 06       	cpc	r1, r23
    1160:	18 06       	cpc	r1, r24
    1162:	99 1f       	adc	r25, r25
    1164:	f1 cf       	rjmp	.-30     	; 0x1148 <__fp_splitA+0xc>
    1166:	86 95       	lsr	r24
    1168:	71 05       	cpc	r23, r1
    116a:	61 05       	cpc	r22, r1
    116c:	08 94       	sec
    116e:	08 95       	ret

00001170 <__fp_zero>:
    1170:	e8 94       	clt

00001172 <__fp_szero>:
    1172:	bb 27       	eor	r27, r27
    1174:	66 27       	eor	r22, r22
    1176:	77 27       	eor	r23, r23
    1178:	cb 01       	movw	r24, r22
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret

0000117e <__gesf2>:
    117e:	8a df       	rcall	.-236    	; 0x1094 <__fp_cmp>
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__gesf2+0x6>
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__mulsf3>:
    1186:	0a d0       	rcall	.+20     	; 0x119c <__mulsf3x>
    1188:	c0 cf       	rjmp	.-128    	; 0x110a <__fp_round>
    118a:	b1 df       	rcall	.-158    	; 0x10ee <__fp_pscA>
    118c:	28 f0       	brcs	.+10     	; 0x1198 <__mulsf3+0x12>
    118e:	b6 df       	rcall	.-148    	; 0x10fc <__fp_pscB>
    1190:	18 f0       	brcs	.+6      	; 0x1198 <__mulsf3+0x12>
    1192:	95 23       	and	r25, r21
    1194:	09 f0       	breq	.+2      	; 0x1198 <__mulsf3+0x12>
    1196:	a2 cf       	rjmp	.-188    	; 0x10dc <__fp_inf>
    1198:	a7 cf       	rjmp	.-178    	; 0x10e8 <__fp_nan>
    119a:	eb cf       	rjmp	.-42     	; 0x1172 <__fp_szero>

0000119c <__mulsf3x>:
    119c:	c7 df       	rcall	.-114    	; 0x112c <__fp_split3>
    119e:	a8 f3       	brcs	.-22     	; 0x118a <__mulsf3+0x4>

000011a0 <__mulsf3_pse>:
    11a0:	99 23       	and	r25, r25
    11a2:	d9 f3       	breq	.-10     	; 0x119a <__mulsf3+0x14>
    11a4:	55 23       	and	r21, r21
    11a6:	c9 f3       	breq	.-14     	; 0x119a <__mulsf3+0x14>
    11a8:	95 0f       	add	r25, r21
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	55 1f       	adc	r21, r21
    11ae:	aa 27       	eor	r26, r26
    11b0:	ee 27       	eor	r30, r30
    11b2:	ff 27       	eor	r31, r31
    11b4:	bb 27       	eor	r27, r27
    11b6:	00 24       	eor	r0, r0
    11b8:	08 94       	sec
    11ba:	67 95       	ror	r22
    11bc:	20 f4       	brcc	.+8      	; 0x11c6 <__mulsf3_pse+0x26>
    11be:	e2 0f       	add	r30, r18
    11c0:	f3 1f       	adc	r31, r19
    11c2:	b4 1f       	adc	r27, r20
    11c4:	0a 1e       	adc	r0, r26
    11c6:	22 0f       	add	r18, r18
    11c8:	33 1f       	adc	r19, r19
    11ca:	44 1f       	adc	r20, r20
    11cc:	aa 1f       	adc	r26, r26
    11ce:	66 95       	lsr	r22
    11d0:	a9 f7       	brne	.-22     	; 0x11bc <__mulsf3_pse+0x1c>
    11d2:	77 95       	ror	r23
    11d4:	30 f4       	brcc	.+12     	; 0x11e2 <__mulsf3_pse+0x42>
    11d6:	f3 0f       	add	r31, r19
    11d8:	b4 1f       	adc	r27, r20
    11da:	0a 1e       	adc	r0, r26
    11dc:	12 1e       	adc	r1, r18
    11de:	08 f4       	brcc	.+2      	; 0x11e2 <__mulsf3_pse+0x42>
    11e0:	63 95       	inc	r22
    11e2:	33 0f       	add	r19, r19
    11e4:	44 1f       	adc	r20, r20
    11e6:	aa 1f       	adc	r26, r26
    11e8:	22 1f       	adc	r18, r18
    11ea:	76 95       	lsr	r23
    11ec:	99 f7       	brne	.-26     	; 0x11d4 <__mulsf3_pse+0x34>
    11ee:	87 95       	ror	r24
    11f0:	20 f4       	brcc	.+8      	; 0x11fa <__mulsf3_pse+0x5a>
    11f2:	b4 0f       	add	r27, r20
    11f4:	0a 1e       	adc	r0, r26
    11f6:	12 1e       	adc	r1, r18
    11f8:	63 1f       	adc	r22, r19
    11fa:	44 0f       	add	r20, r20
    11fc:	aa 1f       	adc	r26, r26
    11fe:	22 1f       	adc	r18, r18
    1200:	33 1f       	adc	r19, r19
    1202:	86 95       	lsr	r24
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <__mulsf3_pse+0x50>
    1206:	86 2f       	mov	r24, r22
    1208:	71 2d       	mov	r23, r1
    120a:	60 2d       	mov	r22, r0
    120c:	11 24       	eor	r1, r1
    120e:	9f 57       	subi	r25, 0x7F	; 127
    1210:	50 40       	sbci	r21, 0x00	; 0
    1212:	8a f0       	brmi	.+34     	; 0x1236 <__mulsf3_pse+0x96>
    1214:	e1 f0       	breq	.+56     	; 0x124e <__mulsf3_pse+0xae>
    1216:	88 23       	and	r24, r24
    1218:	4a f0       	brmi	.+18     	; 0x122c <__mulsf3_pse+0x8c>
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	bb 1f       	adc	r27, r27
    1220:	66 1f       	adc	r22, r22
    1222:	77 1f       	adc	r23, r23
    1224:	88 1f       	adc	r24, r24
    1226:	91 50       	subi	r25, 0x01	; 1
    1228:	50 40       	sbci	r21, 0x00	; 0
    122a:	a9 f7       	brne	.-22     	; 0x1216 <__mulsf3_pse+0x76>
    122c:	9e 3f       	cpi	r25, 0xFE	; 254
    122e:	51 05       	cpc	r21, r1
    1230:	70 f0       	brcs	.+28     	; 0x124e <__mulsf3_pse+0xae>
    1232:	54 cf       	rjmp	.-344    	; 0x10dc <__fp_inf>
    1234:	9e cf       	rjmp	.-196    	; 0x1172 <__fp_szero>
    1236:	5f 3f       	cpi	r21, 0xFF	; 255
    1238:	ec f3       	brlt	.-6      	; 0x1234 <__mulsf3_pse+0x94>
    123a:	98 3e       	cpi	r25, 0xE8	; 232
    123c:	dc f3       	brlt	.-10     	; 0x1234 <__mulsf3_pse+0x94>
    123e:	86 95       	lsr	r24
    1240:	77 95       	ror	r23
    1242:	67 95       	ror	r22
    1244:	b7 95       	ror	r27
    1246:	f7 95       	ror	r31
    1248:	e7 95       	ror	r30
    124a:	9f 5f       	subi	r25, 0xFF	; 255
    124c:	c1 f7       	brne	.-16     	; 0x123e <__mulsf3_pse+0x9e>
    124e:	fe 2b       	or	r31, r30
    1250:	88 0f       	add	r24, r24
    1252:	91 1d       	adc	r25, r1
    1254:	96 95       	lsr	r25
    1256:	87 95       	ror	r24
    1258:	97 f9       	bld	r25, 7
    125a:	08 95       	ret

0000125c <__divmodhi4>:
    125c:	97 fb       	bst	r25, 7
    125e:	07 2e       	mov	r0, r23
    1260:	16 f4       	brtc	.+4      	; 0x1266 <__divmodhi4+0xa>
    1262:	00 94       	com	r0
    1264:	06 d0       	rcall	.+12     	; 0x1272 <__divmodhi4_neg1>
    1266:	77 fd       	sbrc	r23, 7
    1268:	08 d0       	rcall	.+16     	; 0x127a <__divmodhi4_neg2>
    126a:	49 d0       	rcall	.+146    	; 0x12fe <__udivmodhi4>
    126c:	07 fc       	sbrc	r0, 7
    126e:	05 d0       	rcall	.+10     	; 0x127a <__divmodhi4_neg2>
    1270:	3e f4       	brtc	.+14     	; 0x1280 <__divmodhi4_exit>

00001272 <__divmodhi4_neg1>:
    1272:	90 95       	com	r25
    1274:	81 95       	neg	r24
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	08 95       	ret

0000127a <__divmodhi4_neg2>:
    127a:	70 95       	com	r23
    127c:	61 95       	neg	r22
    127e:	7f 4f       	sbci	r23, 0xFF	; 255

00001280 <__divmodhi4_exit>:
    1280:	08 95       	ret

00001282 <__udivmodsi4>:
    1282:	a1 e2       	ldi	r26, 0x21	; 33
    1284:	1a 2e       	mov	r1, r26
    1286:	aa 1b       	sub	r26, r26
    1288:	bb 1b       	sub	r27, r27
    128a:	fd 01       	movw	r30, r26
    128c:	0d c0       	rjmp	.+26     	; 0x12a8 <__udivmodsi4_ep>

0000128e <__udivmodsi4_loop>:
    128e:	aa 1f       	adc	r26, r26
    1290:	bb 1f       	adc	r27, r27
    1292:	ee 1f       	adc	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	a2 17       	cp	r26, r18
    1298:	b3 07       	cpc	r27, r19
    129a:	e4 07       	cpc	r30, r20
    129c:	f5 07       	cpc	r31, r21
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <__udivmodsi4_ep>
    12a0:	a2 1b       	sub	r26, r18
    12a2:	b3 0b       	sbc	r27, r19
    12a4:	e4 0b       	sbc	r30, r20
    12a6:	f5 0b       	sbc	r31, r21

000012a8 <__udivmodsi4_ep>:
    12a8:	66 1f       	adc	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	1a 94       	dec	r1
    12b2:	69 f7       	brne	.-38     	; 0x128e <__udivmodsi4_loop>
    12b4:	60 95       	com	r22
    12b6:	70 95       	com	r23
    12b8:	80 95       	com	r24
    12ba:	90 95       	com	r25
    12bc:	9b 01       	movw	r18, r22
    12be:	ac 01       	movw	r20, r24
    12c0:	bd 01       	movw	r22, r26
    12c2:	cf 01       	movw	r24, r30
    12c4:	08 95       	ret

000012c6 <__divmodsi4>:
    12c6:	05 2e       	mov	r0, r21
    12c8:	97 fb       	bst	r25, 7
    12ca:	16 f4       	brtc	.+4      	; 0x12d0 <__divmodsi4+0xa>
    12cc:	00 94       	com	r0
    12ce:	0f d0       	rcall	.+30     	; 0x12ee <__negsi2>
    12d0:	57 fd       	sbrc	r21, 7
    12d2:	05 d0       	rcall	.+10     	; 0x12de <__divmodsi4_neg2>
    12d4:	d6 df       	rcall	.-84     	; 0x1282 <__udivmodsi4>
    12d6:	07 fc       	sbrc	r0, 7
    12d8:	02 d0       	rcall	.+4      	; 0x12de <__divmodsi4_neg2>
    12da:	46 f4       	brtc	.+16     	; 0x12ec <__divmodsi4_exit>
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <__negsi2>

000012de <__divmodsi4_neg2>:
    12de:	50 95       	com	r21
    12e0:	40 95       	com	r20
    12e2:	30 95       	com	r19
    12e4:	21 95       	neg	r18
    12e6:	3f 4f       	sbci	r19, 0xFF	; 255
    12e8:	4f 4f       	sbci	r20, 0xFF	; 255
    12ea:	5f 4f       	sbci	r21, 0xFF	; 255

000012ec <__divmodsi4_exit>:
    12ec:	08 95       	ret

000012ee <__negsi2>:
    12ee:	90 95       	com	r25
    12f0:	80 95       	com	r24
    12f2:	70 95       	com	r23
    12f4:	61 95       	neg	r22
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	8f 4f       	sbci	r24, 0xFF	; 255
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	08 95       	ret

000012fe <__udivmodhi4>:
    12fe:	aa 1b       	sub	r26, r26
    1300:	bb 1b       	sub	r27, r27
    1302:	51 e1       	ldi	r21, 0x11	; 17
    1304:	07 c0       	rjmp	.+14     	; 0x1314 <__udivmodhi4_ep>

00001306 <__udivmodhi4_loop>:
    1306:	aa 1f       	adc	r26, r26
    1308:	bb 1f       	adc	r27, r27
    130a:	a6 17       	cp	r26, r22
    130c:	b7 07       	cpc	r27, r23
    130e:	10 f0       	brcs	.+4      	; 0x1314 <__udivmodhi4_ep>
    1310:	a6 1b       	sub	r26, r22
    1312:	b7 0b       	sbc	r27, r23

00001314 <__udivmodhi4_ep>:
    1314:	88 1f       	adc	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	5a 95       	dec	r21
    131a:	a9 f7       	brne	.-22     	; 0x1306 <__udivmodhi4_loop>
    131c:	80 95       	com	r24
    131e:	90 95       	com	r25
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	08 95       	ret

00001326 <eeprom_read_byte>:
    1326:	e1 99       	sbic	0x1c, 1	; 28
    1328:	fe cf       	rjmp	.-4      	; 0x1326 <eeprom_read_byte>
    132a:	9f bb       	out	0x1f, r25	; 31
    132c:	8e bb       	out	0x1e, r24	; 30
    132e:	e0 9a       	sbi	0x1c, 0	; 28
    1330:	99 27       	eor	r25, r25
    1332:	8d b3       	in	r24, 0x1d	; 29
    1334:	08 95       	ret

00001336 <eeprom_write_byte>:
    1336:	26 2f       	mov	r18, r22

00001338 <eeprom_write_r18>:
    1338:	e1 99       	sbic	0x1c, 1	; 28
    133a:	fe cf       	rjmp	.-4      	; 0x1338 <eeprom_write_r18>
    133c:	1c ba       	out	0x1c, r1	; 28
    133e:	9f bb       	out	0x1f, r25	; 31
    1340:	8e bb       	out	0x1e, r24	; 30
    1342:	2d bb       	out	0x1d, r18	; 29
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	e2 9a       	sbi	0x1c, 2	; 28
    134a:	e1 9a       	sbi	0x1c, 1	; 28
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	08 95       	ret

00001352 <_exit>:
    1352:	f8 94       	cli

00001354 <__stop_program>:
    1354:	ff cf       	rjmp	.-2      	; 0x1354 <__stop_program>
