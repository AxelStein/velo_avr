
Velo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001780  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00001780  00001834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  0080009e  0080009e  00001872  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00001872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001873  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000190  00000000  00000000  000018e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d2e  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ab7  00000000  00000000  0000379e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ed7  00000000  00000000  00004255  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000440  00000000  00000000  0000512c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000071a  00000000  00000000  0000556c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015a1  00000000  00000000  00005c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  00007227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	16 c3       	rjmp	.+1580   	; 0x62e <__ctors_end>
       2:	30 c3       	rjmp	.+1632   	; 0x664 <__bad_interrupt>
       4:	2f c3       	rjmp	.+1630   	; 0x664 <__bad_interrupt>
       6:	2e c3       	rjmp	.+1628   	; 0x664 <__bad_interrupt>
       8:	2d c3       	rjmp	.+1626   	; 0x664 <__bad_interrupt>
       a:	2c c3       	rjmp	.+1624   	; 0x664 <__bad_interrupt>
       c:	2b c3       	rjmp	.+1622   	; 0x664 <__bad_interrupt>
       e:	2a c3       	rjmp	.+1620   	; 0x664 <__bad_interrupt>
      10:	29 c3       	rjmp	.+1618   	; 0x664 <__bad_interrupt>
      12:	28 c3       	rjmp	.+1616   	; 0x664 <__bad_interrupt>
      14:	36 c3       	rjmp	.+1644   	; 0x682 <__vector_10>
      16:	26 c3       	rjmp	.+1612   	; 0x664 <__bad_interrupt>
      18:	25 c3       	rjmp	.+1610   	; 0x664 <__bad_interrupt>
      1a:	24 c3       	rjmp	.+1608   	; 0x664 <__bad_interrupt>
      1c:	23 c3       	rjmp	.+1606   	; 0x664 <__bad_interrupt>

0000001e <__trampolines_end>:
      1e:	ae d5       	rcall	.+2908   	; 0xb7c <calc_speed+0xa6>
      20:	f0 a8       	ldd	r15, Z+48	; 0x30
      22:	3f d3       	rcall	.+1662   	; 0x6a2 <__vector_10+0x20>
      24:	00 40       	sbci	r16, 0x00	; 0
      26:	8d 14       	cp	r8, r13
      28:	20 00       	.word	0x0020	; ????
      2a:	a1 c8       	rjmp	.-3774   	; 0xfffff16e <__eeprom_end+0xff7ef16d>
      2c:	da 12       	cpse	r13, r26
      2e:	81 3f       	cpi	r24, 0xF1	; 241
      30:	d9 22       	and	r13, r25
      32:	db 20       	and	r13, r11
      34:	a4 a6       	std	Z+44, r10	; 0x2c
      36:	2e af       	std	Y+62, r18	; 0x3e
      38:	22 00       	.word	0x0022	; ????
      3a:	3f 21       	and	r19, r15
      3c:	00 7f       	andi	r16, 0xF0	; 240

0000003e <ssd1306xled_font8x16data>:
	...
      4e:	00 00 00 f8 00 00 00 00 00 00 00 33 30 00 00 00     ...........30...
      5e:	00 10 0c 06 10 0c 06 00 00 00 00 00 00 00 00 00     ................
      6e:	40 c0 78 40 c0 78 40 00 04 3f 04 04 3f 04 04 00     @.x@.x@..?..?...
      7e:	00 70 88 fc 08 30 00 00 00 18 20 ff 21 1e 00 00     .p...0.... .!...
      8e:	f0 08 f0 00 e0 18 00 00 00 21 1c 03 1e 21 1e 00     .........!...!..
      9e:	00 f0 08 88 70 00 00 00 1e 21 23 24 19 27 21 10     ....p....!#$.'!.
      ae:	10 16 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
      be:	00 00 00 e0 18 04 02 00 00 00 00 07 18 20 40 00     ............. @.
      ce:	00 02 04 18 e0 00 00 00 00 40 20 18 07 00 00 00     .........@ .....
      de:	40 40 80 f0 80 40 40 00 02 02 01 0f 01 02 02 00     @@...@@.........
      ee:	00 00 00 f0 00 00 00 00 01 01 01 1f 01 01 01 00     ................
	...
     106:	80 b0 70 00 00 00 00 00 00 00 00 00 00 00 00 00     ..p.............
     116:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     126:	00 30 30 00 00 00 00 00 00 00 00 00 80 60 18 04     .00..........`..
     136:	00 60 18 06 01 00 00 00 00 e0 10 08 08 10 e0 00     .`..............
     146:	00 0f 10 20 20 10 0f 00 00 10 10 f8 00 00 00 00     ...  ...........
     156:	00 20 20 3f 20 20 00 00 00 70 08 08 08 88 70 00     .  ?  ...p....p.
     166:	00 30 28 24 22 21 30 00 00 30 08 88 88 48 30 00     .0($"!0..0...H0.
     176:	00 18 20 20 20 11 0e 00 00 00 c0 20 10 f8 00 00     ..   ...... ....
     186:	00 07 04 24 24 3f 24 00 00 f8 08 88 88 08 08 00     ...$$?$.........
     196:	00 19 21 20 20 11 0e 00 00 e0 10 88 88 18 00 00     ..!  ...........
     1a6:	00 0f 11 20 20 11 0e 00 00 38 08 08 c8 38 08 00     ...  ....8...8..
     1b6:	00 00 00 3f 00 00 00 00 00 70 88 08 08 88 70 00     ...?.....p....p.
     1c6:	00 1c 22 21 21 22 1c 00 00 e0 10 08 08 10 e0 00     .."!!"..........
     1d6:	00 00 31 22 22 11 0f 00 00 00 00 c0 c0 00 00 00     ..1""...........
     1e6:	00 00 00 30 30 00 00 00 00 00 00 80 00 00 00 00     ...00...........
     1f6:	00 00 80 60 00 00 00 00 00 00 80 40 20 10 08 00     ...`.......@ ...
     206:	00 01 02 04 08 10 20 00 40 40 40 40 40 40 40 00     ...... .@@@@@@@.
     216:	04 04 04 04 04 04 04 00 00 08 10 20 40 80 00 00     ........... @...
     226:	00 20 10 08 04 02 01 00 00 70 48 08 08 08 f0 00     . .......pH.....
     236:	00 00 00 30 36 01 00 00 c0 30 c8 28 e8 10 e0 00     ...06....0.(....
     246:	07 18 27 24 23 14 0b 00 00 00 c0 38 e0 00 00 00     ..'$#......8....
     256:	20 3c 23 02 02 27 38 20 08 f8 88 88 88 70 00 00      <#..'8 .....p..
     266:	20 3f 20 20 20 11 0e 00 c0 30 08 08 08 08 38 00      ?   ....0....8.
     276:	07 18 20 20 20 10 08 00 08 f8 08 08 08 10 e0 00     ..   ...........
     286:	20 3f 20 20 20 10 0f 00 08 f8 88 88 e8 08 10 00      ?   ...........
     296:	20 3f 20 20 23 20 18 00 08 f8 88 88 e8 08 10 00      ?  # ..........
     2a6:	20 3f 20 00 03 00 00 00 c0 30 08 08 08 38 00 00      ? ......0...8..
     2b6:	07 18 20 20 22 1e 02 00 08 f8 08 00 00 08 f8 08     ..  "...........
     2c6:	20 3f 21 01 01 21 3f 20 00 08 08 f8 08 08 00 00      ?!..!? ........
     2d6:	00 20 20 3f 20 20 00 00 00 00 08 08 f8 08 08 00     .  ?  ..........
     2e6:	c0 80 80 80 7f 00 00 00 08 f8 88 c0 28 18 08 00     ............(...
     2f6:	20 3f 20 01 26 38 20 00 08 f8 08 00 00 00 00 00      ? .&8 .........
     306:	20 3f 20 20 20 20 30 00 08 f8 f8 00 f8 f8 08 00      ?    0.........
     316:	20 3f 00 3f 00 3f 20 00 08 f8 30 c0 00 08 f8 08      ?.?.? ...0.....
     326:	20 3f 20 00 07 18 3f 00 e0 10 08 08 08 10 e0 00      ? ...?.........
     336:	0f 10 20 20 20 10 0f 00 08 f8 08 08 08 08 f0 00     ..   ...........
     346:	20 3f 21 01 01 01 00 00 e0 10 08 08 08 10 e0 00      ?!.............
     356:	0f 18 24 24 38 50 4f 00 08 f8 88 88 88 88 70 00     ..$$8PO.......p.
     366:	20 3f 20 00 03 0c 30 20 00 70 88 08 08 08 38 00      ? ...0 .p....8.
     376:	00 38 20 21 21 22 1c 00 18 08 08 f8 08 08 18 00     .8 !!"..........
     386:	00 00 20 3f 20 00 00 00 08 f8 08 00 00 08 f8 08     .. ? ...........
     396:	00 1f 20 20 20 20 1f 00 08 78 88 00 00 c8 38 08     ..    ...x....8.
     3a6:	00 00 07 38 0e 01 00 00 f8 08 00 f8 00 08 f8 00     ...8............
     3b6:	03 3c 07 00 07 3c 03 00 08 18 68 80 80 68 18 08     .<...<....h..h..
     3c6:	20 30 2c 03 03 2c 30 20 08 38 c8 00 c8 38 08 00      0,..,0 .8...8..
     3d6:	00 00 20 3f 20 00 00 00 10 08 08 08 c8 38 08 00     .. ? ........8..
     3e6:	20 38 26 21 20 20 18 00 00 00 00 fe 02 02 02 00      8&!  ..........
     3f6:	00 00 00 7f 40 40 40 00 00 0c 30 c0 00 00 00 00     ....@@@...0.....
     406:	00 00 00 01 06 38 c0 00 00 02 02 02 fe 00 00 00     .....8..........
     416:	00 40 40 40 7f 00 00 00 00 00 04 02 02 02 04 00     .@@@............
	...
     436:	80 80 80 80 80 80 80 80 00 02 02 04 00 00 00 00     ................
	...
     44e:	00 00 80 80 80 80 00 00 00 19 24 22 22 22 3f 20     ..........$"""? 
     45e:	08 f8 00 80 80 00 00 00 00 3f 11 20 20 11 0e 00     .........?.  ...
     46e:	00 00 00 80 80 80 00 00 00 0e 11 20 20 20 11 00     ...........   ..
     47e:	00 00 00 80 80 88 f8 00 00 0e 11 20 20 10 3f 20     ...........  .? 
     48e:	00 00 80 80 80 80 00 00 00 1f 22 22 22 22 13 00     ..........""""..
     49e:	00 80 80 f0 88 88 88 18 00 20 20 3f 20 20 00 00     .........  ?  ..
     4ae:	00 00 80 80 80 80 80 00 00 6b 94 94 94 93 60 00     .........k....`.
     4be:	08 f8 00 80 80 80 00 00 20 3f 21 00 00 20 3f 20     ........ ?!.. ? 
     4ce:	00 80 98 98 00 00 00 00 00 20 20 3f 20 20 00 00     .........  ?  ..
     4de:	00 00 00 80 98 98 00 00 00 c0 80 80 80 7f 00 00     ................
     4ee:	08 f8 00 00 80 80 80 00 20 3f 24 02 2d 30 20 00     ........ ?$.-0 .
     4fe:	00 08 08 f8 00 00 00 00 00 20 20 3f 20 20 00 00     .........  ?  ..
     50e:	80 80 80 80 80 80 80 00 20 3f 20 00 3f 20 00 3f     ........ ? .? .?
     51e:	80 80 00 80 80 80 00 00 20 3f 21 00 00 20 3f 20     ........ ?!.. ? 
     52e:	00 00 80 80 80 80 00 00 00 1f 20 20 20 20 1f 00     ..........    ..
     53e:	80 80 00 80 80 00 00 00 80 ff a1 20 20 11 0e 00     ...........  ...
     54e:	00 00 00 80 80 80 80 00 00 0e 11 20 20 a0 ff 80     ...........  ...
     55e:	80 80 80 00 80 80 80 00 20 20 3f 21 20 00 01 00     ........  ?! ...
     56e:	00 00 80 80 80 80 80 00 00 33 24 24 24 24 19 00     .........3$$$$..
     57e:	00 80 80 e0 80 80 00 00 00 00 00 1f 20 20 00 00     ............  ..
     58e:	80 80 00 00 00 80 80 00 00 1f 20 20 20 10 3f 20     ..........   .? 
     59e:	80 80 80 00 00 80 80 80 00 01 0e 30 08 06 01 00     ...........0....
     5ae:	80 80 00 80 00 80 80 80 0f 30 0c 03 0c 30 0f 00     .........0...0..
     5be:	00 80 80 00 80 80 80 00 00 20 31 2e 0e 31 20 00     ......... 1..1 .
     5ce:	80 80 80 00 00 80 80 80 80 81 8e 70 18 06 01 00     ...........p....
     5de:	00 80 80 80 80 80 80 00 00 21 30 2c 22 21 30 00     .........!0,"!0.
     5ee:	00 00 00 00 80 7c 02 02 00 00 00 00 00 3f 40 40     .....|.......?@@
     5fe:	00 00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00     ................
     60e:	00 02 02 7c 80 00 00 00 00 40 40 3f 00 00 00 00     ...|.....@@?....
     61e:	00 06 01 01 02 02 04 04 00 00 00 00 00 00 00 00     ................

0000062e <__ctors_end>:
     62e:	11 24       	eor	r1, r1
     630:	1f be       	out	0x3f, r1	; 63
     632:	cf e5       	ldi	r28, 0x5F	; 95
     634:	d2 e0       	ldi	r29, 0x02	; 2
     636:	de bf       	out	0x3e, r29	; 62
     638:	cd bf       	out	0x3d, r28	; 61

0000063a <__do_copy_data>:
     63a:	10 e0       	ldi	r17, 0x00	; 0
     63c:	a0 e6       	ldi	r26, 0x60	; 96
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	e0 e8       	ldi	r30, 0x80	; 128
     642:	f7 e1       	ldi	r31, 0x17	; 23
     644:	02 c0       	rjmp	.+4      	; 0x64a <__do_copy_data+0x10>
     646:	05 90       	lpm	r0, Z+
     648:	0d 92       	st	X+, r0
     64a:	ae 39       	cpi	r26, 0x9E	; 158
     64c:	b1 07       	cpc	r27, r17
     64e:	d9 f7       	brne	.-10     	; 0x646 <__do_copy_data+0xc>

00000650 <__do_clear_bss>:
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	ae e9       	ldi	r26, 0x9E	; 158
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	01 c0       	rjmp	.+2      	; 0x65a <.do_clear_bss_start>

00000658 <.do_clear_bss_loop>:
     658:	1d 92       	st	X+, r1

0000065a <.do_clear_bss_start>:
     65a:	a7 3f       	cpi	r26, 0xF7	; 247
     65c:	b2 07       	cpc	r27, r18
     65e:	e1 f7       	brne	.-8      	; 0x658 <.do_clear_bss_loop>
     660:	b2 d2       	rcall	.+1380   	; 0xbc6 <main>
     662:	8c c8       	rjmp	.-3816   	; 0xfffff77c <__eeprom_end+0xff7ef77b>

00000664 <__bad_interrupt>:
     664:	cd cc       	rjmp	.-1638   	; 0x0 <__vectors>

00000666 <start_millis_timer>:
		}
    }
}

void start_millis_timer() {
	cli();
     666:	f8 94       	cli
	
	// set timer0 CTC mode
	TCCR0A |= _BV(WGM01);
     668:	8a b5       	in	r24, 0x2a	; 42
     66a:	82 60       	ori	r24, 0x02	; 2
     66c:	8a bd       	out	0x2a, r24	; 42
	
	// set timer0 compare value
	OCR0A = 130; // 125
     66e:	82 e8       	ldi	r24, 0x82	; 130
     670:	89 bd       	out	0x29, r24	; 41
	
	// set timer0 prescaler 64
	TCCR0B |= _BV(CS00) | _BV(CS01);
     672:	83 b7       	in	r24, 0x33	; 51
     674:	83 60       	ori	r24, 0x03	; 3
     676:	83 bf       	out	0x33, r24	; 51
	
	// enable interrupt
	TIMSK |= _BV(OCIE0A);
     678:	89 b7       	in	r24, 0x39	; 57
     67a:	80 61       	ori	r24, 0x10	; 16
     67c:	89 bf       	out	0x39, r24	; 57
	
	sei();
     67e:	78 94       	sei
     680:	08 95       	ret

00000682 <__vector_10>:
}

ISR(TIMER0_COMPA_vect) {
     682:	1f 92       	push	r1
     684:	0f 92       	push	r0
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	0f 92       	push	r0
     68a:	11 24       	eor	r1, r1
     68c:	8f 93       	push	r24
     68e:	9f 93       	push	r25
     690:	af 93       	push	r26
     692:	bf 93       	push	r27
	ms++;
     694:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <ms>
     698:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <ms+0x1>
     69c:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <ms+0x2>
     6a0:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <ms+0x3>
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	a1 1d       	adc	r26, r1
     6a8:	b1 1d       	adc	r27, r1
     6aa:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <ms>
     6ae:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <ms+0x1>
     6b2:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <ms+0x2>
     6b6:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <ms+0x3>
}
     6ba:	bf 91       	pop	r27
     6bc:	af 91       	pop	r26
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	0f 90       	pop	r0
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0f 90       	pop	r0
     6c8:	1f 90       	pop	r1
     6ca:	18 95       	reti

000006cc <millis>:

uint32_t millis() {
	uint32_t copy;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     6cc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6ce:	f8 94       	cli
		copy = ms;
     6d0:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <ms>
     6d4:	70 91 ab 00 	lds	r23, 0x00AB	; 0x8000ab <ms+0x1>
     6d8:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <ms+0x2>
     6dc:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <ms+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6e0:	2f bf       	out	0x3f, r18	; 63
	}
	
	return copy;
}
     6e2:	08 95       	ret

000006e4 <set_wheel_diameter>:
	}
	wheel_length = (diameter * 3.14) / 100000.0;
}

void set_wheel_diameter(uint8_t diameter) {
	if (diameter > 0 && diameter < 0xFF) {
     6e4:	9f ef       	ldi	r25, 0xFF	; 255
     6e6:	98 0f       	add	r25, r24
     6e8:	9e 3f       	cpi	r25, 0xFE	; 254
     6ea:	20 f4       	brcc	.+8      	; 0x6f4 <set_wheel_diameter+0x10>
     6ec:	68 2f       	mov	r22, r24
		eeprom_write_byte(&EEPROM_WHEEL_DIAMETER, diameter);
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	36 d8       	rcall	.-3988   	; 0xfffff760 <__eeprom_end+0xff7ef75f>
     6f4:	08 95       	ret

000006f6 <calc_wheel_length>:
	
	return copy;
}

void calc_wheel_length() {
	uint8_t diameter = eeprom_read_byte(&EEPROM_WHEEL_DIAMETER); // cm
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	2a d8       	rcall	.-4012   	; 0xfffff750 <__eeprom_end+0xff7ef74f>
	if (diameter == 0xFF) {
     6fc:	8f 3f       	cpi	r24, 0xFF	; 255
     6fe:	19 f4       	brne	.+6      	; 0x706 <calc_wheel_length+0x10>
		diameter = 64; // default
		set_wheel_diameter(diameter);
     700:	80 e4       	ldi	r24, 0x40	; 64
     702:	f0 df       	rcall	.-32     	; 0x6e4 <set_wheel_diameter>
}

void calc_wheel_length() {
	uint8_t diameter = eeprom_read_byte(&EEPROM_WHEEL_DIAMETER); // cm
	if (diameter == 0xFF) {
		diameter = 64; // default
     704:	80 e4       	ldi	r24, 0x40	; 64
		set_wheel_diameter(diameter);
	}
	wheel_length = (diameter * 3.14) / 100000.0;
     706:	68 2f       	mov	r22, r24
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9c d6       	rcall	.+3384   	; 0x1448 <__floatsisf>
     710:	23 ec       	ldi	r18, 0xC3	; 195
     712:	35 ef       	ldi	r19, 0xF5	; 245
     714:	48 e4       	ldi	r20, 0x48	; 72
     716:	50 e4       	ldi	r21, 0x40	; 64
     718:	4b d7       	rcall	.+3734   	; 0x15b0 <__mulsf3>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e5       	ldi	r19, 0x50	; 80
     71e:	43 ec       	ldi	r20, 0xC3	; 195
     720:	57 e4       	ldi	r21, 0x47	; 71
     722:	f7 d5       	rcall	.+3054   	; 0x1312 <__divsf3>
     724:	60 93 b5 00 	sts	0x00B5, r22	; 0x8000b5 <wheel_length>
     728:	70 93 b6 00 	sts	0x00B6, r23	; 0x8000b6 <wheel_length+0x1>
     72c:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <wheel_length+0x2>
     730:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <wheel_length+0x3>
     734:	08 95       	ret

00000736 <turn_display>:
		eeprom_write_byte(&EEPROM_WHEEL_DIAMETER, diameter);
	}
}

void turn_display(bool on) {
	display_turned = on;
     736:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <display_turned>
	ssd1306_turn_display(on);
     73a:	f1 d3       	rcall	.+2018   	; 0xf1e <ssd1306_turn_display>
     73c:	08 95       	ret

0000073e <switch_display_menu>:
}

void switch_display_menu() {
	ssd1306_clear();
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	c9 d3       	rcall	.+1938   	; 0xeda <ssd1306_fill4>
	display_menu++;
     748:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <display_menu>
     74c:	8f 5f       	subi	r24, 0xFF	; 255
	if (display_menu == 4) {
     74e:	84 30       	cpi	r24, 0x04	; 4
     750:	19 f0       	breq	.+6      	; 0x758 <switch_display_menu+0x1a>
	ssd1306_turn_display(on);
}

void switch_display_menu() {
	ssd1306_clear();
	display_menu++;
     752:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <display_menu>
     756:	08 95       	ret
	if (display_menu == 4) {
		display_menu = 0;
     758:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <display_menu>
     75c:	08 95       	ret

0000075e <display_update>:
	}
}

void display_update() {
     75e:	8f 92       	push	r8
     760:	9f 92       	push	r9
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
	switch(display_menu) {
     76e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <display_menu>
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	09 f4       	brne	.+2      	; 0x778 <display_update+0x1a>
     776:	3f c0       	rjmp	.+126    	; 0x7f6 <display_update+0x98>
     778:	38 f0       	brcs	.+14     	; 0x788 <display_update+0x2a>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	09 f4       	brne	.+2      	; 0x780 <display_update+0x22>
     77e:	64 c0       	rjmp	.+200    	; 0x848 <display_update+0xea>
     780:	83 30       	cpi	r24, 0x03	; 3
     782:	09 f4       	brne	.+2      	; 0x786 <display_update+0x28>
     784:	9e c0       	rjmp	.+316    	; 0x8c2 <display_update+0x164>
     786:	b0 c0       	rjmp	.+352    	; 0x8e8 <display_update+0x18a>
		case MENU_MAIN:
			ssd1306_set_pos(0, 0);
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	8d d3       	rcall	.+1818   	; 0xea8 <ssd1306_set_pos>
			ssd1306tx_string("s: ");
     78e:	8f e8       	ldi	r24, 0x8F	; 143
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	14 d4       	rcall	.+2088   	; 0xfbc <ssd1306tx_string>
			ssd1306tx_float(speed, 1);
     794:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <speed>
     798:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <speed+0x1>
     79c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <speed+0x2>
     7a0:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <speed+0x3>
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	10 d5       	rcall	.+2592   	; 0x11ca <ssd1306tx_float>
			ssd1306tx_string(" km/h   ");
     7aa:	88 e6       	ldi	r24, 0x68	; 104
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	06 d4       	rcall	.+2060   	; 0xfbc <ssd1306tx_string>

			ssd1306_set_pos(0, 2);
     7b0:	62 e0       	ldi	r22, 0x02	; 2
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	79 d3       	rcall	.+1778   	; 0xea8 <ssd1306_set_pos>
			ssd1306tx_string("d: ");
     7b6:	81 e7       	ldi	r24, 0x71	; 113
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	00 d4       	rcall	.+2048   	; 0xfbc <ssd1306tx_string>
			ssd1306tx_float(distance, 2);
     7bc:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <distance>
     7c0:	70 91 ba 00 	lds	r23, 0x00BA	; 0x8000ba <distance+0x1>
     7c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <distance+0x2>
     7c8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <distance+0x3>
     7cc:	42 e0       	ldi	r20, 0x02	; 2
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	fc d4       	rcall	.+2552   	; 0x11ca <ssd1306tx_float>
			ssd1306tx_string(" km   ");
     7d2:	85 e7       	ldi	r24, 0x75	; 117
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	f2 d3       	rcall	.+2020   	; 0xfbc <ssd1306tx_string>
			
			ssd1306_set_pos(0, 4);
     7d8:	64 e0       	ldi	r22, 0x04	; 4
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	65 d3       	rcall	.+1738   	; 0xea8 <ssd1306_set_pos>
			ssd1306tx_string("rpm: ");
     7de:	8c e7       	ldi	r24, 0x7C	; 124
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	ec d3       	rcall	.+2008   	; 0xfbc <ssd1306tx_string>
			ssd1306tx_int(wheel_rpm);
     7e4:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <wheel_rpm>
     7e8:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <wheel_rpm+0x1>
     7ec:	75 d4       	rcall	.+2282   	; 0x10d8 <ssd1306tx_int>
			ssd1306tx_string("   ");
     7ee:	8d e6       	ldi	r24, 0x6D	; 109
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	e4 d3       	rcall	.+1992   	; 0xfbc <ssd1306tx_string>
			break;
     7f4:	79 c0       	rjmp	.+242    	; 0x8e8 <display_update+0x18a>
		
		case MENU_SPEED:
			ssd1306_set_pos(0, 0);
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	56 d3       	rcall	.+1708   	; 0xea8 <ssd1306_set_pos>
			ssd1306tx_string("ms: ");
     7fc:	82 e8       	ldi	r24, 0x82	; 130
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	dd d3       	rcall	.+1978   	; 0xfbc <ssd1306tx_string>
			ssd1306tx_float(max_speed, 1);
     802:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <max_speed>
     806:	70 91 b0 00 	lds	r23, 0x00B0	; 0x8000b0 <max_speed+0x1>
     80a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <max_speed+0x2>
     80e:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <max_speed+0x3>
     812:	41 e0       	ldi	r20, 0x01	; 1
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	d9 d4       	rcall	.+2482   	; 0x11ca <ssd1306tx_float>
			ssd1306tx_string(" km/h ");
     818:	87 e8       	ldi	r24, 0x87	; 135
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	cf d3       	rcall	.+1950   	; 0xfbc <ssd1306tx_string>

			ssd1306_set_pos(0, 2);
     81e:	62 e0       	ldi	r22, 0x02	; 2
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	42 d3       	rcall	.+1668   	; 0xea8 <ssd1306_set_pos>
			ssd1306tx_string("as: ");
     824:	8e e8       	ldi	r24, 0x8E	; 142
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	c9 d3       	rcall	.+1938   	; 0xfbc <ssd1306tx_string>
			ssd1306tx_float(avg_speed, 1);
     82a:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <avg_speed>
     82e:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <avg_speed+0x1>
     832:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <avg_speed+0x2>
     836:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <avg_speed+0x3>
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	c5 d4       	rcall	.+2442   	; 0x11ca <ssd1306tx_float>
			ssd1306tx_string(" km/h ");
     840:	87 e8       	ldi	r24, 0x87	; 135
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	bb d3       	rcall	.+1910   	; 0xfbc <ssd1306tx_string>
			break;
     846:	50 c0       	rjmp	.+160    	; 0x8e8 <display_update+0x18a>

		case MENU_TIME: {
			uint32_t now = millis();
     848:	41 df       	rcall	.-382    	; 0x6cc <millis>
     84a:	6b 01       	movw	r12, r22
     84c:	7c 01       	movw	r14, r24
			uint32_t sec = now / 1000ul;
			int hours = (sec / 3600ul);
			int minutes = (sec % 3600ul) / 60ul;
     84e:	28 ee       	ldi	r18, 0xE8	; 232
     850:	33 e0       	ldi	r19, 0x03	; 3
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	2a d7       	rcall	.+3668   	; 0x16ac <__udivmodsi4>
     858:	ca 01       	movw	r24, r20
     85a:	b9 01       	movw	r22, r18
     85c:	20 e1       	ldi	r18, 0x10	; 16
     85e:	3e e0       	ldi	r19, 0x0E	; 14
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	23 d7       	rcall	.+3654   	; 0x16ac <__udivmodsi4>
     866:	4b 01       	movw	r8, r22
     868:	5c 01       	movw	r10, r24
			int seconds = (sec % 3600ul) % 60ul;
			
			ssd1306_set_pos(0, 0);
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	1c d3       	rcall	.+1592   	; 0xea8 <ssd1306_set_pos>
			ssd1306tx_string("time:");
     870:	83 e9       	ldi	r24, 0x93	; 147
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	a3 d3       	rcall	.+1862   	; 0xfbc <ssd1306tx_string>
			
			ssd1306_set_pos(0, 2);
     876:	62 e0       	ldi	r22, 0x02	; 2
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	16 d3       	rcall	.+1580   	; 0xea8 <ssd1306_set_pos>
			ssd1306tx_int_p(hours, 2);
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	20 e8       	ldi	r18, 0x80	; 128
     882:	3e ee       	ldi	r19, 0xEE	; 238
     884:	46 e3       	ldi	r20, 0x36	; 54
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	11 d7       	rcall	.+3618   	; 0x16ac <__udivmodsi4>
     88a:	62 e0       	ldi	r22, 0x02	; 2
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	c9 01       	movw	r24, r18
     890:	09 d4       	rcall	.+2066   	; 0x10a4 <ssd1306tx_int_p>
			ssd1306tx_string(":");
     892:	8c e9       	ldi	r24, 0x9C	; 156
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	92 d3       	rcall	.+1828   	; 0xfbc <ssd1306tx_string>
			
			ssd1306tx_int_p(minutes, 2);
     898:	c5 01       	movw	r24, r10
     89a:	b4 01       	movw	r22, r8
     89c:	2c e3       	ldi	r18, 0x3C	; 60
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	03 d7       	rcall	.+3590   	; 0x16ac <__udivmodsi4>
     8a6:	6b 01       	movw	r12, r22
     8a8:	7c 01       	movw	r14, r24
     8aa:	62 e0       	ldi	r22, 0x02	; 2
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	c9 01       	movw	r24, r18
     8b0:	f9 d3       	rcall	.+2034   	; 0x10a4 <ssd1306tx_int_p>
			ssd1306tx_string(":");
     8b2:	8c e9       	ldi	r24, 0x9C	; 156
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	82 d3       	rcall	.+1796   	; 0xfbc <ssd1306tx_string>
			
			ssd1306tx_int_p(seconds, 2);
     8b8:	62 e0       	ldi	r22, 0x02	; 2
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	c6 01       	movw	r24, r12
     8be:	f2 d3       	rcall	.+2020   	; 0x10a4 <ssd1306tx_int_p>
			break;
     8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <display_update+0x18a>
		}
		
		case MENU_LED:
			ssd1306_set_pos(0, 0);
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	f0 d2       	rcall	.+1504   	; 0xea8 <ssd1306_set_pos>
			ssd1306tx_string("led:");
     8c8:	89 e9       	ldi	r24, 0x99	; 153
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	77 d3       	rcall	.+1774   	; 0xfbc <ssd1306tx_string>

			ssd1306_set_pos(0, 2);
     8ce:	62 e0       	ldi	r22, 0x02	; 2
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	ea d2       	rcall	.+1492   	; 0xea8 <ssd1306_set_pos>
			ssd1306tx_string(led_turned ? "on " : "off");
     8d4:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <led_turned>
     8d8:	81 11       	cpse	r24, r1
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <display_update+0x184>
     8dc:	84 e6       	ldi	r24, 0x64	; 100
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <display_update+0x188>
     8e2:	80 e6       	ldi	r24, 0x60	; 96
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	6a d3       	rcall	.+1748   	; 0xfbc <ssd1306tx_string>
			break;
	}
}
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	df 90       	pop	r13
     8ee:	cf 90       	pop	r12
     8f0:	bf 90       	pop	r11
     8f2:	af 90       	pop	r10
     8f4:	9f 90       	pop	r9
     8f6:	8f 90       	pop	r8
     8f8:	08 95       	ret

000008fa <turn_led>:

void turn_led(bool on) {
	led_turned = on;
     8fa:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <led_turned>
	// turn off led
	PORTB &= ~_BV(LED_PIN);
     8fe:	c4 98       	cbi	0x18, 4	; 24
     900:	08 95       	ret

00000902 <handle_btn_click>:
}

void handle_btn_click(uint8_t pin_state, uint32_t timer_now) {
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	6a 01       	movw	r12, r20
     90c:	7b 01       	movw	r14, r22
	// click start
	if (!btn_pressed && !pin_state) {
     90e:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <btn_pressed>
     912:	91 11       	cpse	r25, r1
     914:	5f c0       	rjmp	.+190    	; 0x9d4 <handle_btn_click+0xd2>
     916:	81 11       	cpse	r24, r1
     918:	60 c0       	rjmp	.+192    	; 0x9da <handle_btn_click+0xd8>
		btn_pressed = true;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <btn_pressed>
		btn_timer = timer_now;
     920:	40 93 e4 00 	sts	0x00E4, r20	; 0x8000e4 <btn_timer>
     924:	50 93 e5 00 	sts	0x00E5, r21	; 0x8000e5 <btn_timer+0x1>
     928:	60 93 e6 00 	sts	0x00E6, r22	; 0x8000e6 <btn_timer+0x2>
     92c:	70 93 e7 00 	sts	0x00E7, r23	; 0x8000e7 <btn_timer+0x3>
     930:	26 c0       	rjmp	.+76     	; 0x97e <handle_btn_click+0x7c>
	}
	
	// handle single button click
	if (btn_pressed && pin_state) {
		btn_pressed = false;
     932:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <btn_pressed>
		if (!btn_long_pressed && display_turned && timer_now - btn_timer >= 50) { // single press
     936:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <btn_long_pressed>
     93a:	81 11       	cpse	r24, r1
     93c:	19 c0       	rjmp	.+50     	; 0x970 <handle_btn_click+0x6e>
     93e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <display_turned>
     942:	88 23       	and	r24, r24
     944:	a9 f0       	breq	.+42     	; 0x970 <handle_btn_click+0x6e>
     946:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <btn_timer>
     94a:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <btn_timer+0x1>
     94e:	a0 91 e6 00 	lds	r26, 0x00E6	; 0x8000e6 <btn_timer+0x2>
     952:	b0 91 e7 00 	lds	r27, 0x00E7	; 0x8000e7 <btn_timer+0x3>
     956:	a7 01       	movw	r20, r14
     958:	96 01       	movw	r18, r12
     95a:	28 1b       	sub	r18, r24
     95c:	39 0b       	sbc	r19, r25
     95e:	4a 0b       	sbc	r20, r26
     960:	5b 0b       	sbc	r21, r27
     962:	22 33       	cpi	r18, 0x32	; 50
     964:	31 05       	cpc	r19, r1
     966:	41 05       	cpc	r20, r1
     968:	51 05       	cpc	r21, r1
     96a:	10 f0       	brcs	.+4      	; 0x970 <handle_btn_click+0x6e>
			switch_display_menu();
     96c:	e8 de       	rcall	.-560    	; 0x73e <switch_display_menu>
			display_update();
     96e:	f7 de       	rcall	.-530    	; 0x75e <display_update>
		}
		btn_long_pressed = false;
     970:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <btn_long_pressed>
	}
	
	// handle long button click
	if (btn_pressed && !btn_long_pressed && ((timer_now - btn_timer) >= LONG_PRESS_TIME)) {
     974:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <btn_pressed>
     978:	81 11       	cpse	r24, r1
     97a:	05 c0       	rjmp	.+10     	; 0x986 <handle_btn_click+0x84>
     97c:	2e c0       	rjmp	.+92     	; 0x9da <handle_btn_click+0xd8>
     97e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <btn_long_pressed>
     982:	81 11       	cpse	r24, r1
     984:	2a c0       	rjmp	.+84     	; 0x9da <handle_btn_click+0xd8>
     986:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <btn_timer>
     98a:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <btn_timer+0x1>
     98e:	a0 91 e6 00 	lds	r26, 0x00E6	; 0x8000e6 <btn_timer+0x2>
     992:	b0 91 e7 00 	lds	r27, 0x00E7	; 0x8000e7 <btn_timer+0x3>
     996:	c8 1a       	sub	r12, r24
     998:	d9 0a       	sbc	r13, r25
     99a:	ea 0a       	sbc	r14, r26
     99c:	fb 0a       	sbc	r15, r27
     99e:	34 ef       	ldi	r19, 0xF4	; 244
     9a0:	c3 16       	cp	r12, r19
     9a2:	31 e0       	ldi	r19, 0x01	; 1
     9a4:	d3 06       	cpc	r13, r19
     9a6:	e1 04       	cpc	r14, r1
     9a8:	f1 04       	cpc	r15, r1
     9aa:	b8 f0       	brcs	.+46     	; 0x9da <handle_btn_click+0xd8>
		btn_long_pressed = true;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <btn_long_pressed>
		switch (display_menu) {
     9b2:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <display_menu>
     9b6:	83 30       	cpi	r24, 0x03	; 3
     9b8:	39 f4       	brne	.+14     	; 0x9c8 <handle_btn_click+0xc6>
			case MENU_LED:
				turn_led(!led_turned);
     9ba:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <led_turned>
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	89 27       	eor	r24, r25
     9c2:	9b df       	rcall	.-202    	; 0x8fa <turn_led>
				display_update();
     9c4:	cc de       	rcall	.-616    	; 0x75e <display_update>
				break;
     9c6:	09 c0       	rjmp	.+18     	; 0x9da <handle_btn_click+0xd8>
			default:
				turn_display(!display_turned);
     9c8:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <display_turned>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	89 27       	eor	r24, r25
     9d0:	b2 de       	rcall	.-668    	; 0x736 <turn_display>
				break;
		}
	}
}
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <handle_btn_click+0xd8>
		btn_pressed = true;
		btn_timer = timer_now;
	}
	
	// handle single button click
	if (btn_pressed && pin_state) {
     9d4:	81 11       	cpse	r24, r1
     9d6:	ad cf       	rjmp	.-166    	; 0x932 <handle_btn_click+0x30>
     9d8:	d2 cf       	rjmp	.-92     	; 0x97e <handle_btn_click+0x7c>
			default:
				turn_display(!display_turned);
				break;
		}
	}
}
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	08 95       	ret

000009e4 <calc_avg_speed>:
		wheel_rotation_counter = 0;
		wheel_rotation_start_time = 0;
	}
}

void calc_avg_speed(float speed) {
     9e4:	8f 92       	push	r8
     9e6:	9f 92       	push	r9
     9e8:	af 92       	push	r10
     9ea:	bf 92       	push	r11
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	6b 01       	movw	r12, r22
     9fe:	7c 01       	movw	r14, r24
	if (speed == 0) {
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	a9 01       	movw	r20, r18
     a06:	81 d4       	rcall	.+2306   	; 0x130a <__cmpsf2>
     a08:	88 23       	and	r24, r24
     a0a:	09 f4       	brne	.+2      	; 0xa0e <calc_avg_speed+0x2a>
     a0c:	57 c0       	rjmp	.+174    	; 0xabc <calc_avg_speed+0xd8>
		return;
	}
	
	speed_arr[speed_arr_index++] = speed;
     a0e:	e0 91 c1 00 	lds	r30, 0x00C1	; 0x8000c1 <speed_arr_index>
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	8e 0f       	add	r24, r30
     a16:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <speed_arr_index>
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	ed 53       	subi	r30, 0x3D	; 61
     a26:	ff 4f       	sbci	r31, 0xFF	; 255
     a28:	c0 82       	st	Z, r12
     a2a:	d1 82       	std	Z+1, r13	; 0x01
     a2c:	e2 82       	std	Z+2, r14	; 0x02
     a2e:	f3 82       	std	Z+3, r15	; 0x03
	
	if (speed_arr_index == 8) {
     a30:	88 30       	cpi	r24, 0x08	; 8
     a32:	09 f0       	breq	.+2      	; 0xa36 <calc_avg_speed+0x52>
     a34:	43 c0       	rjmp	.+134    	; 0xabc <calc_avg_speed+0xd8>
		speed_arr_index = 0;
     a36:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <speed_arr_index>
     a3a:	c3 ec       	ldi	r28, 0xC3	; 195
     a3c:	d0 e0       	ldi	r29, 0x00	; 0
     a3e:	03 ee       	ldi	r16, 0xE3	; 227
     a40:	10 e0       	ldi	r17, 0x00	; 0
		float sum = 0;
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	cb 01       	movw	r24, r22
		for (uint8_t i = 0; i < 8; i++) {
			sum += speed_arr[i];
     a48:	29 91       	ld	r18, Y+
     a4a:	39 91       	ld	r19, Y+
     a4c:	49 91       	ld	r20, Y+
     a4e:	59 91       	ld	r21, Y+
     a50:	f8 d3       	rcall	.+2032   	; 0x1242 <__addsf3>
	speed_arr[speed_arr_index++] = speed;
	
	if (speed_arr_index == 8) {
		speed_arr_index = 0;
		float sum = 0;
		for (uint8_t i = 0; i < 8; i++) {
     a52:	c0 17       	cp	r28, r16
     a54:	d1 07       	cpc	r29, r17
     a56:	c1 f7       	brne	.-16     	; 0xa48 <calc_avg_speed+0x64>
			sum += speed_arr[i];
		}
		
		sum /= 8;
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	5e e3       	ldi	r21, 0x3E	; 62
     a60:	a7 d5       	rcall	.+2894   	; 0x15b0 <__mulsf3>
     a62:	4b 01       	movw	r8, r22
     a64:	5c 01       	movw	r10, r24
		if (avg_speed == 0) {
     a66:	c0 90 a1 00 	lds	r12, 0x00A1	; 0x8000a1 <avg_speed>
     a6a:	d0 90 a2 00 	lds	r13, 0x00A2	; 0x8000a2 <avg_speed+0x1>
     a6e:	e0 90 a3 00 	lds	r14, 0x00A3	; 0x8000a3 <avg_speed+0x2>
     a72:	f0 90 a4 00 	lds	r15, 0x00A4	; 0x8000a4 <avg_speed+0x3>
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	a9 01       	movw	r20, r18
     a7c:	c7 01       	movw	r24, r14
     a7e:	b6 01       	movw	r22, r12
     a80:	44 d4       	rcall	.+2184   	; 0x130a <__cmpsf2>
     a82:	81 11       	cpse	r24, r1
     a84:	09 c0       	rjmp	.+18     	; 0xa98 <calc_avg_speed+0xb4>
			avg_speed = sum;
     a86:	80 92 a1 00 	sts	0x00A1, r8	; 0x8000a1 <avg_speed>
     a8a:	90 92 a2 00 	sts	0x00A2, r9	; 0x8000a2 <avg_speed+0x1>
     a8e:	a0 92 a3 00 	sts	0x00A3, r10	; 0x8000a3 <avg_speed+0x2>
     a92:	b0 92 a4 00 	sts	0x00A4, r11	; 0x8000a4 <avg_speed+0x3>
     a96:	12 c0       	rjmp	.+36     	; 0xabc <calc_avg_speed+0xd8>
		} else {
			avg_speed = (avg_speed + sum) / 2;
     a98:	a7 01       	movw	r20, r14
     a9a:	96 01       	movw	r18, r12
     a9c:	c5 01       	movw	r24, r10
     a9e:	b4 01       	movw	r22, r8
     aa0:	d0 d3       	rcall	.+1952   	; 0x1242 <__addsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	82 d5       	rcall	.+2820   	; 0x15b0 <__mulsf3>
     aac:	60 93 a1 00 	sts	0x00A1, r22	; 0x8000a1 <avg_speed>
     ab0:	70 93 a2 00 	sts	0x00A2, r23	; 0x8000a2 <avg_speed+0x1>
     ab4:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <avg_speed+0x2>
     ab8:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <avg_speed+0x3>
		}
	}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	bf 90       	pop	r11
     ace:	af 90       	pop	r10
     ad0:	9f 90       	pop	r9
     ad2:	8f 90       	pop	r8
     ad4:	08 95       	ret

00000ad6 <calc_speed>:
				break;
		}
	}
}

void calc_speed(uint32_t timer_now) {
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
	if (wheel_rotation_counter == 5) {
     ade:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <wheel_rotation_counter>
     ae2:	25 30       	cpi	r18, 0x05	; 5
     ae4:	09 f0       	breq	.+2      	; 0xae8 <calc_speed+0x12>
     ae6:	6a c0       	rjmp	.+212    	; 0xbbc <calc_speed+0xe6>
		uint32_t interval = timer_now - wheel_rotation_start_time;
		uint16_t avg_interval = interval / 4;

		uint16_t rpm = 60000 / avg_interval;
     ae8:	c0 90 a6 00 	lds	r12, 0x00A6	; 0x8000a6 <wheel_rotation_start_time>
     aec:	d0 90 a7 00 	lds	r13, 0x00A7	; 0x8000a7 <wheel_rotation_start_time+0x1>
     af0:	e0 90 a8 00 	lds	r14, 0x00A8	; 0x8000a8 <wheel_rotation_start_time+0x2>
     af4:	f0 90 a9 00 	lds	r15, 0x00A9	; 0x8000a9 <wheel_rotation_start_time+0x3>
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	8c 19       	sub	r24, r12
     afe:	9d 09       	sbc	r25, r13
     b00:	ae 09       	sbc	r26, r14
     b02:	bf 09       	sbc	r27, r15
     b04:	b6 95       	lsr	r27
     b06:	a7 95       	ror	r26
     b08:	97 95       	ror	r25
     b0a:	87 95       	ror	r24
     b0c:	b6 95       	lsr	r27
     b0e:	a7 95       	ror	r26
     b10:	97 95       	ror	r25
     b12:	87 95       	ror	r24
     b14:	9c 01       	movw	r18, r24
     b16:	ad 01       	movw	r20, r26
     b18:	44 27       	eor	r20, r20
     b1a:	55 27       	eor	r21, r21
     b1c:	60 e6       	ldi	r22, 0x60	; 96
     b1e:	7a ee       	ldi	r23, 0xEA	; 234
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	e5 d5       	rcall	.+3018   	; 0x16f0 <__divmodsi4>
		if (rpm < WHEEL_RPM_MAX) {
     b26:	28 35       	cpi	r18, 0x58	; 88
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	38 07       	cpc	r19, r24
     b2c:	e8 f5       	brcc	.+122    	; 0xba8 <calc_speed+0xd2>
			wheel_rpm = rpm;
     b2e:	30 93 b4 00 	sts	0x00B4, r19	; 0x8000b4 <wheel_rpm+0x1>
     b32:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <wheel_rpm>
			speed = wheel_rpm * 60 * wheel_length;
     b36:	b9 01       	movw	r22, r18
     b38:	62 95       	swap	r22
     b3a:	72 95       	swap	r23
     b3c:	70 7f       	andi	r23, 0xF0	; 240
     b3e:	76 27       	eor	r23, r22
     b40:	60 7f       	andi	r22, 0xF0	; 240
     b42:	76 27       	eor	r23, r22
     b44:	62 1b       	sub	r22, r18
     b46:	73 0b       	sbc	r23, r19
     b48:	66 0f       	add	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	66 0f       	add	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	77 d4       	rcall	.+2286   	; 0x1444 <__floatunsisf>
     b56:	20 91 b5 00 	lds	r18, 0x00B5	; 0x8000b5 <wheel_length>
     b5a:	30 91 b6 00 	lds	r19, 0x00B6	; 0x8000b6 <wheel_length+0x1>
     b5e:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <wheel_length+0x2>
     b62:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <wheel_length+0x3>
     b66:	24 d5       	rcall	.+2632   	; 0x15b0 <__mulsf3>
     b68:	6b 01       	movw	r12, r22
     b6a:	7c 01       	movw	r14, r24
     b6c:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <speed>
     b70:	70 93 ee 00 	sts	0x00EE, r23	; 0x8000ee <speed+0x1>
     b74:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <speed+0x2>
     b78:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <speed+0x3>
			if (speed >= max_speed) {
     b7c:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <max_speed>
     b80:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <max_speed+0x1>
     b84:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <max_speed+0x2>
     b88:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <max_speed+0x3>
     b8c:	0d d5       	rcall	.+2586   	; 0x15a8 <__gesf2>
     b8e:	88 23       	and	r24, r24
     b90:	44 f0       	brlt	.+16     	; 0xba2 <calc_speed+0xcc>
				max_speed = speed;
     b92:	c0 92 af 00 	sts	0x00AF, r12	; 0x8000af <max_speed>
     b96:	d0 92 b0 00 	sts	0x00B0, r13	; 0x8000b0 <max_speed+0x1>
     b9a:	e0 92 b1 00 	sts	0x00B1, r14	; 0x8000b1 <max_speed+0x2>
     b9e:	f0 92 b2 00 	sts	0x00B2, r15	; 0x8000b2 <max_speed+0x3>
			}
			calc_avg_speed(speed);
     ba2:	c7 01       	movw	r24, r14
     ba4:	b6 01       	movw	r22, r12
     ba6:	1e df       	rcall	.-452    	; 0x9e4 <calc_avg_speed>
		}

		wheel_rotation_counter = 0;
     ba8:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <wheel_rotation_counter>
		wheel_rotation_start_time = 0;
     bac:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <wheel_rotation_start_time>
     bb0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <wheel_rotation_start_time+0x1>
     bb4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <wheel_rotation_start_time+0x2>
     bb8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <wheel_rotation_start_time+0x3>
	}
}
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	08 95       	ret

00000bc6 <main>:
void handle_btn_click(uint8_t pin_state, uint32_t timer_now);
void calc_speed(uint32_t timer_now);

int main(void) {
	// set 8 MHz frequency
	CLKPR = 1 << CLKPCE;
     bc6:	80 e8       	ldi	r24, 0x80	; 128
     bc8:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;
     bca:	16 bc       	out	0x26, r1	; 38
	
	DDRB = 0;
     bcc:	17 ba       	out	0x17, r1	; 23
	// led pin as output
	DDRB |= _BV(LED_PIN);
     bce:	bc 9a       	sbi	0x17, 4	; 23
	
	// turn on btn pin input pullup
	PORTB |= _BV(BTN_PIN);
     bd0:	c3 9a       	sbi	0x18, 3	; 24
	
	start_millis_timer();
     bd2:	49 dd       	rcall	.-1390   	; 0x666 <start_millis_timer>
	
	calc_wheel_length();
     bd4:	90 dd       	rcall	.-1248   	; 0x6f6 <calc_wheel_length>
	display_update();
     bd6:	c3 dd       	rcall	.-1146   	; 0x75e <display_update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bd8:	2f ef       	ldi	r18, 0xFF	; 255
     bda:	30 e7       	ldi	r19, 0x70	; 112
     bdc:	42 e0       	ldi	r20, 0x02	; 2
     bde:	21 50       	subi	r18, 0x01	; 1
     be0:	30 40       	sbci	r19, 0x00	; 0
     be2:	40 40       	sbci	r20, 0x00	; 0
     be4:	e1 f7       	brne	.-8      	; 0xbde <main+0x18>
     be6:	00 c0       	rjmp	.+0      	; 0xbe8 <main+0x22>
     be8:	00 00       	nop
	
	_delay_ms(100);
	ssd1306_init();
     bea:	48 d1       	rcall	.+656    	; 0xe7c <ssd1306_init>
	ssd1306_clear();
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	72 d1       	rcall	.+740    	; 0xeda <ssd1306_fill4>
	display_update();
     bf6:	b3 dd       	rcall	.-1178   	; 0x75e <display_update>
	
	display_turned = true;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <display_turned>
		timer_now = millis();
		
		wheel_pin_state = PINB & _BV(WHEEL_PIN);
		// detect rotation start
		if (!wheel_pin_state && !wheel_rotation_started) {
			wheel_rotation_started = true;
     bfe:	d1 e0       	ldi	r29, 0x01	; 1
		
		handle_btn_click(PINB & _BV(BTN_PIN), timer_now);
		
		// toggle led every 250 ms
		if (led_turned && (timer_now - led_timer) >= 250) {
			PORTB ^= _BV(LED_PIN);
     c00:	c0 e1       	ldi	r28, 0x10	; 16
	
	uint32_t timer_now;
	bool wheel_pin_state;
    
    while (1) {
		timer_now = millis();
     c02:	64 dd       	rcall	.-1336   	; 0x6cc <millis>
     c04:	6b 01       	movw	r12, r22
     c06:	7c 01       	movw	r14, r24
		
		wheel_pin_state = PINB & _BV(WHEEL_PIN);
		// detect rotation start
		if (!wheel_pin_state && !wheel_rotation_started) {
     c08:	b2 99       	sbic	0x16, 2	; 22
     c0a:	f6 c0       	rjmp	.+492    	; 0xdf8 <main+0x232>
     c0c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <wheel_rotation_started>
     c10:	81 11       	cpse	r24, r1
     c12:	3f c0       	rjmp	.+126    	; 0xc92 <main+0xcc>
			wheel_rotation_started = true;
     c14:	d0 93 ec 00 	sts	0x00EC, r29	; 0x8000ec <wheel_rotation_started>
     c18:	3c c0       	rjmp	.+120    	; 0xc92 <main+0xcc>
		}
		// detect when magnet passes by the hall sensor
		if (wheel_pin_state && wheel_rotation_started) {
			wheel_rotation_started = false;
     c1a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <wheel_rotation_started>
			
			wheel_rotation_last_time = timer_now;
     c1e:	c0 92 f1 00 	sts	0x00F1, r12	; 0x8000f1 <wheel_rotation_last_time>
     c22:	d0 92 f2 00 	sts	0x00F2, r13	; 0x8000f2 <wheel_rotation_last_time+0x1>
     c26:	e0 92 f3 00 	sts	0x00F3, r14	; 0x8000f3 <wheel_rotation_last_time+0x2>
     c2a:	f0 92 f4 00 	sts	0x00F4, r15	; 0x8000f4 <wheel_rotation_last_time+0x3>
			if (wheel_rotation_start_time == 0) {
     c2e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <wheel_rotation_start_time>
     c32:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <wheel_rotation_start_time+0x1>
     c36:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <wheel_rotation_start_time+0x2>
     c3a:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <wheel_rotation_start_time+0x3>
     c3e:	89 2b       	or	r24, r25
     c40:	8a 2b       	or	r24, r26
     c42:	8b 2b       	or	r24, r27
     c44:	41 f4       	brne	.+16     	; 0xc56 <main+0x90>
				wheel_rotation_start_time = timer_now;
     c46:	c0 92 a6 00 	sts	0x00A6, r12	; 0x8000a6 <wheel_rotation_start_time>
     c4a:	d0 92 a7 00 	sts	0x00A7, r13	; 0x8000a7 <wheel_rotation_start_time+0x1>
     c4e:	e0 92 a8 00 	sts	0x00A8, r14	; 0x8000a8 <wheel_rotation_start_time+0x2>
     c52:	f0 92 a9 00 	sts	0x00A9, r15	; 0x8000a9 <wheel_rotation_start_time+0x3>
			}

			wheel_rotation_counter++;
     c56:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <wheel_rotation_counter>
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <wheel_rotation_counter>
			distance += wheel_length;
     c60:	20 91 b5 00 	lds	r18, 0x00B5	; 0x8000b5 <wheel_length>
     c64:	30 91 b6 00 	lds	r19, 0x00B6	; 0x8000b6 <wheel_length+0x1>
     c68:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <wheel_length+0x2>
     c6c:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <wheel_length+0x3>
     c70:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <distance>
     c74:	70 91 ba 00 	lds	r23, 0x00BA	; 0x8000ba <distance+0x1>
     c78:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <distance+0x2>
     c7c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <distance+0x3>
     c80:	e0 d2       	rcall	.+1472   	; 0x1242 <__addsf3>
     c82:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <distance>
     c86:	70 93 ba 00 	sts	0x00BA, r23	; 0x8000ba <distance+0x1>
     c8a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <distance+0x2>
     c8e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <distance+0x3>
		}
		
		calc_speed(timer_now);
     c92:	c7 01       	movw	r24, r14
     c94:	b6 01       	movw	r22, r12
     c96:	1f df       	rcall	.-450    	; 0xad6 <calc_speed>
		
		handle_btn_click(PINB & _BV(BTN_PIN), timer_now);
     c98:	86 b3       	in	r24, 0x16	; 22
     c9a:	b7 01       	movw	r22, r14
     c9c:	a6 01       	movw	r20, r12
     c9e:	88 70       	andi	r24, 0x08	; 8
     ca0:	30 de       	rcall	.-928    	; 0x902 <handle_btn_click>
		
		// toggle led every 250 ms
		if (led_turned && (timer_now - led_timer) >= 250) {
     ca2:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <led_turned>
     ca6:	88 23       	and	r24, r24
     ca8:	f1 f0       	breq	.+60     	; 0xce6 <main+0x120>
     caa:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <led_timer>
     cae:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <led_timer+0x1>
     cb2:	a0 91 bf 00 	lds	r26, 0x00BF	; 0x8000bf <led_timer+0x2>
     cb6:	b0 91 c0 00 	lds	r27, 0x00C0	; 0x8000c0 <led_timer+0x3>
     cba:	a7 01       	movw	r20, r14
     cbc:	96 01       	movw	r18, r12
     cbe:	28 1b       	sub	r18, r24
     cc0:	39 0b       	sbc	r19, r25
     cc2:	4a 0b       	sbc	r20, r26
     cc4:	5b 0b       	sbc	r21, r27
     cc6:	2a 3f       	cpi	r18, 0xFA	; 250
     cc8:	31 05       	cpc	r19, r1
     cca:	41 05       	cpc	r20, r1
     ccc:	51 05       	cpc	r21, r1
     cce:	58 f0       	brcs	.+22     	; 0xce6 <main+0x120>
			PORTB ^= _BV(LED_PIN);
     cd0:	88 b3       	in	r24, 0x18	; 24
     cd2:	8c 27       	eor	r24, r28
     cd4:	88 bb       	out	0x18, r24	; 24
			led_timer = timer_now;
     cd6:	c0 92 bd 00 	sts	0x00BD, r12	; 0x8000bd <led_timer>
     cda:	d0 92 be 00 	sts	0x00BE, r13	; 0x8000be <led_timer+0x1>
     cde:	e0 92 bf 00 	sts	0x00BF, r14	; 0x8000bf <led_timer+0x2>
     ce2:	f0 92 c0 00 	sts	0x00C0, r15	; 0x8000c0 <led_timer+0x3>
		}
		
		// idle
		if (speed != 0 && timer_now - wheel_rotation_last_time >= 4000) {
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	a9 01       	movw	r20, r18
     cec:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <speed>
     cf0:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <speed+0x1>
     cf4:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <speed+0x2>
     cf8:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <speed+0x3>
     cfc:	06 d3       	rcall	.+1548   	; 0x130a <__cmpsf2>
     cfe:	88 23       	and	r24, r24
     d00:	81 f1       	breq	.+96     	; 0xd62 <main+0x19c>
     d02:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <wheel_rotation_last_time>
     d06:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <wheel_rotation_last_time+0x1>
     d0a:	a0 91 f3 00 	lds	r26, 0x00F3	; 0x8000f3 <wheel_rotation_last_time+0x2>
     d0e:	b0 91 f4 00 	lds	r27, 0x00F4	; 0x8000f4 <wheel_rotation_last_time+0x3>
     d12:	a7 01       	movw	r20, r14
     d14:	96 01       	movw	r18, r12
     d16:	28 1b       	sub	r18, r24
     d18:	39 0b       	sbc	r19, r25
     d1a:	4a 0b       	sbc	r20, r26
     d1c:	5b 0b       	sbc	r21, r27
     d1e:	da 01       	movw	r26, r20
     d20:	c9 01       	movw	r24, r18
     d22:	80 3a       	cpi	r24, 0xA0	; 160
     d24:	9f 40       	sbci	r25, 0x0F	; 15
     d26:	a1 05       	cpc	r26, r1
     d28:	b1 05       	cpc	r27, r1
     d2a:	d8 f0       	brcs	.+54     	; 0xd62 <main+0x19c>
			speed = 0;
     d2c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <speed>
     d30:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <speed+0x1>
     d34:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <speed+0x2>
     d38:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <speed+0x3>
			wheel_rpm = 0;
     d3c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <wheel_rpm+0x1>
     d40:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <wheel_rpm>
			wheel_rotation_counter = 0;
     d44:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <wheel_rotation_counter>
			wheel_rotation_start_time = 0;
     d48:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <wheel_rotation_start_time>
     d4c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <wheel_rotation_start_time+0x1>
     d50:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <wheel_rotation_start_time+0x2>
     d54:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <wheel_rotation_start_time+0x3>
			if (display_menu == MENU_MAIN) {
     d58:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <display_menu>
     d5c:	81 11       	cpse	r24, r1
     d5e:	51 c0       	rjmp	.+162    	; 0xe02 <main+0x23c>
				display_update();
     d60:	fe dc       	rcall	.-1540   	; 0x75e <display_update>
			}
		}
		
		bool upd_time = display_menu == MENU_TIME && timer_now - display_timer >= 1000;
     d62:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <display_menu>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	b1 f4       	brne	.+44     	; 0xd96 <main+0x1d0>
     d6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <display_timer>
     d6e:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <display_timer+0x1>
     d72:	a0 91 ea 00 	lds	r26, 0x00EA	; 0x8000ea <display_timer+0x2>
     d76:	b0 91 eb 00 	lds	r27, 0x00EB	; 0x8000eb <display_timer+0x3>
     d7a:	a7 01       	movw	r20, r14
     d7c:	96 01       	movw	r18, r12
     d7e:	28 1b       	sub	r18, r24
     d80:	39 0b       	sbc	r19, r25
     d82:	4a 0b       	sbc	r20, r26
     d84:	5b 0b       	sbc	r21, r27
     d86:	da 01       	movw	r26, r20
     d88:	c9 01       	movw	r24, r18
     d8a:	88 3e       	cpi	r24, 0xE8	; 232
     d8c:	93 40       	sbci	r25, 0x03	; 3
     d8e:	a1 05       	cpc	r26, r1
     d90:	b1 05       	cpc	r27, r1
     d92:	40 f5       	brcc	.+80     	; 0xde4 <main+0x21e>
     d94:	36 cf       	rjmp	.-404    	; 0xc02 <main+0x3c>
		bool upd_display = display_menu == MENU_MAIN && speed > 0 && timer_now - display_timer >= 4000;
     d96:	81 11       	cpse	r24, r1
     d98:	34 cf       	rjmp	.-408    	; 0xc02 <main+0x3c>
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <speed>
     da4:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <speed+0x1>
     da8:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <speed+0x2>
     dac:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <speed+0x3>
     db0:	fb d3       	rcall	.+2038   	; 0x15a8 <__gesf2>
     db2:	18 16       	cp	r1, r24
     db4:	0c f0       	brlt	.+2      	; 0xdb8 <main+0x1f2>
     db6:	25 cf       	rjmp	.-438    	; 0xc02 <main+0x3c>
     db8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <display_timer>
     dbc:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <display_timer+0x1>
     dc0:	a0 91 ea 00 	lds	r26, 0x00EA	; 0x8000ea <display_timer+0x2>
     dc4:	b0 91 eb 00 	lds	r27, 0x00EB	; 0x8000eb <display_timer+0x3>
     dc8:	a7 01       	movw	r20, r14
     dca:	96 01       	movw	r18, r12
     dcc:	28 1b       	sub	r18, r24
     dce:	39 0b       	sbc	r19, r25
     dd0:	4a 0b       	sbc	r20, r26
     dd2:	5b 0b       	sbc	r21, r27
     dd4:	da 01       	movw	r26, r20
     dd6:	c9 01       	movw	r24, r18
     dd8:	80 3a       	cpi	r24, 0xA0	; 160
     dda:	9f 40       	sbci	r25, 0x0F	; 15
     ddc:	a1 05       	cpc	r26, r1
     dde:	b1 05       	cpc	r27, r1
     de0:	08 f4       	brcc	.+2      	; 0xde4 <main+0x21e>
     de2:	0f cf       	rjmp	.-482    	; 0xc02 <main+0x3c>
		if (upd_time || upd_display) {
			display_update();
     de4:	bc dc       	rcall	.-1672   	; 0x75e <display_update>
			display_timer = timer_now;
     de6:	c0 92 e8 00 	sts	0x00E8, r12	; 0x8000e8 <display_timer>
     dea:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <display_timer+0x1>
     dee:	e0 92 ea 00 	sts	0x00EA, r14	; 0x8000ea <display_timer+0x2>
     df2:	f0 92 eb 00 	sts	0x00EB, r15	; 0x8000eb <display_timer+0x3>
     df6:	05 cf       	rjmp	.-502    	; 0xc02 <main+0x3c>
		// detect rotation start
		if (!wheel_pin_state && !wheel_rotation_started) {
			wheel_rotation_started = true;
		}
		// detect when magnet passes by the hall sensor
		if (wheel_pin_state && wheel_rotation_started) {
     df8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <wheel_rotation_started>
     dfc:	81 11       	cpse	r24, r1
     dfe:	0d cf       	rjmp	.-486    	; 0xc1a <main+0x54>
     e00:	48 cf       	rjmp	.-368    	; 0xc92 <main+0xcc>
			if (display_menu == MENU_MAIN) {
				display_update();
			}
		}
		
		bool upd_time = display_menu == MENU_TIME && timer_now - display_timer >= 1000;
     e02:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <display_menu>
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	09 f0       	breq	.+2      	; 0xe0c <main+0x246>
     e0a:	fb ce       	rjmp	.-522    	; 0xc02 <main+0x3c>
     e0c:	ae cf       	rjmp	.-164    	; 0xd6a <main+0x1a4>

00000e0e <i2csw_start>:
void i2csw_byte(uint8_t byte);

// ----------------------------------------------------------------------------

void i2csw_start() {
	DDRB |= (1 << SSD1306_SDA);	// Set port as output
     e0e:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1 << SSD1306_SCL);	// Set port as output
     e10:	b9 9a       	sbi	0x17, 1	; 23
	I2CSW_HIGH(SSD1306_SCL);	// Set to HIGH
     e12:	c1 9a       	sbi	0x18, 1	; 24
	I2CSW_HIGH(SSD1306_SDA);	// Set to HIGH
     e14:	c0 9a       	sbi	0x18, 0	; 24
	I2CSW_LOW(SSD1306_SDA);		// Set to LOW
     e16:	c0 98       	cbi	0x18, 0	; 24
	I2CSW_LOW(SSD1306_SCL);		// Set to LOW
     e18:	c1 98       	cbi	0x18, 1	; 24
     e1a:	08 95       	ret

00000e1c <i2csw_stop>:
}

void i2csw_stop() {
	I2CSW_LOW(SSD1306_SCL);		// Set to LOW
     e1c:	c1 98       	cbi	0x18, 1	; 24
	I2CSW_LOW(SSD1306_SDA);		// Set to LOW
     e1e:	c0 98       	cbi	0x18, 0	; 24
	I2CSW_HIGH(SSD1306_SCL);	// Set to HIGH
     e20:	c1 9a       	sbi	0x18, 1	; 24
	I2CSW_HIGH(SSD1306_SDA);	// Set to HIGH
     e22:	c0 9a       	sbi	0x18, 0	; 24
	DDRB &= ~(1 << SSD1306_SDA);// Set port as input
     e24:	b8 98       	cbi	0x17, 0	; 23
     e26:	08 95       	ret

00000e28 <i2csw_byte>:
}

void i2csw_byte(uint8_t byte) {
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++) {
		if ((byte << i) & 0x80)
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	ac 01       	movw	r20, r24
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <i2csw_byte+0x10>
     e34:	44 0f       	add	r20, r20
     e36:	55 1f       	adc	r21, r21
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <i2csw_byte+0xc>
     e3c:	47 ff       	sbrs	r20, 7
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <i2csw_byte+0x1c>
			I2CSW_HIGH(SSD1306_SDA);
     e40:	c0 9a       	sbi	0x18, 0	; 24
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <i2csw_byte+0x1e>
		else
			I2CSW_LOW(SSD1306_SDA);
     e44:	c0 98       	cbi	0x18, 0	; 24
		I2CSW_HIGH(SSD1306_SCL);
     e46:	c1 9a       	sbi	0x18, 1	; 24
		I2CSW_LOW(SSD1306_SCL);
     e48:	c1 98       	cbi	0x18, 1	; 24
     e4a:	2f 5f       	subi	r18, 0xFF	; 255
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRB &= ~(1 << SSD1306_SDA);// Set port as input
}

void i2csw_byte(uint8_t byte) {
	uint8_t i;
	for (i = 0; i < 8; i++) {
     e4e:	28 30       	cpi	r18, 0x08	; 8
     e50:	31 05       	cpc	r19, r1
     e52:	69 f7       	brne	.-38     	; 0xe2e <i2csw_byte+0x6>
		else
			I2CSW_LOW(SSD1306_SDA);
		I2CSW_HIGH(SSD1306_SCL);
		I2CSW_LOW(SSD1306_SCL);
	}
	I2CSW_HIGH(SSD1306_SDA);
     e54:	c0 9a       	sbi	0x18, 0	; 24
	I2CSW_HIGH(SSD1306_SCL);
     e56:	c1 9a       	sbi	0x18, 1	; 24
	I2CSW_LOW(SSD1306_SCL);
     e58:	c1 98       	cbi	0x18, 1	; 24
     e5a:	08 95       	ret

00000e5c <ssd1306_start_command>:
}

// ============================================================================

void ssd1306_start_command() {
	i2csw_start();
     e5c:	d8 df       	rcall	.-80     	; 0xe0e <i2csw_start>
	i2csw_byte(SSD1306_SADDR);	// Slave address: R/W(SA0)=0 - write
     e5e:	88 e7       	ldi	r24, 0x78	; 120
     e60:	e3 df       	rcall	.-58     	; 0xe28 <i2csw_byte>
	i2csw_byte(0x00);			// Control byte: D/C=0 - write command
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	e1 df       	rcall	.-62     	; 0xe28 <i2csw_byte>
     e66:	08 95       	ret

00000e68 <ssd1306_start_data>:
}

void ssd1306_start_data() {
	i2csw_start();
     e68:	d2 df       	rcall	.-92     	; 0xe0e <i2csw_start>
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
     e6a:	88 e7       	ldi	r24, 0x78	; 120
     e6c:	dd df       	rcall	.-70     	; 0xe28 <i2csw_byte>
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
     e6e:	80 e4       	ldi	r24, 0x40	; 64
     e70:	db df       	rcall	.-74     	; 0xe28 <i2csw_byte>
     e72:	08 95       	ret

00000e74 <ssd1306_data_byte>:
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     e74:	d9 df       	rcall	.-78     	; 0xe28 <i2csw_byte>
     e76:	08 95       	ret

00000e78 <ssd1306_stop>:
}

void ssd1306_stop() {
	i2csw_stop();
     e78:	d1 df       	rcall	.-94     	; 0xe1c <i2csw_stop>
     e7a:	08 95       	ret

00000e7c <ssd1306_init>:
// ============================================================================

uint8_t pos_x = 0;
uint8_t pos_y = 0;

void ssd1306_init() {
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
	ssd1306_start_command();	// Initiate transmission of command
     e84:	eb df       	rcall	.-42     	; 0xe5c <ssd1306_start_command>
     e86:	ce e1       	ldi	r28, 0x1E	; 30
     e88:	d0 e0       	ldi	r29, 0x00	; 0
     e8a:	0e e3       	ldi	r16, 0x3E	; 62
     e8c:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
		ssd1306_data_byte(pgm_read_byte(&ssd1306_init_sequence[i]));	// Send the command out
     e8e:	fe 01       	movw	r30, r28
     e90:	84 91       	lpm	r24, Z
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     e92:	ca df       	rcall	.-108    	; 0xe28 <i2csw_byte>
     e94:	21 96       	adiw	r28, 0x01	; 1
uint8_t pos_x = 0;
uint8_t pos_y = 0;

void ssd1306_init() {
	ssd1306_start_command();	// Initiate transmission of command
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
     e96:	c0 17       	cp	r28, r16
     e98:	d1 07       	cpc	r29, r17
     e9a:	c9 f7       	brne	.-14     	; 0xe8e <ssd1306_init+0x12>
void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
}

void ssd1306_stop() {
	i2csw_stop();
     e9c:	bf df       	rcall	.-130    	; 0xe1c <i2csw_stop>
	ssd1306_start_command();	// Initiate transmission of command
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
		ssd1306_data_byte(pgm_read_byte(&ssd1306_init_sequence[i]));	// Send the command out
	}
	ssd1306_stop();	// Finish transmission
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <ssd1306_set_pos>:

void ssd1306_set_pos(uint8_t x, uint8_t y) {
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	c8 2f       	mov	r28, r24
     eae:	d6 2f       	mov	r29, r22
	pos_x = x;
     eb0:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <pos_x>
	pos_y = y;
     eb4:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <__data_end>
	
	ssd1306_start_command();
     eb8:	d1 df       	rcall	.-94     	; 0xe5c <ssd1306_start_command>
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     eba:	8d 2f       	mov	r24, r29
     ebc:	87 70       	andi	r24, 0x07	; 7
     ebe:	80 6b       	ori	r24, 0xB0	; 176
     ec0:	b3 df       	rcall	.-154    	; 0xe28 <i2csw_byte>
     ec2:	8c 2f       	mov	r24, r28
     ec4:	8f 70       	andi	r24, 0x0F	; 15
     ec6:	b0 df       	rcall	.-160    	; 0xe28 <i2csw_byte>
     ec8:	8c 2f       	mov	r24, r28
     eca:	82 95       	swap	r24
     ecc:	8f 70       	andi	r24, 0x0F	; 15
     ece:	80 61       	ori	r24, 0x10	; 16
     ed0:	ab df       	rcall	.-170    	; 0xe28 <i2csw_byte>
}

void ssd1306_stop() {
	i2csw_stop();
     ed2:	a4 df       	rcall	.-184    	; 0xe1c <i2csw_stop>
	ssd1306_start_command();
	ssd1306_data_byte(0xb0 | (y & 0x07));	// Set page start address
	ssd1306_data_byte(x & 0x0f);			// Set the lower nibble of the column start address
	ssd1306_data_byte(0x10 | (x >> 4));		// Set the higher nibble of the column start address
	ssd1306_stop();	// Finish transmission
}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <ssd1306_fill4>:

void ssd1306_fill4(uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4) {
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	e8 2e       	mov	r14, r24
     ee8:	f6 2e       	mov	r15, r22
     eea:	04 2f       	mov	r16, r20
     eec:	12 2f       	mov	r17, r18
	ssd1306_set_pos(0, 0);
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	da df       	rcall	.-76     	; 0xea8 <ssd1306_set_pos>
	ssd1306_start_data();	// Initiate transmission of data
     ef4:	b9 df       	rcall	.-142    	; 0xe68 <ssd1306_start_data>
     ef6:	c0 e0       	ldi	r28, 0x00	; 0
     ef8:	d1 e0       	ldi	r29, 0x01	; 1
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     efa:	8e 2d       	mov	r24, r14
     efc:	95 df       	rcall	.-214    	; 0xe28 <i2csw_byte>
     efe:	8f 2d       	mov	r24, r15
     f00:	93 df       	rcall	.-218    	; 0xe28 <i2csw_byte>
     f02:	80 2f       	mov	r24, r16
     f04:	91 df       	rcall	.-222    	; 0xe28 <i2csw_byte>
     f06:	81 2f       	mov	r24, r17
     f08:	8f df       	rcall	.-226    	; 0xe28 <i2csw_byte>
     f0a:	21 97       	sbiw	r28, 0x01	; 1
}

void ssd1306_fill4(uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4) {
	ssd1306_set_pos(0, 0);
	ssd1306_start_data();	// Initiate transmission of data
	for (uint16_t i = 0; i < 128 * 8 / 4; i++) {
     f0c:	b1 f7       	brne	.-20     	; 0xefa <ssd1306_fill4+0x20>
void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
}

void ssd1306_stop() {
	i2csw_stop();
     f0e:	86 df       	rcall	.-244    	; 0xe1c <i2csw_stop>
		ssd1306_data_byte(p2);
		ssd1306_data_byte(p3);
		ssd1306_data_byte(p4);
	}
	ssd1306_stop();	// Finish transmission
}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	08 95       	ret

00000f1e <ssd1306_turn_display>:

void ssd1306_turn_display(bool on) {
     f1e:	cf 93       	push	r28
     f20:	c8 2f       	mov	r28, r24
	ssd1306_start_command();
     f22:	9c df       	rcall	.-200    	; 0xe5c <ssd1306_start_command>
	ssd1306_data_byte(on ? 0xAF : 0xAE);
     f24:	c1 11       	cpse	r28, r1
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <ssd1306_turn_display+0xe>
     f28:	8e ea       	ldi	r24, 0xAE	; 174
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <ssd1306_turn_display+0x10>
     f2c:	8f ea       	ldi	r24, 0xAF	; 175
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     f2e:	7c df       	rcall	.-264    	; 0xe28 <i2csw_byte>
}

void ssd1306_stop() {
	i2csw_stop();
     f30:	75 df       	rcall	.-278    	; 0xe1c <i2csw_stop>

void ssd1306_turn_display(bool on) {
	ssd1306_start_command();
	ssd1306_data_byte(on ? 0xAF : 0xAE);
	ssd1306_stop();
}
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <ssd1306tx_char_8x16>:
	int result = 1;
	for (; exponent > 0; exponent--) {
		result *= base;
	}
	return result;
}
     f36:	cf 92       	push	r12
     f38:	df 92       	push	r13
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	c6 2e       	mov	r12, r22
     f48:	d4 2e       	mov	r13, r20
     f4a:	08 2f       	mov	r16, r24
     f4c:	10 e0       	ldi	r17, 0x00	; 0
     f4e:	00 52       	subi	r16, 0x20	; 32
     f50:	11 09       	sbc	r17, r1
     f52:	78 01       	movw	r14, r16
     f54:	ee 0c       	add	r14, r14
     f56:	ff 1c       	adc	r15, r15
     f58:	ee 0c       	add	r14, r14
     f5a:	ff 1c       	adc	r15, r15
     f5c:	ee 0c       	add	r14, r14
     f5e:	ff 1c       	adc	r15, r15
     f60:	ee 0c       	add	r14, r14
     f62:	ff 1c       	adc	r15, r15
     f64:	64 2f       	mov	r22, r20
     f66:	8c 2d       	mov	r24, r12
     f68:	9f df       	rcall	.-194    	; 0xea8 <ssd1306_set_pos>
     f6a:	7e df       	rcall	.-260    	; 0xe68 <ssd1306_start_data>
     f6c:	87 01       	movw	r16, r14
     f6e:	02 5c       	subi	r16, 0xC2	; 194
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
     f72:	e7 01       	movw	r28, r14
     f74:	ca 5b       	subi	r28, 0xBA	; 186
     f76:	df 4f       	sbci	r29, 0xFF	; 255
     f78:	f8 01       	movw	r30, r16
     f7a:	84 91       	lpm	r24, Z
     f7c:	7b df       	rcall	.-266    	; 0xe74 <ssd1306_data_byte>
     f7e:	0f 5f       	subi	r16, 0xFF	; 255
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	0c 17       	cp	r16, r28
     f84:	1d 07       	cpc	r17, r29
     f86:	c1 f7       	brne	.-16     	; 0xf78 <ssd1306tx_char_8x16+0x42>
     f88:	77 df       	rcall	.-274    	; 0xe78 <ssd1306_stop>
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	6d 0d       	add	r22, r13
     f8e:	8c 2d       	mov	r24, r12
     f90:	8b df       	rcall	.-234    	; 0xea8 <ssd1306_set_pos>
     f92:	6a df       	rcall	.-300    	; 0xe68 <ssd1306_start_data>
     f94:	87 01       	movw	r16, r14
     f96:	02 5b       	subi	r16, 0xB2	; 178
     f98:	1f 4f       	sbci	r17, 0xFF	; 255
     f9a:	fe 01       	movw	r30, r28
     f9c:	84 91       	lpm	r24, Z
     f9e:	6a df       	rcall	.-300    	; 0xe74 <ssd1306_data_byte>
     fa0:	21 96       	adiw	r28, 0x01	; 1
     fa2:	c0 17       	cp	r28, r16
     fa4:	d1 07       	cpc	r29, r17
     fa6:	c9 f7       	brne	.-14     	; 0xf9a <ssd1306tx_char_8x16+0x64>
     fa8:	67 df       	rcall	.-306    	; 0xe78 <ssd1306_stop>
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	08 95       	ret

00000fbc <ssd1306tx_string>:
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	fc 01       	movw	r30, r24
     fc6:	c0 91 9f 00 	lds	r28, 0x009F	; 0x80009f <pos_x>
     fca:	d0 91 9e 00 	lds	r29, 0x009E	; 0x80009e <__data_end>
     fce:	80 81       	ld	r24, Z
     fd0:	88 23       	and	r24, r24
     fd2:	61 f0       	breq	.+24     	; 0xfec <ssd1306tx_string+0x30>
     fd4:	8f 01       	movw	r16, r30
     fd6:	0f 5f       	subi	r16, 0xFF	; 255
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	4d 2f       	mov	r20, r29
     fdc:	6c 2f       	mov	r22, r28
     fde:	ab df       	rcall	.-170    	; 0xf36 <ssd1306tx_char_8x16>
     fe0:	c8 5f       	subi	r28, 0xF8	; 248
     fe2:	f8 01       	movw	r30, r16
     fe4:	81 91       	ld	r24, Z+
     fe6:	8f 01       	movw	r16, r30
     fe8:	81 11       	cpse	r24, r1
     fea:	f7 cf       	rjmp	.-18     	; 0xfda <ssd1306tx_string+0x1e>
     fec:	6d 2f       	mov	r22, r29
     fee:	8c 2f       	mov	r24, r28
     ff0:	5b df       	rcall	.-330    	; 0xea8 <ssd1306_set_pos>
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <itoa>:
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	7b 01       	movw	r14, r22
    100e:	fa 01       	movw	r30, r20
    1010:	99 23       	and	r25, r25
    1012:	34 f4       	brge	.+12     	; 0x1020 <itoa+0x24>
    1014:	2d e2       	ldi	r18, 0x2D	; 45
    1016:	20 83       	st	Z, r18
    1018:	91 95       	neg	r25
    101a:	81 95       	neg	r24
    101c:	91 09       	sbc	r25, r1
    101e:	31 96       	adiw	r30, 0x01	; 1
    1020:	8f 01       	movw	r16, r30
    1022:	ef 01       	movw	r28, r30
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	0f 2e       	mov	r0, r31
    102a:	fa e0       	ldi	r31, 0x0A	; 10
    102c:	cf 2e       	mov	r12, r31
    102e:	d1 2c       	mov	r13, r1
    1030:	f0 2d       	mov	r31, r0
    1032:	2f 5f       	subi	r18, 0xFF	; 255
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    1036:	b6 01       	movw	r22, r12
    1038:	26 d3       	rcall	.+1612   	; 0x1686 <__divmodhi4>
    103a:	80 5d       	subi	r24, 0xD0	; 208
    103c:	89 93       	st	Y+, r24
    103e:	86 2f       	mov	r24, r22
    1040:	97 2f       	mov	r25, r23
    1042:	18 16       	cp	r1, r24
    1044:	19 06       	cpc	r1, r25
    1046:	ac f3       	brlt	.-22     	; 0x1032 <itoa+0x36>
    1048:	2e 15       	cp	r18, r14
    104a:	3f 05       	cpc	r19, r15
    104c:	64 f4       	brge	.+24     	; 0x1066 <itoa+0x6a>
    104e:	df 01       	movw	r26, r30
    1050:	a2 0f       	add	r26, r18
    1052:	b3 1f       	adc	r27, r19
    1054:	9f 01       	movw	r18, r30
    1056:	2e 0d       	add	r18, r14
    1058:	3f 1d       	adc	r19, r15
    105a:	80 e3       	ldi	r24, 0x30	; 48
    105c:	8d 93       	st	X+, r24
    105e:	a2 17       	cp	r26, r18
    1060:	b3 07       	cpc	r27, r19
    1062:	e1 f7       	brne	.-8      	; 0x105c <itoa+0x60>
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <itoa+0x6c>
    1066:	79 01       	movw	r14, r18
    1068:	ee 0d       	add	r30, r14
    106a:	ff 1d       	adc	r31, r15
    106c:	10 82       	st	Z, r1
    106e:	e7 01       	movw	r28, r14
    1070:	21 97       	sbiw	r28, 0x01	; 1
    1072:	1c 16       	cp	r1, r28
    1074:	1d 06       	cpc	r1, r29
    1076:	6c f4       	brge	.+26     	; 0x1092 <itoa+0x96>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	d8 01       	movw	r26, r16
    107e:	2c 91       	ld	r18, X
    1080:	32 91       	ld	r19, -Z
    1082:	3d 93       	st	X+, r19
    1084:	8d 01       	movw	r16, r26
    1086:	20 83       	st	Z, r18
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	21 97       	sbiw	r28, 0x01	; 1
    108c:	8c 17       	cp	r24, r28
    108e:	9d 07       	cpc	r25, r29
    1090:	ac f3       	brlt	.-22     	; 0x107c <itoa+0x80>
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ff 90       	pop	r15
    109c:	ef 90       	pop	r14
    109e:	df 90       	pop	r13
    10a0:	cf 90       	pop	r12
    10a2:	08 95       	ret

000010a4 <ssd1306tx_int_p>:
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <ssd1306tx_int_p+0x6>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <ssd1306tx_int_p+0x8>
    10ac:	1f 92       	push	r1
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	88 3e       	cpi	r24, 0xE8	; 232
    10b4:	23 e0       	ldi	r18, 0x03	; 3
    10b6:	92 07       	cpc	r25, r18
    10b8:	38 f4       	brcc	.+14     	; 0x10c8 <ssd1306tx_int_p+0x24>
    10ba:	ae 01       	movw	r20, r28
    10bc:	4f 5f       	subi	r20, 0xFF	; 255
    10be:	5f 4f       	sbci	r21, 0xFF	; 255
    10c0:	9d df       	rcall	.-198    	; 0xffc <itoa>
    10c2:	ce 01       	movw	r24, r28
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	7a df       	rcall	.-268    	; 0xfbc <ssd1306tx_string>
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <ssd1306tx_int>:
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	e3 df       	rcall	.-58     	; 0x10a4 <ssd1306tx_int_p>
    10de:	08 95       	ret

000010e0 <ftoa>:

void ftoa(float f, int precision, char *buf) {
    10e0:	4f 92       	push	r4
    10e2:	5f 92       	push	r5
    10e4:	6f 92       	push	r6
    10e6:	7f 92       	push	r7
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	6b 01       	movw	r12, r22
    10fe:	7c 01       	movw	r14, r24
    1100:	5a 01       	movw	r10, r20
    1102:	e9 01       	movw	r28, r18
	if (f < 0) {
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	ff d0       	rcall	.+510    	; 0x130a <__cmpsf2>
    110c:	88 23       	and	r24, r24
    110e:	3c f4       	brge	.+14     	; 0x111e <ftoa+0x3e>
		*buf++ = '-';
    1110:	8d e2       	ldi	r24, 0x2D	; 45
    1112:	88 83       	st	Y, r24
		f = -f;
    1114:	f7 fa       	bst	r15, 7
    1116:	f0 94       	com	r15
    1118:	f7 f8       	bld	r15, 7
    111a:	f0 94       	com	r15
	return result;
}

void ftoa(float f, int precision, char *buf) {
	if (f < 0) {
		*buf++ = '-';
    111c:	21 96       	adiw	r28, 0x01	; 1
		f = -f;
	}

	// Extract integer part
	int n = (int) f;
    111e:	c7 01       	movw	r24, r14
    1120:	b6 01       	movw	r22, r12
    1122:	5f d1       	rcall	.+702    	; 0x13e2 <__fixsfsi>
    1124:	2b 01       	movw	r4, r22
    1126:	3c 01       	movw	r6, r24
	
	// Extract floating part
	float d = f - (float) n;
    1128:	07 2e       	mov	r0, r23
    112a:	00 0c       	add	r0, r0
    112c:	88 0b       	sbc	r24, r24
    112e:	99 0b       	sbc	r25, r25
    1130:	8b d1       	rcall	.+790    	; 0x1448 <__floatsisf>
    1132:	9b 01       	movw	r18, r22
    1134:	ac 01       	movw	r20, r24
    1136:	c7 01       	movw	r24, r14
    1138:	b6 01       	movw	r22, r12
    113a:	82 d0       	rcall	.+260    	; 0x1240 <__subsf3>
    113c:	6b 01       	movw	r12, r22
    113e:	7c 01       	movw	r14, r24
	
	// convert integer part to string
	itoa(n, 0, buf);
    1140:	ae 01       	movw	r20, r28
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	c2 01       	movw	r24, r4
    1148:	59 df       	rcall	.-334    	; 0xffc <itoa>

	while (*buf != '\0') buf++;
    114a:	88 81       	ld	r24, Y
    114c:	88 23       	and	r24, r24
    114e:	39 f0       	breq	.+14     	; 0x115e <ftoa+0x7e>
    1150:	ce 01       	movw	r24, r28
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	ec 01       	movw	r28, r24
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	28 81       	ld	r18, Y
    115a:	21 11       	cpse	r18, r1
    115c:	fb cf       	rjmp	.-10     	; 0x1154 <ftoa+0x74>
	*buf++ = '.';
    115e:	8e 01       	movw	r16, r28
    1160:	0f 5f       	subi	r16, 0xFF	; 255
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	8e e2       	ldi	r24, 0x2E	; 46
    1166:	88 83       	st	Y, r24
	}
}

int power(int base, int exponent) {
	int result = 1;
	for (; exponent > 0; exponent--) {
    1168:	1a 14       	cp	r1, r10
    116a:	1b 04       	cpc	r1, r11
    116c:	7c f4       	brge	.+30     	; 0x118c <ftoa+0xac>
    116e:	c5 01       	movw	r24, r10
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	70 e0       	ldi	r23, 0x00	; 0
		result *= base;
    1174:	9b 01       	movw	r18, r22
    1176:	22 0f       	add	r18, r18
    1178:	33 1f       	adc	r19, r19
    117a:	22 0f       	add	r18, r18
    117c:	33 1f       	adc	r19, r19
    117e:	62 0f       	add	r22, r18
    1180:	73 1f       	adc	r23, r19
    1182:	66 0f       	add	r22, r22
    1184:	77 1f       	adc	r23, r23
	}
}

int power(int base, int exponent) {
	int result = 1;
	for (; exponent > 0; exponent--) {
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	a9 f7       	brne	.-22     	; 0x1174 <ftoa+0x94>
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <ftoa+0xb0>
		buf[j] = tmp;
	}
}

int power(int base, int exponent) {
	int result = 1;
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	70 e0       	ldi	r23, 0x00	; 0
	while (*buf != '\0') buf++;
	*buf++ = '.';
	
	// convert floating part to string
	d *= power(10, precision);
	itoa((int) d, precision, buf);
    1190:	07 2e       	mov	r0, r23
    1192:	00 0c       	add	r0, r0
    1194:	88 0b       	sbc	r24, r24
    1196:	99 0b       	sbc	r25, r25
    1198:	57 d1       	rcall	.+686    	; 0x1448 <__floatsisf>
    119a:	a7 01       	movw	r20, r14
    119c:	96 01       	movw	r18, r12
    119e:	08 d2       	rcall	.+1040   	; 0x15b0 <__mulsf3>
    11a0:	20 d1       	rcall	.+576    	; 0x13e2 <__fixsfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	a8 01       	movw	r20, r16
    11a8:	b5 01       	movw	r22, r10
    11aa:	28 df       	rcall	.-432    	; 0xffc <itoa>
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	bf 90       	pop	r11
    11be:	af 90       	pop	r10
    11c0:	7f 90       	pop	r7
    11c2:	6f 90       	pop	r6
    11c4:	5f 90       	pop	r5
    11c6:	4f 90       	pop	r4
    11c8:	08 95       	ret

000011ca <ssd1306tx_float>:
		ssd1306_data_byte(pgm_read_byte(&ssd1306xled_font8x16data[row + col]));
	}
	ssd1306_stop();
}

void ssd1306tx_float(float f, int precision) {
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	2a 97       	sbiw	r28, 0x0a	; 10
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	6b 01       	movw	r12, r22
    11ec:	7c 01       	movw	r14, r24
    11ee:	8a 01       	movw	r16, r20
	if (f < 0 || f >= 1000) {
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	a9 01       	movw	r20, r18
    11f6:	89 d0       	rcall	.+274    	; 0x130a <__cmpsf2>
    11f8:	88 23       	and	r24, r24
    11fa:	9c f0       	brlt	.+38     	; 0x1222 <ssd1306tx_float+0x58>
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a e7       	ldi	r20, 0x7A	; 122
    1202:	54 e4       	ldi	r21, 0x44	; 68
    1204:	c7 01       	movw	r24, r14
    1206:	b6 01       	movw	r22, r12
    1208:	cf d1       	rcall	.+926    	; 0x15a8 <__gesf2>
    120a:	88 23       	and	r24, r24
    120c:	54 f4       	brge	.+20     	; 0x1222 <ssd1306tx_float+0x58>
		return;
	}
	
	char buf[10];
	ftoa(f, precision, buf);
    120e:	9e 01       	movw	r18, r28
    1210:	2f 5f       	subi	r18, 0xFF	; 255
    1212:	3f 4f       	sbci	r19, 0xFF	; 255
    1214:	a8 01       	movw	r20, r16
    1216:	c7 01       	movw	r24, r14
    1218:	b6 01       	movw	r22, r12
    121a:	62 df       	rcall	.-316    	; 0x10e0 <ftoa>
	ssd1306tx_string(buf);
    121c:	ce 01       	movw	r24, r28
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	cd de       	rcall	.-614    	; 0xfbc <ssd1306tx_string>
}
    1222:	2a 96       	adiw	r28, 0x0a	; 10
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	08 95       	ret

00001240 <__subsf3>:
    1240:	50 58       	subi	r21, 0x80	; 128

00001242 <__addsf3>:
    1242:	bb 27       	eor	r27, r27
    1244:	aa 27       	eor	r26, r26
    1246:	0e d0       	rcall	.+28     	; 0x1264 <__addsf3x>
    1248:	75 c1       	rjmp	.+746    	; 0x1534 <__fp_round>
    124a:	66 d1       	rcall	.+716    	; 0x1518 <__fp_pscA>
    124c:	30 f0       	brcs	.+12     	; 0x125a <__addsf3+0x18>
    124e:	6b d1       	rcall	.+726    	; 0x1526 <__fp_pscB>
    1250:	20 f0       	brcs	.+8      	; 0x125a <__addsf3+0x18>
    1252:	31 f4       	brne	.+12     	; 0x1260 <__addsf3+0x1e>
    1254:	9f 3f       	cpi	r25, 0xFF	; 255
    1256:	11 f4       	brne	.+4      	; 0x125c <__addsf3+0x1a>
    1258:	1e f4       	brtc	.+6      	; 0x1260 <__addsf3+0x1e>
    125a:	5b c1       	rjmp	.+694    	; 0x1512 <__fp_nan>
    125c:	0e f4       	brtc	.+2      	; 0x1260 <__addsf3+0x1e>
    125e:	e0 95       	com	r30
    1260:	e7 fb       	bst	r30, 7
    1262:	51 c1       	rjmp	.+674    	; 0x1506 <__fp_inf>

00001264 <__addsf3x>:
    1264:	e9 2f       	mov	r30, r25
    1266:	77 d1       	rcall	.+750    	; 0x1556 <__fp_split3>
    1268:	80 f3       	brcs	.-32     	; 0x124a <__addsf3+0x8>
    126a:	ba 17       	cp	r27, r26
    126c:	62 07       	cpc	r22, r18
    126e:	73 07       	cpc	r23, r19
    1270:	84 07       	cpc	r24, r20
    1272:	95 07       	cpc	r25, r21
    1274:	18 f0       	brcs	.+6      	; 0x127c <__addsf3x+0x18>
    1276:	71 f4       	brne	.+28     	; 0x1294 <__addsf3x+0x30>
    1278:	9e f5       	brtc	.+102    	; 0x12e0 <__addsf3x+0x7c>
    127a:	8f c1       	rjmp	.+798    	; 0x159a <__fp_zero>
    127c:	0e f4       	brtc	.+2      	; 0x1280 <__addsf3x+0x1c>
    127e:	e0 95       	com	r30
    1280:	0b 2e       	mov	r0, r27
    1282:	ba 2f       	mov	r27, r26
    1284:	a0 2d       	mov	r26, r0
    1286:	0b 01       	movw	r0, r22
    1288:	b9 01       	movw	r22, r18
    128a:	90 01       	movw	r18, r0
    128c:	0c 01       	movw	r0, r24
    128e:	ca 01       	movw	r24, r20
    1290:	a0 01       	movw	r20, r0
    1292:	11 24       	eor	r1, r1
    1294:	ff 27       	eor	r31, r31
    1296:	59 1b       	sub	r21, r25
    1298:	99 f0       	breq	.+38     	; 0x12c0 <__addsf3x+0x5c>
    129a:	59 3f       	cpi	r21, 0xF9	; 249
    129c:	50 f4       	brcc	.+20     	; 0x12b2 <__addsf3x+0x4e>
    129e:	50 3e       	cpi	r21, 0xE0	; 224
    12a0:	68 f1       	brcs	.+90     	; 0x12fc <__addsf3x+0x98>
    12a2:	1a 16       	cp	r1, r26
    12a4:	f0 40       	sbci	r31, 0x00	; 0
    12a6:	a2 2f       	mov	r26, r18
    12a8:	23 2f       	mov	r18, r19
    12aa:	34 2f       	mov	r19, r20
    12ac:	44 27       	eor	r20, r20
    12ae:	58 5f       	subi	r21, 0xF8	; 248
    12b0:	f3 cf       	rjmp	.-26     	; 0x1298 <__addsf3x+0x34>
    12b2:	46 95       	lsr	r20
    12b4:	37 95       	ror	r19
    12b6:	27 95       	ror	r18
    12b8:	a7 95       	ror	r26
    12ba:	f0 40       	sbci	r31, 0x00	; 0
    12bc:	53 95       	inc	r21
    12be:	c9 f7       	brne	.-14     	; 0x12b2 <__addsf3x+0x4e>
    12c0:	7e f4       	brtc	.+30     	; 0x12e0 <__addsf3x+0x7c>
    12c2:	1f 16       	cp	r1, r31
    12c4:	ba 0b       	sbc	r27, r26
    12c6:	62 0b       	sbc	r22, r18
    12c8:	73 0b       	sbc	r23, r19
    12ca:	84 0b       	sbc	r24, r20
    12cc:	ba f0       	brmi	.+46     	; 0x12fc <__addsf3x+0x98>
    12ce:	91 50       	subi	r25, 0x01	; 1
    12d0:	a1 f0       	breq	.+40     	; 0x12fa <__addsf3x+0x96>
    12d2:	ff 0f       	add	r31, r31
    12d4:	bb 1f       	adc	r27, r27
    12d6:	66 1f       	adc	r22, r22
    12d8:	77 1f       	adc	r23, r23
    12da:	88 1f       	adc	r24, r24
    12dc:	c2 f7       	brpl	.-16     	; 0x12ce <__addsf3x+0x6a>
    12de:	0e c0       	rjmp	.+28     	; 0x12fc <__addsf3x+0x98>
    12e0:	ba 0f       	add	r27, r26
    12e2:	62 1f       	adc	r22, r18
    12e4:	73 1f       	adc	r23, r19
    12e6:	84 1f       	adc	r24, r20
    12e8:	48 f4       	brcc	.+18     	; 0x12fc <__addsf3x+0x98>
    12ea:	87 95       	ror	r24
    12ec:	77 95       	ror	r23
    12ee:	67 95       	ror	r22
    12f0:	b7 95       	ror	r27
    12f2:	f7 95       	ror	r31
    12f4:	9e 3f       	cpi	r25, 0xFE	; 254
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <__addsf3x+0x96>
    12f8:	b3 cf       	rjmp	.-154    	; 0x1260 <__addsf3+0x1e>
    12fa:	93 95       	inc	r25
    12fc:	88 0f       	add	r24, r24
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <__addsf3x+0x9e>
    1300:	99 27       	eor	r25, r25
    1302:	ee 0f       	add	r30, r30
    1304:	97 95       	ror	r25
    1306:	87 95       	ror	r24
    1308:	08 95       	ret

0000130a <__cmpsf2>:
    130a:	d9 d0       	rcall	.+434    	; 0x14be <__fp_cmp>
    130c:	08 f4       	brcc	.+2      	; 0x1310 <__cmpsf2+0x6>
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	08 95       	ret

00001312 <__divsf3>:
    1312:	0c d0       	rcall	.+24     	; 0x132c <__divsf3x>
    1314:	0f c1       	rjmp	.+542    	; 0x1534 <__fp_round>
    1316:	07 d1       	rcall	.+526    	; 0x1526 <__fp_pscB>
    1318:	40 f0       	brcs	.+16     	; 0x132a <__divsf3+0x18>
    131a:	fe d0       	rcall	.+508    	; 0x1518 <__fp_pscA>
    131c:	30 f0       	brcs	.+12     	; 0x132a <__divsf3+0x18>
    131e:	21 f4       	brne	.+8      	; 0x1328 <__divsf3+0x16>
    1320:	5f 3f       	cpi	r21, 0xFF	; 255
    1322:	19 f0       	breq	.+6      	; 0x132a <__divsf3+0x18>
    1324:	f0 c0       	rjmp	.+480    	; 0x1506 <__fp_inf>
    1326:	51 11       	cpse	r21, r1
    1328:	39 c1       	rjmp	.+626    	; 0x159c <__fp_szero>
    132a:	f3 c0       	rjmp	.+486    	; 0x1512 <__fp_nan>

0000132c <__divsf3x>:
    132c:	14 d1       	rcall	.+552    	; 0x1556 <__fp_split3>
    132e:	98 f3       	brcs	.-26     	; 0x1316 <__divsf3+0x4>

00001330 <__divsf3_pse>:
    1330:	99 23       	and	r25, r25
    1332:	c9 f3       	breq	.-14     	; 0x1326 <__divsf3+0x14>
    1334:	55 23       	and	r21, r21
    1336:	b1 f3       	breq	.-20     	; 0x1324 <__divsf3+0x12>
    1338:	95 1b       	sub	r25, r21
    133a:	55 0b       	sbc	r21, r21
    133c:	bb 27       	eor	r27, r27
    133e:	aa 27       	eor	r26, r26
    1340:	62 17       	cp	r22, r18
    1342:	73 07       	cpc	r23, r19
    1344:	84 07       	cpc	r24, r20
    1346:	38 f0       	brcs	.+14     	; 0x1356 <__divsf3_pse+0x26>
    1348:	9f 5f       	subi	r25, 0xFF	; 255
    134a:	5f 4f       	sbci	r21, 0xFF	; 255
    134c:	22 0f       	add	r18, r18
    134e:	33 1f       	adc	r19, r19
    1350:	44 1f       	adc	r20, r20
    1352:	aa 1f       	adc	r26, r26
    1354:	a9 f3       	breq	.-22     	; 0x1340 <__divsf3_pse+0x10>
    1356:	33 d0       	rcall	.+102    	; 0x13be <__divsf3_pse+0x8e>
    1358:	0e 2e       	mov	r0, r30
    135a:	3a f0       	brmi	.+14     	; 0x136a <__divsf3_pse+0x3a>
    135c:	e0 e8       	ldi	r30, 0x80	; 128
    135e:	30 d0       	rcall	.+96     	; 0x13c0 <__divsf3_pse+0x90>
    1360:	91 50       	subi	r25, 0x01	; 1
    1362:	50 40       	sbci	r21, 0x00	; 0
    1364:	e6 95       	lsr	r30
    1366:	00 1c       	adc	r0, r0
    1368:	ca f7       	brpl	.-14     	; 0x135c <__divsf3_pse+0x2c>
    136a:	29 d0       	rcall	.+82     	; 0x13be <__divsf3_pse+0x8e>
    136c:	fe 2f       	mov	r31, r30
    136e:	27 d0       	rcall	.+78     	; 0x13be <__divsf3_pse+0x8e>
    1370:	66 0f       	add	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	bb 1f       	adc	r27, r27
    1378:	26 17       	cp	r18, r22
    137a:	37 07       	cpc	r19, r23
    137c:	48 07       	cpc	r20, r24
    137e:	ab 07       	cpc	r26, r27
    1380:	b0 e8       	ldi	r27, 0x80	; 128
    1382:	09 f0       	breq	.+2      	; 0x1386 <__divsf3_pse+0x56>
    1384:	bb 0b       	sbc	r27, r27
    1386:	80 2d       	mov	r24, r0
    1388:	bf 01       	movw	r22, r30
    138a:	ff 27       	eor	r31, r31
    138c:	93 58       	subi	r25, 0x83	; 131
    138e:	5f 4f       	sbci	r21, 0xFF	; 255
    1390:	2a f0       	brmi	.+10     	; 0x139c <__divsf3_pse+0x6c>
    1392:	9e 3f       	cpi	r25, 0xFE	; 254
    1394:	51 05       	cpc	r21, r1
    1396:	68 f0       	brcs	.+26     	; 0x13b2 <__divsf3_pse+0x82>
    1398:	b6 c0       	rjmp	.+364    	; 0x1506 <__fp_inf>
    139a:	00 c1       	rjmp	.+512    	; 0x159c <__fp_szero>
    139c:	5f 3f       	cpi	r21, 0xFF	; 255
    139e:	ec f3       	brlt	.-6      	; 0x139a <__divsf3_pse+0x6a>
    13a0:	98 3e       	cpi	r25, 0xE8	; 232
    13a2:	dc f3       	brlt	.-10     	; 0x139a <__divsf3_pse+0x6a>
    13a4:	86 95       	lsr	r24
    13a6:	77 95       	ror	r23
    13a8:	67 95       	ror	r22
    13aa:	b7 95       	ror	r27
    13ac:	f7 95       	ror	r31
    13ae:	9f 5f       	subi	r25, 0xFF	; 255
    13b0:	c9 f7       	brne	.-14     	; 0x13a4 <__divsf3_pse+0x74>
    13b2:	88 0f       	add	r24, r24
    13b4:	91 1d       	adc	r25, r1
    13b6:	96 95       	lsr	r25
    13b8:	87 95       	ror	r24
    13ba:	97 f9       	bld	r25, 7
    13bc:	08 95       	ret
    13be:	e1 e0       	ldi	r30, 0x01	; 1
    13c0:	66 0f       	add	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	88 1f       	adc	r24, r24
    13c6:	bb 1f       	adc	r27, r27
    13c8:	62 17       	cp	r22, r18
    13ca:	73 07       	cpc	r23, r19
    13cc:	84 07       	cpc	r24, r20
    13ce:	ba 07       	cpc	r27, r26
    13d0:	20 f0       	brcs	.+8      	; 0x13da <__divsf3_pse+0xaa>
    13d2:	62 1b       	sub	r22, r18
    13d4:	73 0b       	sbc	r23, r19
    13d6:	84 0b       	sbc	r24, r20
    13d8:	ba 0b       	sbc	r27, r26
    13da:	ee 1f       	adc	r30, r30
    13dc:	88 f7       	brcc	.-30     	; 0x13c0 <__divsf3_pse+0x90>
    13de:	e0 95       	com	r30
    13e0:	08 95       	ret

000013e2 <__fixsfsi>:
    13e2:	04 d0       	rcall	.+8      	; 0x13ec <__fixunssfsi>
    13e4:	68 94       	set
    13e6:	b1 11       	cpse	r27, r1
    13e8:	d9 c0       	rjmp	.+434    	; 0x159c <__fp_szero>
    13ea:	08 95       	ret

000013ec <__fixunssfsi>:
    13ec:	bc d0       	rcall	.+376    	; 0x1566 <__fp_splitA>
    13ee:	88 f0       	brcs	.+34     	; 0x1412 <__fixunssfsi+0x26>
    13f0:	9f 57       	subi	r25, 0x7F	; 127
    13f2:	90 f0       	brcs	.+36     	; 0x1418 <__fixunssfsi+0x2c>
    13f4:	b9 2f       	mov	r27, r25
    13f6:	99 27       	eor	r25, r25
    13f8:	b7 51       	subi	r27, 0x17	; 23
    13fa:	a0 f0       	brcs	.+40     	; 0x1424 <__fixunssfsi+0x38>
    13fc:	d1 f0       	breq	.+52     	; 0x1432 <__fixunssfsi+0x46>
    13fe:	66 0f       	add	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	88 1f       	adc	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	1a f0       	brmi	.+6      	; 0x140e <__fixunssfsi+0x22>
    1408:	ba 95       	dec	r27
    140a:	c9 f7       	brne	.-14     	; 0x13fe <__fixunssfsi+0x12>
    140c:	12 c0       	rjmp	.+36     	; 0x1432 <__fixunssfsi+0x46>
    140e:	b1 30       	cpi	r27, 0x01	; 1
    1410:	81 f0       	breq	.+32     	; 0x1432 <__fixunssfsi+0x46>
    1412:	c3 d0       	rcall	.+390    	; 0x159a <__fp_zero>
    1414:	b1 e0       	ldi	r27, 0x01	; 1
    1416:	08 95       	ret
    1418:	c0 c0       	rjmp	.+384    	; 0x159a <__fp_zero>
    141a:	67 2f       	mov	r22, r23
    141c:	78 2f       	mov	r23, r24
    141e:	88 27       	eor	r24, r24
    1420:	b8 5f       	subi	r27, 0xF8	; 248
    1422:	39 f0       	breq	.+14     	; 0x1432 <__fixunssfsi+0x46>
    1424:	b9 3f       	cpi	r27, 0xF9	; 249
    1426:	cc f3       	brlt	.-14     	; 0x141a <__fixunssfsi+0x2e>
    1428:	86 95       	lsr	r24
    142a:	77 95       	ror	r23
    142c:	67 95       	ror	r22
    142e:	b3 95       	inc	r27
    1430:	d9 f7       	brne	.-10     	; 0x1428 <__fixunssfsi+0x3c>
    1432:	3e f4       	brtc	.+14     	; 0x1442 <__fixunssfsi+0x56>
    1434:	90 95       	com	r25
    1436:	80 95       	com	r24
    1438:	70 95       	com	r23
    143a:	61 95       	neg	r22
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	8f 4f       	sbci	r24, 0xFF	; 255
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	08 95       	ret

00001444 <__floatunsisf>:
    1444:	e8 94       	clt
    1446:	09 c0       	rjmp	.+18     	; 0x145a <__floatsisf+0x12>

00001448 <__floatsisf>:
    1448:	97 fb       	bst	r25, 7
    144a:	3e f4       	brtc	.+14     	; 0x145a <__floatsisf+0x12>
    144c:	90 95       	com	r25
    144e:	80 95       	com	r24
    1450:	70 95       	com	r23
    1452:	61 95       	neg	r22
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	99 23       	and	r25, r25
    145c:	a9 f0       	breq	.+42     	; 0x1488 <__floatsisf+0x40>
    145e:	f9 2f       	mov	r31, r25
    1460:	96 e9       	ldi	r25, 0x96	; 150
    1462:	bb 27       	eor	r27, r27
    1464:	93 95       	inc	r25
    1466:	f6 95       	lsr	r31
    1468:	87 95       	ror	r24
    146a:	77 95       	ror	r23
    146c:	67 95       	ror	r22
    146e:	b7 95       	ror	r27
    1470:	f1 11       	cpse	r31, r1
    1472:	f8 cf       	rjmp	.-16     	; 0x1464 <__floatsisf+0x1c>
    1474:	fa f4       	brpl	.+62     	; 0x14b4 <__floatsisf+0x6c>
    1476:	bb 0f       	add	r27, r27
    1478:	11 f4       	brne	.+4      	; 0x147e <__floatsisf+0x36>
    147a:	60 ff       	sbrs	r22, 0
    147c:	1b c0       	rjmp	.+54     	; 0x14b4 <__floatsisf+0x6c>
    147e:	6f 5f       	subi	r22, 0xFF	; 255
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	8f 4f       	sbci	r24, 0xFF	; 255
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	16 c0       	rjmp	.+44     	; 0x14b4 <__floatsisf+0x6c>
    1488:	88 23       	and	r24, r24
    148a:	11 f0       	breq	.+4      	; 0x1490 <__floatsisf+0x48>
    148c:	96 e9       	ldi	r25, 0x96	; 150
    148e:	11 c0       	rjmp	.+34     	; 0x14b2 <__floatsisf+0x6a>
    1490:	77 23       	and	r23, r23
    1492:	21 f0       	breq	.+8      	; 0x149c <__floatsisf+0x54>
    1494:	9e e8       	ldi	r25, 0x8E	; 142
    1496:	87 2f       	mov	r24, r23
    1498:	76 2f       	mov	r23, r22
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <__floatsisf+0x5e>
    149c:	66 23       	and	r22, r22
    149e:	71 f0       	breq	.+28     	; 0x14bc <__floatsisf+0x74>
    14a0:	96 e8       	ldi	r25, 0x86	; 134
    14a2:	86 2f       	mov	r24, r22
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	2a f0       	brmi	.+10     	; 0x14b4 <__floatsisf+0x6c>
    14aa:	9a 95       	dec	r25
    14ac:	66 0f       	add	r22, r22
    14ae:	77 1f       	adc	r23, r23
    14b0:	88 1f       	adc	r24, r24
    14b2:	da f7       	brpl	.-10     	; 0x14aa <__floatsisf+0x62>
    14b4:	88 0f       	add	r24, r24
    14b6:	96 95       	lsr	r25
    14b8:	87 95       	ror	r24
    14ba:	97 f9       	bld	r25, 7
    14bc:	08 95       	ret

000014be <__fp_cmp>:
    14be:	99 0f       	add	r25, r25
    14c0:	00 08       	sbc	r0, r0
    14c2:	55 0f       	add	r21, r21
    14c4:	aa 0b       	sbc	r26, r26
    14c6:	e0 e8       	ldi	r30, 0x80	; 128
    14c8:	fe ef       	ldi	r31, 0xFE	; 254
    14ca:	16 16       	cp	r1, r22
    14cc:	17 06       	cpc	r1, r23
    14ce:	e8 07       	cpc	r30, r24
    14d0:	f9 07       	cpc	r31, r25
    14d2:	c0 f0       	brcs	.+48     	; 0x1504 <__fp_cmp+0x46>
    14d4:	12 16       	cp	r1, r18
    14d6:	13 06       	cpc	r1, r19
    14d8:	e4 07       	cpc	r30, r20
    14da:	f5 07       	cpc	r31, r21
    14dc:	98 f0       	brcs	.+38     	; 0x1504 <__fp_cmp+0x46>
    14de:	62 1b       	sub	r22, r18
    14e0:	73 0b       	sbc	r23, r19
    14e2:	84 0b       	sbc	r24, r20
    14e4:	95 0b       	sbc	r25, r21
    14e6:	39 f4       	brne	.+14     	; 0x14f6 <__fp_cmp+0x38>
    14e8:	0a 26       	eor	r0, r26
    14ea:	61 f0       	breq	.+24     	; 0x1504 <__fp_cmp+0x46>
    14ec:	23 2b       	or	r18, r19
    14ee:	24 2b       	or	r18, r20
    14f0:	25 2b       	or	r18, r21
    14f2:	21 f4       	brne	.+8      	; 0x14fc <__fp_cmp+0x3e>
    14f4:	08 95       	ret
    14f6:	0a 26       	eor	r0, r26
    14f8:	09 f4       	brne	.+2      	; 0x14fc <__fp_cmp+0x3e>
    14fa:	a1 40       	sbci	r26, 0x01	; 1
    14fc:	a6 95       	lsr	r26
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	81 1d       	adc	r24, r1
    1502:	81 1d       	adc	r24, r1
    1504:	08 95       	ret

00001506 <__fp_inf>:
    1506:	97 f9       	bld	r25, 7
    1508:	9f 67       	ori	r25, 0x7F	; 127
    150a:	80 e8       	ldi	r24, 0x80	; 128
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	08 95       	ret

00001512 <__fp_nan>:
    1512:	9f ef       	ldi	r25, 0xFF	; 255
    1514:	80 ec       	ldi	r24, 0xC0	; 192
    1516:	08 95       	ret

00001518 <__fp_pscA>:
    1518:	00 24       	eor	r0, r0
    151a:	0a 94       	dec	r0
    151c:	16 16       	cp	r1, r22
    151e:	17 06       	cpc	r1, r23
    1520:	18 06       	cpc	r1, r24
    1522:	09 06       	cpc	r0, r25
    1524:	08 95       	ret

00001526 <__fp_pscB>:
    1526:	00 24       	eor	r0, r0
    1528:	0a 94       	dec	r0
    152a:	12 16       	cp	r1, r18
    152c:	13 06       	cpc	r1, r19
    152e:	14 06       	cpc	r1, r20
    1530:	05 06       	cpc	r0, r21
    1532:	08 95       	ret

00001534 <__fp_round>:
    1534:	09 2e       	mov	r0, r25
    1536:	03 94       	inc	r0
    1538:	00 0c       	add	r0, r0
    153a:	11 f4       	brne	.+4      	; 0x1540 <__fp_round+0xc>
    153c:	88 23       	and	r24, r24
    153e:	52 f0       	brmi	.+20     	; 0x1554 <__fp_round+0x20>
    1540:	bb 0f       	add	r27, r27
    1542:	40 f4       	brcc	.+16     	; 0x1554 <__fp_round+0x20>
    1544:	bf 2b       	or	r27, r31
    1546:	11 f4       	brne	.+4      	; 0x154c <__fp_round+0x18>
    1548:	60 ff       	sbrs	r22, 0
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <__fp_round+0x20>
    154c:	6f 5f       	subi	r22, 0xFF	; 255
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	8f 4f       	sbci	r24, 0xFF	; 255
    1552:	9f 4f       	sbci	r25, 0xFF	; 255
    1554:	08 95       	ret

00001556 <__fp_split3>:
    1556:	57 fd       	sbrc	r21, 7
    1558:	90 58       	subi	r25, 0x80	; 128
    155a:	44 0f       	add	r20, r20
    155c:	55 1f       	adc	r21, r21
    155e:	59 f0       	breq	.+22     	; 0x1576 <__fp_splitA+0x10>
    1560:	5f 3f       	cpi	r21, 0xFF	; 255
    1562:	71 f0       	breq	.+28     	; 0x1580 <__fp_splitA+0x1a>
    1564:	47 95       	ror	r20

00001566 <__fp_splitA>:
    1566:	88 0f       	add	r24, r24
    1568:	97 fb       	bst	r25, 7
    156a:	99 1f       	adc	r25, r25
    156c:	61 f0       	breq	.+24     	; 0x1586 <__fp_splitA+0x20>
    156e:	9f 3f       	cpi	r25, 0xFF	; 255
    1570:	79 f0       	breq	.+30     	; 0x1590 <__fp_splitA+0x2a>
    1572:	87 95       	ror	r24
    1574:	08 95       	ret
    1576:	12 16       	cp	r1, r18
    1578:	13 06       	cpc	r1, r19
    157a:	14 06       	cpc	r1, r20
    157c:	55 1f       	adc	r21, r21
    157e:	f2 cf       	rjmp	.-28     	; 0x1564 <__fp_split3+0xe>
    1580:	46 95       	lsr	r20
    1582:	f1 df       	rcall	.-30     	; 0x1566 <__fp_splitA>
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <__fp_splitA+0x30>
    1586:	16 16       	cp	r1, r22
    1588:	17 06       	cpc	r1, r23
    158a:	18 06       	cpc	r1, r24
    158c:	99 1f       	adc	r25, r25
    158e:	f1 cf       	rjmp	.-30     	; 0x1572 <__fp_splitA+0xc>
    1590:	86 95       	lsr	r24
    1592:	71 05       	cpc	r23, r1
    1594:	61 05       	cpc	r22, r1
    1596:	08 94       	sec
    1598:	08 95       	ret

0000159a <__fp_zero>:
    159a:	e8 94       	clt

0000159c <__fp_szero>:
    159c:	bb 27       	eor	r27, r27
    159e:	66 27       	eor	r22, r22
    15a0:	77 27       	eor	r23, r23
    15a2:	cb 01       	movw	r24, r22
    15a4:	97 f9       	bld	r25, 7
    15a6:	08 95       	ret

000015a8 <__gesf2>:
    15a8:	8a df       	rcall	.-236    	; 0x14be <__fp_cmp>
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <__gesf2+0x6>
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	08 95       	ret

000015b0 <__mulsf3>:
    15b0:	0a d0       	rcall	.+20     	; 0x15c6 <__mulsf3x>
    15b2:	c0 cf       	rjmp	.-128    	; 0x1534 <__fp_round>
    15b4:	b1 df       	rcall	.-158    	; 0x1518 <__fp_pscA>
    15b6:	28 f0       	brcs	.+10     	; 0x15c2 <__mulsf3+0x12>
    15b8:	b6 df       	rcall	.-148    	; 0x1526 <__fp_pscB>
    15ba:	18 f0       	brcs	.+6      	; 0x15c2 <__mulsf3+0x12>
    15bc:	95 23       	and	r25, r21
    15be:	09 f0       	breq	.+2      	; 0x15c2 <__mulsf3+0x12>
    15c0:	a2 cf       	rjmp	.-188    	; 0x1506 <__fp_inf>
    15c2:	a7 cf       	rjmp	.-178    	; 0x1512 <__fp_nan>
    15c4:	eb cf       	rjmp	.-42     	; 0x159c <__fp_szero>

000015c6 <__mulsf3x>:
    15c6:	c7 df       	rcall	.-114    	; 0x1556 <__fp_split3>
    15c8:	a8 f3       	brcs	.-22     	; 0x15b4 <__mulsf3+0x4>

000015ca <__mulsf3_pse>:
    15ca:	99 23       	and	r25, r25
    15cc:	d9 f3       	breq	.-10     	; 0x15c4 <__mulsf3+0x14>
    15ce:	55 23       	and	r21, r21
    15d0:	c9 f3       	breq	.-14     	; 0x15c4 <__mulsf3+0x14>
    15d2:	95 0f       	add	r25, r21
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	55 1f       	adc	r21, r21
    15d8:	aa 27       	eor	r26, r26
    15da:	ee 27       	eor	r30, r30
    15dc:	ff 27       	eor	r31, r31
    15de:	bb 27       	eor	r27, r27
    15e0:	00 24       	eor	r0, r0
    15e2:	08 94       	sec
    15e4:	67 95       	ror	r22
    15e6:	20 f4       	brcc	.+8      	; 0x15f0 <__mulsf3_pse+0x26>
    15e8:	e2 0f       	add	r30, r18
    15ea:	f3 1f       	adc	r31, r19
    15ec:	b4 1f       	adc	r27, r20
    15ee:	0a 1e       	adc	r0, r26
    15f0:	22 0f       	add	r18, r18
    15f2:	33 1f       	adc	r19, r19
    15f4:	44 1f       	adc	r20, r20
    15f6:	aa 1f       	adc	r26, r26
    15f8:	66 95       	lsr	r22
    15fa:	a9 f7       	brne	.-22     	; 0x15e6 <__mulsf3_pse+0x1c>
    15fc:	77 95       	ror	r23
    15fe:	30 f4       	brcc	.+12     	; 0x160c <__mulsf3_pse+0x42>
    1600:	f3 0f       	add	r31, r19
    1602:	b4 1f       	adc	r27, r20
    1604:	0a 1e       	adc	r0, r26
    1606:	12 1e       	adc	r1, r18
    1608:	08 f4       	brcc	.+2      	; 0x160c <__mulsf3_pse+0x42>
    160a:	63 95       	inc	r22
    160c:	33 0f       	add	r19, r19
    160e:	44 1f       	adc	r20, r20
    1610:	aa 1f       	adc	r26, r26
    1612:	22 1f       	adc	r18, r18
    1614:	76 95       	lsr	r23
    1616:	99 f7       	brne	.-26     	; 0x15fe <__mulsf3_pse+0x34>
    1618:	87 95       	ror	r24
    161a:	20 f4       	brcc	.+8      	; 0x1624 <__mulsf3_pse+0x5a>
    161c:	b4 0f       	add	r27, r20
    161e:	0a 1e       	adc	r0, r26
    1620:	12 1e       	adc	r1, r18
    1622:	63 1f       	adc	r22, r19
    1624:	44 0f       	add	r20, r20
    1626:	aa 1f       	adc	r26, r26
    1628:	22 1f       	adc	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	86 95       	lsr	r24
    162e:	a9 f7       	brne	.-22     	; 0x161a <__mulsf3_pse+0x50>
    1630:	86 2f       	mov	r24, r22
    1632:	71 2d       	mov	r23, r1
    1634:	60 2d       	mov	r22, r0
    1636:	11 24       	eor	r1, r1
    1638:	9f 57       	subi	r25, 0x7F	; 127
    163a:	50 40       	sbci	r21, 0x00	; 0
    163c:	8a f0       	brmi	.+34     	; 0x1660 <__mulsf3_pse+0x96>
    163e:	e1 f0       	breq	.+56     	; 0x1678 <__mulsf3_pse+0xae>
    1640:	88 23       	and	r24, r24
    1642:	4a f0       	brmi	.+18     	; 0x1656 <__mulsf3_pse+0x8c>
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	bb 1f       	adc	r27, r27
    164a:	66 1f       	adc	r22, r22
    164c:	77 1f       	adc	r23, r23
    164e:	88 1f       	adc	r24, r24
    1650:	91 50       	subi	r25, 0x01	; 1
    1652:	50 40       	sbci	r21, 0x00	; 0
    1654:	a9 f7       	brne	.-22     	; 0x1640 <__mulsf3_pse+0x76>
    1656:	9e 3f       	cpi	r25, 0xFE	; 254
    1658:	51 05       	cpc	r21, r1
    165a:	70 f0       	brcs	.+28     	; 0x1678 <__mulsf3_pse+0xae>
    165c:	54 cf       	rjmp	.-344    	; 0x1506 <__fp_inf>
    165e:	9e cf       	rjmp	.-196    	; 0x159c <__fp_szero>
    1660:	5f 3f       	cpi	r21, 0xFF	; 255
    1662:	ec f3       	brlt	.-6      	; 0x165e <__mulsf3_pse+0x94>
    1664:	98 3e       	cpi	r25, 0xE8	; 232
    1666:	dc f3       	brlt	.-10     	; 0x165e <__mulsf3_pse+0x94>
    1668:	86 95       	lsr	r24
    166a:	77 95       	ror	r23
    166c:	67 95       	ror	r22
    166e:	b7 95       	ror	r27
    1670:	f7 95       	ror	r31
    1672:	e7 95       	ror	r30
    1674:	9f 5f       	subi	r25, 0xFF	; 255
    1676:	c1 f7       	brne	.-16     	; 0x1668 <__mulsf3_pse+0x9e>
    1678:	fe 2b       	or	r31, r30
    167a:	88 0f       	add	r24, r24
    167c:	91 1d       	adc	r25, r1
    167e:	96 95       	lsr	r25
    1680:	87 95       	ror	r24
    1682:	97 f9       	bld	r25, 7
    1684:	08 95       	ret

00001686 <__divmodhi4>:
    1686:	97 fb       	bst	r25, 7
    1688:	07 2e       	mov	r0, r23
    168a:	16 f4       	brtc	.+4      	; 0x1690 <__divmodhi4+0xa>
    168c:	00 94       	com	r0
    168e:	06 d0       	rcall	.+12     	; 0x169c <__divmodhi4_neg1>
    1690:	77 fd       	sbrc	r23, 7
    1692:	08 d0       	rcall	.+16     	; 0x16a4 <__divmodhi4_neg2>
    1694:	49 d0       	rcall	.+146    	; 0x1728 <__udivmodhi4>
    1696:	07 fc       	sbrc	r0, 7
    1698:	05 d0       	rcall	.+10     	; 0x16a4 <__divmodhi4_neg2>
    169a:	3e f4       	brtc	.+14     	; 0x16aa <__divmodhi4_exit>

0000169c <__divmodhi4_neg1>:
    169c:	90 95       	com	r25
    169e:	81 95       	neg	r24
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	08 95       	ret

000016a4 <__divmodhi4_neg2>:
    16a4:	70 95       	com	r23
    16a6:	61 95       	neg	r22
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255

000016aa <__divmodhi4_exit>:
    16aa:	08 95       	ret

000016ac <__udivmodsi4>:
    16ac:	a1 e2       	ldi	r26, 0x21	; 33
    16ae:	1a 2e       	mov	r1, r26
    16b0:	aa 1b       	sub	r26, r26
    16b2:	bb 1b       	sub	r27, r27
    16b4:	fd 01       	movw	r30, r26
    16b6:	0d c0       	rjmp	.+26     	; 0x16d2 <__udivmodsi4_ep>

000016b8 <__udivmodsi4_loop>:
    16b8:	aa 1f       	adc	r26, r26
    16ba:	bb 1f       	adc	r27, r27
    16bc:	ee 1f       	adc	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	a2 17       	cp	r26, r18
    16c2:	b3 07       	cpc	r27, r19
    16c4:	e4 07       	cpc	r30, r20
    16c6:	f5 07       	cpc	r31, r21
    16c8:	20 f0       	brcs	.+8      	; 0x16d2 <__udivmodsi4_ep>
    16ca:	a2 1b       	sub	r26, r18
    16cc:	b3 0b       	sbc	r27, r19
    16ce:	e4 0b       	sbc	r30, r20
    16d0:	f5 0b       	sbc	r31, r21

000016d2 <__udivmodsi4_ep>:
    16d2:	66 1f       	adc	r22, r22
    16d4:	77 1f       	adc	r23, r23
    16d6:	88 1f       	adc	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	1a 94       	dec	r1
    16dc:	69 f7       	brne	.-38     	; 0x16b8 <__udivmodsi4_loop>
    16de:	60 95       	com	r22
    16e0:	70 95       	com	r23
    16e2:	80 95       	com	r24
    16e4:	90 95       	com	r25
    16e6:	9b 01       	movw	r18, r22
    16e8:	ac 01       	movw	r20, r24
    16ea:	bd 01       	movw	r22, r26
    16ec:	cf 01       	movw	r24, r30
    16ee:	08 95       	ret

000016f0 <__divmodsi4>:
    16f0:	05 2e       	mov	r0, r21
    16f2:	97 fb       	bst	r25, 7
    16f4:	16 f4       	brtc	.+4      	; 0x16fa <__divmodsi4+0xa>
    16f6:	00 94       	com	r0
    16f8:	0f d0       	rcall	.+30     	; 0x1718 <__negsi2>
    16fa:	57 fd       	sbrc	r21, 7
    16fc:	05 d0       	rcall	.+10     	; 0x1708 <__divmodsi4_neg2>
    16fe:	d6 df       	rcall	.-84     	; 0x16ac <__udivmodsi4>
    1700:	07 fc       	sbrc	r0, 7
    1702:	02 d0       	rcall	.+4      	; 0x1708 <__divmodsi4_neg2>
    1704:	46 f4       	brtc	.+16     	; 0x1716 <__divmodsi4_exit>
    1706:	08 c0       	rjmp	.+16     	; 0x1718 <__negsi2>

00001708 <__divmodsi4_neg2>:
    1708:	50 95       	com	r21
    170a:	40 95       	com	r20
    170c:	30 95       	com	r19
    170e:	21 95       	neg	r18
    1710:	3f 4f       	sbci	r19, 0xFF	; 255
    1712:	4f 4f       	sbci	r20, 0xFF	; 255
    1714:	5f 4f       	sbci	r21, 0xFF	; 255

00001716 <__divmodsi4_exit>:
    1716:	08 95       	ret

00001718 <__negsi2>:
    1718:	90 95       	com	r25
    171a:	80 95       	com	r24
    171c:	70 95       	com	r23
    171e:	61 95       	neg	r22
    1720:	7f 4f       	sbci	r23, 0xFF	; 255
    1722:	8f 4f       	sbci	r24, 0xFF	; 255
    1724:	9f 4f       	sbci	r25, 0xFF	; 255
    1726:	08 95       	ret

00001728 <__udivmodhi4>:
    1728:	aa 1b       	sub	r26, r26
    172a:	bb 1b       	sub	r27, r27
    172c:	51 e1       	ldi	r21, 0x11	; 17
    172e:	07 c0       	rjmp	.+14     	; 0x173e <__udivmodhi4_ep>

00001730 <__udivmodhi4_loop>:
    1730:	aa 1f       	adc	r26, r26
    1732:	bb 1f       	adc	r27, r27
    1734:	a6 17       	cp	r26, r22
    1736:	b7 07       	cpc	r27, r23
    1738:	10 f0       	brcs	.+4      	; 0x173e <__udivmodhi4_ep>
    173a:	a6 1b       	sub	r26, r22
    173c:	b7 0b       	sbc	r27, r23

0000173e <__udivmodhi4_ep>:
    173e:	88 1f       	adc	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	5a 95       	dec	r21
    1744:	a9 f7       	brne	.-22     	; 0x1730 <__udivmodhi4_loop>
    1746:	80 95       	com	r24
    1748:	90 95       	com	r25
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	08 95       	ret

00001750 <eeprom_read_byte>:
    1750:	e1 99       	sbic	0x1c, 1	; 28
    1752:	fe cf       	rjmp	.-4      	; 0x1750 <eeprom_read_byte>
    1754:	9f bb       	out	0x1f, r25	; 31
    1756:	8e bb       	out	0x1e, r24	; 30
    1758:	e0 9a       	sbi	0x1c, 0	; 28
    175a:	99 27       	eor	r25, r25
    175c:	8d b3       	in	r24, 0x1d	; 29
    175e:	08 95       	ret

00001760 <eeprom_write_byte>:
    1760:	26 2f       	mov	r18, r22

00001762 <eeprom_write_r18>:
    1762:	e1 99       	sbic	0x1c, 1	; 28
    1764:	fe cf       	rjmp	.-4      	; 0x1762 <eeprom_write_r18>
    1766:	1c ba       	out	0x1c, r1	; 28
    1768:	9f bb       	out	0x1f, r25	; 31
    176a:	8e bb       	out	0x1e, r24	; 30
    176c:	2d bb       	out	0x1d, r18	; 29
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	e2 9a       	sbi	0x1c, 2	; 28
    1774:	e1 9a       	sbi	0x1c, 1	; 28
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	08 95       	ret

0000177c <_exit>:
    177c:	f8 94       	cli

0000177e <__stop_program>:
    177e:	ff cf       	rjmp	.-2      	; 0x177e <__stop_program>
