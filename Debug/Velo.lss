
Velo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000129e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  0000129e  00001352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800100  00800100  000013f2  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000013f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001b0  00000000  00000000  00001468  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b69  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ae1  00000000  00000000  00003181  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e44  00000000  00000000  00003c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000428  00000000  00000000  00004aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000076a  00000000  00000000  00004ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001133  00000000  00000000  0000563a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  0000676d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	32 c1       	rjmp	.+612    	; 0x266 <__ctors_end>
       2:	56 c1       	rjmp	.+684    	; 0x2b0 <__vector_1>
       4:	4b c1       	rjmp	.+662    	; 0x29c <__bad_interrupt>
       6:	b3 c2       	rjmp	.+1382   	; 0x56e <__vector_3>
       8:	49 c1       	rjmp	.+658    	; 0x29c <__bad_interrupt>
       a:	48 c1       	rjmp	.+656    	; 0x29c <__bad_interrupt>
       c:	47 c1       	rjmp	.+654    	; 0x29c <__bad_interrupt>
       e:	46 c1       	rjmp	.+652    	; 0x29c <__bad_interrupt>
      10:	45 c1       	rjmp	.+650    	; 0x29c <__bad_interrupt>
      12:	44 c1       	rjmp	.+648    	; 0x29c <__bad_interrupt>
      14:	70 c1       	rjmp	.+736    	; 0x2f6 <__vector_10>
      16:	42 c1       	rjmp	.+644    	; 0x29c <__bad_interrupt>
      18:	41 c1       	rjmp	.+642    	; 0x29c <__bad_interrupt>
      1a:	40 c1       	rjmp	.+640    	; 0x29c <__bad_interrupt>
      1c:	3f c1       	rjmp	.+638    	; 0x29c <__bad_interrupt>

0000001e <__trampolines_end>:
	...
      26:	00 2f       	mov	r16, r16
      28:	00 00       	nop
      2a:	00 00       	nop
      2c:	07 00       	.word	0x0007	; ????
      2e:	07 00       	.word	0x0007	; ????
      30:	00 14       	cp	r0, r0
      32:	7f 14       	cp	r7, r15
      34:	7f 14       	cp	r7, r15
      36:	00 24       	eor	r0, r0
      38:	2a 7f       	andi	r18, 0xFA	; 250
      3a:	2a 12       	cpse	r2, r26
      3c:	00 62       	ori	r16, 0x20	; 32
      3e:	64 08       	sbc	r6, r4
      40:	13 23       	and	r17, r19
      42:	00 36       	cpi	r16, 0x60	; 96
      44:	49 55       	subi	r20, 0x59	; 89
      46:	22 50       	subi	r18, 0x02	; 2
      48:	00 00       	nop
      4a:	05 03       	mulsu	r16, r21
      4c:	00 00       	nop
      4e:	00 00       	nop
      50:	1c 22       	and	r1, r28
      52:	41 00       	.word	0x0041	; ????
      54:	00 00       	nop
      56:	41 22       	and	r4, r17
      58:	1c 00       	.word	0x001c	; ????
      5a:	00 14       	cp	r0, r0
      5c:	08 3e       	cpi	r16, 0xE8	; 232
      5e:	08 14       	cp	r0, r8
      60:	00 08       	sbc	r0, r0
      62:	08 3e       	cpi	r16, 0xE8	; 232
      64:	08 08       	sbc	r0, r8
      66:	00 00       	nop
      68:	00 a0       	ldd	r0, Z+32	; 0x20
      6a:	60 00       	.word	0x0060	; ????
      6c:	00 08       	sbc	r0, r0
      6e:	08 08       	sbc	r0, r8
      70:	08 08       	sbc	r0, r8
      72:	00 00       	nop
      74:	60 60       	ori	r22, 0x00	; 0
      76:	00 00       	nop
      78:	00 20       	and	r0, r0
      7a:	10 08       	sbc	r1, r0
      7c:	04 02       	muls	r16, r20
      7e:	00 3e       	cpi	r16, 0xE0	; 224
      80:	51 49       	sbci	r21, 0x91	; 145
      82:	45 3e       	cpi	r20, 0xE5	; 229
      84:	00 00       	nop
      86:	42 7f       	andi	r20, 0xF2	; 242
      88:	40 00       	.word	0x0040	; ????
      8a:	00 42       	sbci	r16, 0x20	; 32
      8c:	61 51       	subi	r22, 0x11	; 17
      8e:	49 46       	sbci	r20, 0x69	; 105
      90:	00 21       	and	r16, r0
      92:	41 45       	sbci	r20, 0x51	; 81
      94:	4b 31       	cpi	r20, 0x1B	; 27
      96:	00 18       	sub	r0, r0
      98:	14 12       	cpse	r1, r20
      9a:	7f 10       	cpse	r7, r15
      9c:	00 27       	eor	r16, r16
      9e:	45 45       	sbci	r20, 0x55	; 85
      a0:	45 39       	cpi	r20, 0x95	; 149
      a2:	00 3c       	cpi	r16, 0xC0	; 192
      a4:	4a 49       	sbci	r20, 0x9A	; 154
      a6:	49 30       	cpi	r20, 0x09	; 9
      a8:	00 01       	movw	r0, r0
      aa:	71 09       	sbc	r23, r1
      ac:	05 03       	mulsu	r16, r21
      ae:	00 36       	cpi	r16, 0x60	; 96
      b0:	49 49       	sbci	r20, 0x99	; 153
      b2:	49 36       	cpi	r20, 0x69	; 105
      b4:	00 06       	cpc	r0, r16
      b6:	49 49       	sbci	r20, 0x99	; 153
      b8:	29 1e       	adc	r2, r25
      ba:	00 00       	nop
      bc:	36 36       	cpi	r19, 0x66	; 102
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	56 36       	cpi	r21, 0x66	; 102
      c4:	00 00       	nop
      c6:	00 08       	sbc	r0, r0
      c8:	14 22       	and	r1, r20
      ca:	41 00       	.word	0x0041	; ????
      cc:	00 14       	cp	r0, r0
      ce:	14 14       	cp	r1, r4
      d0:	14 14       	cp	r1, r4
      d2:	00 00       	nop
      d4:	41 22       	and	r4, r17
      d6:	14 08       	sbc	r1, r4
      d8:	00 02       	muls	r16, r16
      da:	01 51       	subi	r16, 0x11	; 17
      dc:	09 06       	cpc	r0, r25
      de:	00 32       	cpi	r16, 0x20	; 32
      e0:	49 59       	subi	r20, 0x99	; 153
      e2:	51 3e       	cpi	r21, 0xE1	; 225
      e4:	00 7c       	andi	r16, 0xC0	; 192
      e6:	12 11       	cpse	r17, r2
      e8:	12 7c       	andi	r17, 0xC2	; 194
      ea:	00 7f       	andi	r16, 0xF0	; 240
      ec:	49 49       	sbci	r20, 0x99	; 153
      ee:	49 36       	cpi	r20, 0x69	; 105
      f0:	00 3e       	cpi	r16, 0xE0	; 224
      f2:	41 41       	sbci	r20, 0x11	; 17
      f4:	41 22       	and	r4, r17
      f6:	00 7f       	andi	r16, 0xF0	; 240
      f8:	41 41       	sbci	r20, 0x11	; 17
      fa:	22 1c       	adc	r2, r2
      fc:	00 7f       	andi	r16, 0xF0	; 240
      fe:	49 49       	sbci	r20, 0x99	; 153
     100:	49 41       	sbci	r20, 0x19	; 25
     102:	00 7f       	andi	r16, 0xF0	; 240
     104:	09 09       	sbc	r16, r9
     106:	09 01       	movw	r0, r18
     108:	00 3e       	cpi	r16, 0xE0	; 224
     10a:	41 49       	sbci	r20, 0x91	; 145
     10c:	49 7a       	andi	r20, 0xA9	; 169
     10e:	00 7f       	andi	r16, 0xF0	; 240
     110:	08 08       	sbc	r0, r8
     112:	08 7f       	andi	r16, 0xF8	; 248
     114:	00 00       	nop
     116:	41 7f       	andi	r20, 0xF1	; 241
     118:	41 00       	.word	0x0041	; ????
     11a:	00 20       	and	r0, r0
     11c:	40 41       	sbci	r20, 0x10	; 16
     11e:	3f 01       	movw	r6, r30
     120:	00 7f       	andi	r16, 0xF0	; 240
     122:	08 14       	cp	r0, r8
     124:	22 41       	sbci	r18, 0x12	; 18
     126:	00 7f       	andi	r16, 0xF0	; 240
     128:	40 40       	sbci	r20, 0x00	; 0
     12a:	40 40       	sbci	r20, 0x00	; 0
     12c:	00 7f       	andi	r16, 0xF0	; 240
     12e:	02 0c       	add	r0, r2
     130:	02 7f       	andi	r16, 0xF2	; 242
     132:	00 7f       	andi	r16, 0xF0	; 240
     134:	04 08       	sbc	r0, r4
     136:	10 7f       	andi	r17, 0xF0	; 240
     138:	00 3e       	cpi	r16, 0xE0	; 224
     13a:	41 41       	sbci	r20, 0x11	; 17
     13c:	41 3e       	cpi	r20, 0xE1	; 225
     13e:	00 7f       	andi	r16, 0xF0	; 240
     140:	09 09       	sbc	r16, r9
     142:	09 06       	cpc	r0, r25
     144:	00 3e       	cpi	r16, 0xE0	; 224
     146:	41 51       	subi	r20, 0x11	; 17
     148:	21 5e       	subi	r18, 0xE1	; 225
     14a:	00 7f       	andi	r16, 0xF0	; 240
     14c:	09 19       	sub	r16, r9
     14e:	29 46       	sbci	r18, 0x69	; 105
     150:	00 46       	sbci	r16, 0x60	; 96
     152:	49 49       	sbci	r20, 0x99	; 153
     154:	49 31       	cpi	r20, 0x19	; 25
     156:	00 01       	movw	r0, r0
     158:	01 7f       	andi	r16, 0xF1	; 241
     15a:	01 01       	movw	r0, r2
     15c:	00 3f       	cpi	r16, 0xF0	; 240
     15e:	40 40       	sbci	r20, 0x00	; 0
     160:	40 3f       	cpi	r20, 0xF0	; 240
     162:	00 1f       	adc	r16, r16
     164:	20 40       	sbci	r18, 0x00	; 0
     166:	20 1f       	adc	r18, r16
     168:	00 3f       	cpi	r16, 0xF0	; 240
     16a:	40 38       	cpi	r20, 0x80	; 128
     16c:	40 3f       	cpi	r20, 0xF0	; 240
     16e:	00 63       	ori	r16, 0x30	; 48
     170:	14 08       	sbc	r1, r4
     172:	14 63       	ori	r17, 0x34	; 52
     174:	00 07       	cpc	r16, r16
     176:	08 70       	andi	r16, 0x08	; 8
     178:	08 07       	cpc	r16, r24
     17a:	00 61       	ori	r16, 0x10	; 16
     17c:	51 49       	sbci	r21, 0x91	; 145
     17e:	45 43       	sbci	r20, 0x35	; 53
     180:	00 00       	nop
     182:	7f 41       	sbci	r23, 0x1F	; 31
     184:	41 00       	.word	0x0041	; ????
     186:	00 55       	subi	r16, 0x50	; 80
     188:	2a 55       	subi	r18, 0x5A	; 90
     18a:	2a 55       	subi	r18, 0x5A	; 90
     18c:	00 00       	nop
     18e:	41 41       	sbci	r20, 0x11	; 17
     190:	7f 00       	.word	0x007f	; ????
     192:	00 04       	cpc	r0, r0
     194:	02 01       	movw	r0, r4
     196:	02 04       	cpc	r0, r2
     198:	00 40       	sbci	r16, 0x00	; 0
     19a:	40 40       	sbci	r20, 0x00	; 0
     19c:	40 40       	sbci	r20, 0x00	; 0
     19e:	00 00       	nop
     1a0:	01 02       	muls	r16, r17
     1a2:	04 00       	.word	0x0004	; ????
     1a4:	00 20       	and	r0, r0
     1a6:	54 54       	subi	r21, 0x44	; 68
     1a8:	54 78       	andi	r21, 0x84	; 132
     1aa:	00 7f       	andi	r16, 0xF0	; 240
     1ac:	48 44       	sbci	r20, 0x48	; 72
     1ae:	44 38       	cpi	r20, 0x84	; 132
     1b0:	00 38       	cpi	r16, 0x80	; 128
     1b2:	44 44       	sbci	r20, 0x44	; 68
     1b4:	44 20       	and	r4, r4
     1b6:	00 38       	cpi	r16, 0x80	; 128
     1b8:	44 44       	sbci	r20, 0x44	; 68
     1ba:	48 7f       	andi	r20, 0xF8	; 248
     1bc:	00 38       	cpi	r16, 0x80	; 128
     1be:	54 54       	subi	r21, 0x44	; 68
     1c0:	54 18       	sub	r5, r4
     1c2:	00 08       	sbc	r0, r0
     1c4:	7e 09       	sbc	r23, r14
     1c6:	01 02       	muls	r16, r17
     1c8:	00 18       	sub	r0, r0
     1ca:	a4 a4       	ldd	r10, Z+44	; 0x2c
     1cc:	a4 7c       	andi	r26, 0xC4	; 196
     1ce:	00 7f       	andi	r16, 0xF0	; 240
     1d0:	08 04       	cpc	r0, r8
     1d2:	04 78       	andi	r16, 0x84	; 132
     1d4:	00 00       	nop
     1d6:	44 7d       	andi	r20, 0xD4	; 212
     1d8:	40 00       	.word	0x0040	; ????
     1da:	00 40       	sbci	r16, 0x00	; 0
     1dc:	80 84       	ldd	r8, Z+8	; 0x08
     1de:	7d 00       	.word	0x007d	; ????
     1e0:	00 7f       	andi	r16, 0xF0	; 240
     1e2:	10 28       	or	r1, r0
     1e4:	44 00       	.word	0x0044	; ????
     1e6:	00 00       	nop
     1e8:	41 7f       	andi	r20, 0xF1	; 241
     1ea:	40 00       	.word	0x0040	; ????
     1ec:	00 7c       	andi	r16, 0xC0	; 192
     1ee:	04 18       	sub	r0, r4
     1f0:	04 78       	andi	r16, 0x84	; 132
     1f2:	00 7c       	andi	r16, 0xC0	; 192
     1f4:	08 04       	cpc	r0, r8
     1f6:	04 78       	andi	r16, 0x84	; 132
     1f8:	00 38       	cpi	r16, 0x80	; 128
     1fa:	44 44       	sbci	r20, 0x44	; 68
     1fc:	44 38       	cpi	r20, 0x84	; 132
     1fe:	00 fc       	sbrc	r0, 0
     200:	24 24       	eor	r2, r4
     202:	24 18       	sub	r2, r4
     204:	00 18       	sub	r0, r0
     206:	24 24       	eor	r2, r4
     208:	18 fc       	.word	0xfc18	; ????
     20a:	00 7c       	andi	r16, 0xC0	; 192
     20c:	08 04       	cpc	r0, r8
     20e:	04 08       	sbc	r0, r4
     210:	00 48       	sbci	r16, 0x80	; 128
     212:	54 54       	subi	r21, 0x44	; 68
     214:	54 20       	and	r5, r4
     216:	00 04       	cpc	r0, r0
     218:	3f 44       	sbci	r19, 0x4F	; 79
     21a:	40 20       	and	r4, r0
     21c:	00 3c       	cpi	r16, 0xC0	; 192
     21e:	40 40       	sbci	r20, 0x00	; 0
     220:	20 7c       	andi	r18, 0xC0	; 192
     222:	00 1c       	adc	r0, r0
     224:	20 40       	sbci	r18, 0x00	; 0
     226:	20 1c       	adc	r2, r0
     228:	00 3c       	cpi	r16, 0xC0	; 192
     22a:	40 30       	cpi	r20, 0x00	; 0
     22c:	40 3c       	cpi	r20, 0xC0	; 192
     22e:	00 44       	sbci	r16, 0x40	; 64
     230:	28 10       	cpse	r2, r8
     232:	28 44       	sbci	r18, 0x48	; 72
     234:	00 1c       	adc	r0, r0
     236:	a0 a0       	ldd	r10, Z+32	; 0x20
     238:	a0 7c       	andi	r26, 0xC0	; 192
     23a:	00 44       	sbci	r16, 0x40	; 64
     23c:	64 54       	subi	r22, 0x44	; 68
     23e:	4c 44       	sbci	r20, 0x4C	; 76
     240:	14 14       	cp	r1, r4
     242:	14 14       	cp	r1, r4
     244:	14 14       	cp	r1, r4

00000246 <ssd1306_init_sequence>:
     246:	ae d5 f0 a8 3f d3 00 40 8d 14 20 00 a1 c8 da 12     ....?..@.. .....
     256:	81 3f d9 22 db 20 a4 a6 2e af 22 00 3f 21 00 7f     .?.". ....".?!..

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf e5       	ldi	r28, 0x5F	; 95
     26c:	d2 e0       	ldi	r29, 0x02	; 2
     26e:	de bf       	out	0x3e, r29	; 62
     270:	cd bf       	out	0x3d, r28	; 61

00000272 <__do_copy_data>:
     272:	11 e0       	ldi	r17, 0x01	; 1
     274:	a0 e6       	ldi	r26, 0x60	; 96
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	ee e9       	ldi	r30, 0x9E	; 158
     27a:	f2 e1       	ldi	r31, 0x12	; 18
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x10>
     27e:	05 90       	lpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a0 30       	cpi	r26, 0x00	; 0
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0xc>

00000288 <__do_clear_bss>:
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	a0 e0       	ldi	r26, 0x00	; 0
     28c:	b1 e0       	ldi	r27, 0x01	; 1
     28e:	01 c0       	rjmp	.+2      	; 0x292 <.do_clear_bss_start>

00000290 <.do_clear_bss_loop>:
     290:	1d 92       	st	X+, r1

00000292 <.do_clear_bss_start>:
     292:	a1 35       	cpi	r26, 0x51	; 81
     294:	b2 07       	cpc	r27, r18
     296:	e1 f7       	brne	.-8      	; 0x290 <.do_clear_bss_loop>
     298:	e8 d2       	rcall	.+1488   	; 0x86a <main>
     29a:	ff c7       	rjmp	.+4094   	; 0x129a <_exit>

0000029c <__bad_interrupt>:
     29c:	b1 ce       	rjmp	.-670    	; 0x0 <__vectors>

0000029e <attach_wheel_interrupt>:
		_delay_ms(1);
    }
}

void attach_wheel_interrupt() {
	cli();
     29e:	f8 94       	cli

	// the rising edge of INT0 generates an interrupt
	MCUCR |= _BV(ISC00) | _BV(ISC01);
     2a0:	85 b7       	in	r24, 0x35	; 53
     2a2:	83 60       	ori	r24, 0x03	; 3
     2a4:	85 bf       	out	0x35, r24	; 53
	
	// enable external interrupt
	GIMSK |= _BV(INT0);
     2a6:	8b b7       	in	r24, 0x3b	; 59
     2a8:	80 64       	ori	r24, 0x40	; 64
     2aa:	8b bf       	out	0x3b, r24	; 59

	sei();
     2ac:	78 94       	sei
     2ae:	08 95       	ret

000002b0 <__vector_1>:
}

ISR(INT0_vect) {
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	8f 93       	push	r24
     2bc:	9f 93       	push	r25
	wheel_rotated = true;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <wheel_rotated>
	// TODO remove
	PORTB ^= _BV(LED_PIN);
     2c4:	98 b3       	in	r25, 0x18	; 24
     2c6:	80 e1       	ldi	r24, 0x10	; 16
     2c8:	89 27       	eor	r24, r25
     2ca:	88 bb       	out	0x18, r24	; 24
}
     2cc:	9f 91       	pop	r25
     2ce:	8f 91       	pop	r24
     2d0:	0f 90       	pop	r0
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	0f 90       	pop	r0
     2d6:	1f 90       	pop	r1
     2d8:	18 95       	reti

000002da <start_millis_timer>:

void start_millis_timer() {
	cli();
     2da:	f8 94       	cli
	
	// set timer0 CTC mode
	TCCR0A |= _BV(WGM01);
     2dc:	8a b5       	in	r24, 0x2a	; 42
     2de:	82 60       	ori	r24, 0x02	; 2
     2e0:	8a bd       	out	0x2a, r24	; 42
	
	// set timer0 compare value
	OCR0A = 125;
     2e2:	8d e7       	ldi	r24, 0x7D	; 125
     2e4:	89 bd       	out	0x29, r24	; 41
	
	// set timer0 prescaler 64
	TCCR0B |= _BV(CS00) | _BV(CS01);
     2e6:	83 b7       	in	r24, 0x33	; 51
     2e8:	83 60       	ori	r24, 0x03	; 3
     2ea:	83 bf       	out	0x33, r24	; 51
	
	// enable interrupt
	TIMSK |= _BV(OCIE0A);
     2ec:	89 b7       	in	r24, 0x39	; 57
     2ee:	80 61       	ori	r24, 0x10	; 16
     2f0:	89 bf       	out	0x39, r24	; 57
	
	sei();
     2f2:	78 94       	sei
     2f4:	08 95       	ret

000002f6 <__vector_10>:
}

ISR(TIMER0_COMPA_vect) {
     2f6:	1f 92       	push	r1
     2f8:	0f 92       	push	r0
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	0f 92       	push	r0
     2fe:	11 24       	eor	r1, r1
     300:	8f 93       	push	r24
     302:	9f 93       	push	r25
     304:	af 93       	push	r26
     306:	bf 93       	push	r27
	ms++;
     308:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ms>
     30c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ms+0x1>
     310:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <ms+0x2>
     314:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <ms+0x3>
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	a1 1d       	adc	r26, r1
     31c:	b1 1d       	adc	r27, r1
     31e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ms>
     322:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ms+0x1>
     326:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <ms+0x2>
     32a:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <ms+0x3>
}
     32e:	bf 91       	pop	r27
     330:	af 91       	pop	r26
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	0f 90       	pop	r0
     338:	0f be       	out	0x3f, r0	; 63
     33a:	0f 90       	pop	r0
     33c:	1f 90       	pop	r1
     33e:	18 95       	reti

00000340 <millis>:

uint32_t millis() {
	uint32_t copy;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     340:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     342:	f8 94       	cli
		copy = ms;
     344:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <ms>
     348:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <ms+0x1>
     34c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ms+0x2>
     350:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ms+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     354:	2f bf       	out	0x3f, r18	; 63
	}
	
	return copy;
}
     356:	08 95       	ret

00000358 <set_wheel_diameter>:
	}
	wheel_length = (diameter * 3.14) / 100000.0;
}

void set_wheel_diameter(uint8_t diameter) {
	if (diameter > 0 && diameter < 255) {
     358:	9f ef       	ldi	r25, 0xFF	; 255
     35a:	98 0f       	add	r25, r24
     35c:	9e 3f       	cpi	r25, 0xFE	; 254
     35e:	20 f4       	brcc	.+8      	; 0x368 <set_wheel_diameter+0x10>
     360:	68 2f       	mov	r22, r24
		eeprom_write_byte(&EEPROM_WHEEL_DIAMETER, diameter);
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	8b d7       	rcall	.+3862   	; 0x127e <eeprom_write_byte>
     368:	08 95       	ret

0000036a <calc_wheel_length>:
	
	return copy;
}

void calc_wheel_length() {
	uint8_t diameter = eeprom_read_byte(&EEPROM_WHEEL_DIAMETER); // cm
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	7f d7       	rcall	.+3838   	; 0x126e <eeprom_read_byte>
	if (diameter == 0xFF) {
     370:	8f 3f       	cpi	r24, 0xFF	; 255
     372:	19 f4       	brne	.+6      	; 0x37a <calc_wheel_length+0x10>
		diameter = 65; // default
		set_wheel_diameter(diameter);
     374:	81 e4       	ldi	r24, 0x41	; 65
     376:	f0 df       	rcall	.-32     	; 0x358 <set_wheel_diameter>
}

void calc_wheel_length() {
	uint8_t diameter = eeprom_read_byte(&EEPROM_WHEEL_DIAMETER); // cm
	if (diameter == 0xFF) {
		diameter = 65; // default
     378:	81 e4       	ldi	r24, 0x41	; 65
		set_wheel_diameter(diameter);
	}
	wheel_length = (diameter * 3.14) / 100000.0;
     37a:	68 2f       	mov	r22, r24
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	fc d5       	rcall	.+3064   	; 0xf7c <__floatsisf>
     384:	23 ec       	ldi	r18, 0xC3	; 195
     386:	35 ef       	ldi	r19, 0xF5	; 245
     388:	48 e4       	ldi	r20, 0x48	; 72
     38a:	50 e4       	ldi	r21, 0x40	; 64
     38c:	ab d6       	rcall	.+3414   	; 0x10e4 <__mulsf3>
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e5       	ldi	r19, 0x50	; 80
     392:	43 ec       	ldi	r20, 0xC3	; 195
     394:	57 e4       	ldi	r21, 0x47	; 71
     396:	57 d5       	rcall	.+2734   	; 0xe46 <__divsf3>
     398:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <wheel_length>
     39c:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <wheel_length+0x1>
     3a0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <wheel_length+0x2>
     3a4:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <wheel_length+0x3>
     3a8:	08 95       	ret

000003aa <turn_display>:
		eeprom_write_byte(&EEPROM_WHEEL_DIAMETER, diameter);
	}
}

void turn_display(bool on) {
	display_turned = on;
     3aa:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <display_turned>
	ssd1306_turn_display(on);
     3ae:	ca d3       	rcall	.+1940   	; 0xb44 <ssd1306_turn_display>
     3b0:	08 95       	ret

000003b2 <switch_display_menu>:
}

void switch_display_menu() {
	display_menu++;
     3b2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <display_menu>
     3b6:	8f 5f       	subi	r24, 0xFF	; 255
	if (display_menu == 5) {
     3b8:	85 30       	cpi	r24, 0x05	; 5
     3ba:	19 f0       	breq	.+6      	; 0x3c2 <switch_display_menu+0x10>
	display_turned = on;
	ssd1306_turn_display(on);
}

void switch_display_menu() {
	display_menu++;
     3bc:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <display_menu>
     3c0:	08 95       	ret
	if (display_menu == 5) {
		display_menu = 0;
     3c2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <display_menu>
     3c6:	08 95       	ret

000003c8 <display_data>:
	}
}

// NOTE: Screen width - 128, that is 21 symbols per row.
void display_data() {
	ssd1306_clear();
     3c8:	20 e0       	ldi	r18, 0x00	; 0
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	97 d3       	rcall	.+1838   	; 0xb00 <ssd1306_fill4>

	switch(display_menu) {
     3d2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <display_menu>
     3d6:	82 30       	cpi	r24, 0x02	; 2
     3d8:	09 f4       	brne	.+2      	; 0x3dc <display_data+0x14>
     3da:	5f c0       	rjmp	.+190    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     3dc:	28 f4       	brcc	.+10     	; 0x3e8 <display_data+0x20>
     3de:	88 23       	and	r24, r24
     3e0:	51 f0       	breq	.+20     	; 0x3f6 <display_data+0x2e>
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	89 f1       	breq	.+98     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3e6:	08 95       	ret
     3e8:	83 30       	cpi	r24, 0x03	; 3
     3ea:	09 f4       	brne	.+2      	; 0x3ee <display_data+0x26>
     3ec:	62 c0       	rjmp	.+196    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     3ee:	84 30       	cpi	r24, 0x04	; 4
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <display_data+0x2c>
     3f2:	73 c0       	rjmp	.+230    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     3f4:	08 95       	ret
		case MENU_MAIN:
			ssd1306_setpos(0, 0);
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	6d d3       	rcall	.+1754   	; 0xad6 <ssd1306_setpos>
			ssd1306tx_string("s: ");
     3fc:	8f e9       	ldi	r24, 0x9F	; 159
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	d8 d3       	rcall	.+1968   	; 0xbb2 <ssd1306tx_string>
			ssd1306tx_float(speed, 1);
     402:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <speed>
     406:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <speed+0x1>
     40a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <speed+0x2>
     40e:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <speed+0x3>
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	a9 d4       	rcall	.+2386   	; 0xd6a <ssd1306tx_float>
			ssd1306tx_string(" km/h");
     418:	8b e8       	ldi	r24, 0x8B	; 139
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	ca d3       	rcall	.+1940   	; 0xbb2 <ssd1306tx_string>

			ssd1306_setpos(0, 10);
     41e:	6a e0       	ldi	r22, 0x0A	; 10
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	59 d3       	rcall	.+1714   	; 0xad6 <ssd1306_setpos>
			ssd1306tx_string("d: ");
     424:	81 e9       	ldi	r24, 0x91	; 145
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	c4 d3       	rcall	.+1928   	; 0xbb2 <ssd1306tx_string>
			ssd1306tx_float(distance, 2);
     42a:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <distance>
     42e:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <distance+0x1>
     432:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <distance+0x2>
     436:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <distance+0x3>
     43a:	42 e0       	ldi	r20, 0x02	; 2
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	95 d4       	rcall	.+2346   	; 0xd6a <ssd1306tx_float>
			ssd1306tx_string(" km");
     440:	85 e9       	ldi	r24, 0x95	; 149
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	b6 d3       	rcall	.+1900   	; 0xbb2 <ssd1306tx_string>
			break;
     446:	08 95       	ret
		
		case MENU_SPEED:
			ssd1306_setpos(0, 0);
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	44 d3       	rcall	.+1672   	; 0xad6 <ssd1306_setpos>
			ssd1306tx_string("ms: ");
     44e:	89 e9       	ldi	r24, 0x99	; 153
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	af d3       	rcall	.+1886   	; 0xbb2 <ssd1306tx_string>
			ssd1306tx_float(max_speed, 1);
     454:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <max_speed>
     458:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <max_speed+0x1>
     45c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <max_speed+0x2>
     460:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <max_speed+0x3>
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	80 d4       	rcall	.+2304   	; 0xd6a <ssd1306tx_float>
			ssd1306tx_string(" km/h");
     46a:	8b e8       	ldi	r24, 0x8B	; 139
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	a1 d3       	rcall	.+1858   	; 0xbb2 <ssd1306tx_string>

			ssd1306_setpos(0, 10);
     470:	6a e0       	ldi	r22, 0x0A	; 10
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	30 d3       	rcall	.+1632   	; 0xad6 <ssd1306_setpos>
			ssd1306tx_string("as: ");
     476:	8e e9       	ldi	r24, 0x9E	; 158
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	9b d3       	rcall	.+1846   	; 0xbb2 <ssd1306tx_string>
			ssd1306tx_float(avg_speed, 1);
     47c:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <avg_speed>
     480:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <avg_speed+0x1>
     484:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <avg_speed+0x2>
     488:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <avg_speed+0x3>
     48c:	41 e0       	ldi	r20, 0x01	; 1
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	6c d4       	rcall	.+2264   	; 0xd6a <ssd1306tx_float>
			ssd1306tx_string(" km/h");
     492:	8b e8       	ldi	r24, 0x8B	; 139
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	8d d3       	rcall	.+1818   	; 0xbb2 <ssd1306tx_string>
			break;
     498:	08 95       	ret

		case MENU_RPM:
			ssd1306_setpos(0, 0);
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	1b d3       	rcall	.+1590   	; 0xad6 <ssd1306_setpos>
			ssd1306tx_int(wheel_rpm);
     4a0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <wheel_rpm>
     4a4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <wheel_rpm+0x1>
     4a8:	d3 d3       	rcall	.+1958   	; 0xc50 <ssd1306tx_int>
			ssd1306tx_string(" rpm");
     4aa:	83 ea       	ldi	r24, 0xA3	; 163
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	81 d3       	rcall	.+1794   	; 0xbb2 <ssd1306tx_string>
			break;
     4b0:	08 95       	ret
		
		case MENU_POWER:
			ssd1306_setpos(0, 0);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0f d3       	rcall	.+1566   	; 0xad6 <ssd1306_setpos>
			ssd1306tx_string("pwr save:");
     4b8:	88 ea       	ldi	r24, 0xA8	; 168
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	7a d3       	rcall	.+1780   	; 0xbb2 <ssd1306tx_string>

			ssd1306_setpos(0, 10);
     4be:	6a e0       	ldi	r22, 0x0A	; 10
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	09 d3       	rcall	.+1554   	; 0xad6 <ssd1306_setpos>
			ssd1306tx_string(pwr_save_mode ? "on" : "off");
     4c4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <pwr_save_mode>
     4c8:	81 11       	cpse	r24, r1
     4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4cc:	87 e8       	ldi	r24, 0x87	; 135
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d2:	84 e8       	ldi	r24, 0x84	; 132
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	6d d3       	rcall	.+1754   	; 0xbb2 <ssd1306tx_string>
			break;
     4d8:	08 95       	ret

		case MENU_LED:
			ssd1306_setpos(0, 0);
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	fb d2       	rcall	.+1526   	; 0xad6 <ssd1306_setpos>
			ssd1306tx_string("led:");
     4e0:	82 eb       	ldi	r24, 0xB2	; 178
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	66 d3       	rcall	.+1740   	; 0xbb2 <ssd1306tx_string>

			ssd1306_setpos(0, 10);
     4e6:	6a e0       	ldi	r22, 0x0A	; 10
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	f5 d2       	rcall	.+1514   	; 0xad6 <ssd1306_setpos>
			ssd1306tx_string(led_turned ? "on" : "off");
     4ec:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <led_turned>
     4f0:	81 11       	cpse	r24, r1
     4f2:	03 c0       	rjmp	.+6      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4f4:	87 e8       	ldi	r24, 0x87	; 135
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fa:	84 e8       	ldi	r24, 0x84	; 132
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	59 d3       	rcall	.+1714   	; 0xbb2 <ssd1306tx_string>
     500:	08 95       	ret

00000502 <enable_pwr_save_mode>:
			break;
	}
}

void enable_pwr_save_mode(bool enable) {
	pwr_save_mode = !pwr_save_mode;
     502:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <pwr_save_mode>
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	68 27       	eor	r22, r24
     50a:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <pwr_save_mode>
	eeprom_write_byte(&EEPROM_PWR_SAVE_MODE, pwr_save_mode);
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	b5 d6       	rcall	.+3434   	; 0x127e <eeprom_write_byte>
     514:	08 95       	ret

00000516 <enable_sleep_mode>:
}

void enable_sleep_mode() {
	turn_display(false);
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	48 df       	rcall	.-368    	; 0x3aa <turn_display>
	
	// turn off led
	PORTB &= ~_BV(LED_PIN);
     51a:	c4 98       	cbi	0x18, 4	; 24
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     51c:	85 b7       	in	r24, 0x35	; 53
     51e:	87 7e       	andi	r24, 0xE7	; 231
     520:	80 61       	ori	r24, 0x10	; 16
     522:	85 bf       	out	0x35, r24	; 53
	cli();
     524:	f8 94       	cli
	sleep_enable();
     526:	85 b7       	in	r24, 0x35	; 53
     528:	80 62       	ori	r24, 0x20	; 32
     52a:	85 bf       	out	0x35, r24	; 53
	sleep_bod_disable();
     52c:	85 b7       	in	r24, 0x35	; 53
     52e:	84 68       	ori	r24, 0x84	; 132
     530:	85 bf       	out	0x35, r24	; 53
     532:	8b 7f       	andi	r24, 0xFB	; 251
     534:	85 bf       	out	0x35, r24	; 53
	sei();
     536:	78 94       	sei
	sleep_cpu();
     538:	88 95       	sleep

	sleep_disable();
     53a:	85 b7       	in	r24, 0x35	; 53
     53c:	8f 7d       	andi	r24, 0xDF	; 223
     53e:	85 bf       	out	0x35, r24	; 53
	sei();
     540:	78 94       	sei
     542:	08 95       	ret

00000544 <turn_led>:
}

void turn_led(bool on) {
	led_turned = on;
     544:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <led_turned>
	
	TCCR1 = 0;
     548:	10 be       	out	0x30, r1	; 48
	OCR1C = 0;
     54a:	1d bc       	out	0x2d, r1	; 45
	TIMSK = 0;
     54c:	19 be       	out	0x39, r1	; 57
	
	if (on) {
     54e:	88 23       	and	r24, r24
     550:	69 f0       	breq	.+26     	; 0x56c <turn_led+0x28>
		cli();
     552:	f8 94       	cli
		
		// set timer1 CTC mode
		TCCR1 |= _BV(CTC1);
     554:	80 b7       	in	r24, 0x30	; 48
     556:	80 68       	ori	r24, 0x80	; 128
     558:	80 bf       	out	0x30, r24	; 48
		
		// set timer1 compare value
		OCR1C = 244;
     55a:	84 ef       	ldi	r24, 0xF4	; 244
     55c:	8d bd       	out	0x2d, r24	; 45
		
		// set timer1 prescaler 8192
		TCCR1 |= _BV(CS11) | _BV(CS12) | _BV(CS13);
     55e:	80 b7       	in	r24, 0x30	; 48
     560:	8e 60       	ori	r24, 0x0E	; 14
     562:	80 bf       	out	0x30, r24	; 48
		
		// enable interrupt
		TIMSK |= _BV(OCIE1A);
     564:	89 b7       	in	r24, 0x39	; 57
     566:	80 64       	ori	r24, 0x40	; 64
     568:	89 bf       	out	0x39, r24	; 57

		sei();
     56a:	78 94       	sei
     56c:	08 95       	ret

0000056e <__vector_3>:
	}
}

// toggle led every 250 ms
ISR(TIMER1_COMPA_vect) {
     56e:	1f 92       	push	r1
     570:	0f 92       	push	r0
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	0f 92       	push	r0
     576:	11 24       	eor	r1, r1
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
	PORTB ^= _BV(LED_PIN);
     57c:	98 b3       	in	r25, 0x18	; 24
     57e:	80 e1       	ldi	r24, 0x10	; 16
     580:	89 27       	eor	r24, r25
     582:	88 bb       	out	0x18, r24	; 24
}
     584:	9f 91       	pop	r25
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <handle_btn_click>:

void handle_btn_click(uint8_t pin_state, uint32_t timer_now) {
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	6a 01       	movw	r12, r20
     59c:	7b 01       	movw	r14, r22
	// click start
	if (!btn_pressed && !pin_state) {
     59e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <btn_pressed>
     5a2:	91 11       	cpse	r25, r1
     5a4:	64 c0       	rjmp	.+200    	; 0x66e <handle_btn_click+0xdc>
     5a6:	81 11       	cpse	r24, r1
     5a8:	65 c0       	rjmp	.+202    	; 0x674 <handle_btn_click+0xe2>
		btn_pressed = true;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <btn_pressed>
		btn_timer = timer_now;
     5b0:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <btn_timer>
     5b4:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <btn_timer+0x1>
     5b8:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <btn_timer+0x2>
     5bc:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <btn_timer+0x3>
     5c0:	13 c0       	rjmp	.+38     	; 0x5e8 <handle_btn_click+0x56>
	}
	
	// handle single button click
	if (btn_pressed && pin_state) {
		btn_pressed = false;
     5c2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <btn_pressed>
		if (!btn_long_pressed && display_turned) { // single press
     5c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     5ca:	81 11       	cpse	r24, r1
     5cc:	06 c0       	rjmp	.+12     	; 0x5da <handle_btn_click+0x48>
     5ce:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <display_turned>
     5d2:	88 23       	and	r24, r24
     5d4:	11 f0       	breq	.+4      	; 0x5da <handle_btn_click+0x48>
			switch_display_menu();
     5d6:	ed de       	rcall	.-550    	; 0x3b2 <switch_display_menu>
			display_data();
     5d8:	f7 de       	rcall	.-530    	; 0x3c8 <display_data>
		}
		btn_long_pressed = false;
     5da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	}
	
	// handle long button click
	if (btn_pressed && !btn_long_pressed && ((timer_now - btn_timer) >= LONG_PRESS_TIME)) {
     5de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <btn_pressed>
     5e2:	81 11       	cpse	r24, r1
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <handle_btn_click+0x5e>
     5e6:	46 c0       	rjmp	.+140    	; 0x674 <handle_btn_click+0xe2>
     5e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     5ec:	81 11       	cpse	r24, r1
     5ee:	42 c0       	rjmp	.+132    	; 0x674 <handle_btn_click+0xe2>
     5f0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <btn_timer>
     5f4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <btn_timer+0x1>
     5f8:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <btn_timer+0x2>
     5fc:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <btn_timer+0x3>
     600:	a7 01       	movw	r20, r14
     602:	96 01       	movw	r18, r12
     604:	28 1b       	sub	r18, r24
     606:	39 0b       	sbc	r19, r25
     608:	4a 0b       	sbc	r20, r26
     60a:	5b 0b       	sbc	r21, r27
     60c:	da 01       	movw	r26, r20
     60e:	c9 01       	movw	r24, r18
     610:	84 3f       	cpi	r24, 0xF4	; 244
     612:	91 40       	sbci	r25, 0x01	; 1
     614:	a1 05       	cpc	r26, r1
     616:	b1 05       	cpc	r27, r1
     618:	68 f1       	brcs	.+90     	; 0x674 <handle_btn_click+0xe2>
		btn_long_pressed = true;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
		switch (display_menu) {
     620:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <display_menu>
     624:	83 30       	cpi	r24, 0x03	; 3
     626:	19 f0       	breq	.+6      	; 0x62e <handle_btn_click+0x9c>
     628:	84 30       	cpi	r24, 0x04	; 4
     62a:	a1 f0       	breq	.+40     	; 0x654 <handle_btn_click+0xc2>
     62c:	1a c0       	rjmp	.+52     	; 0x662 <handle_btn_click+0xd0>
			case MENU_POWER:
				enable_pwr_save_mode(!pwr_save_mode);
     62e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <pwr_save_mode>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	89 27       	eor	r24, r25
     636:	65 df       	rcall	.-310    	; 0x502 <enable_pwr_save_mode>
				display_data();
     638:	c7 de       	rcall	.-626    	; 0x3c8 <display_data>
				if (pwr_save_mode) {
     63a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <pwr_save_mode>
     63e:	88 23       	and	r24, r24
     640:	c9 f0       	breq	.+50     	; 0x674 <handle_btn_click+0xe2>
					wheel_rotation_last_time = timer_now; // fixme
     642:	c0 92 3f 01 	sts	0x013F, r12	; 0x80013f <wheel_rotation_last_time>
     646:	d0 92 40 01 	sts	0x0140, r13	; 0x800140 <wheel_rotation_last_time+0x1>
     64a:	e0 92 41 01 	sts	0x0141, r14	; 0x800141 <wheel_rotation_last_time+0x2>
     64e:	f0 92 42 01 	sts	0x0142, r15	; 0x800142 <wheel_rotation_last_time+0x3>
     652:	10 c0       	rjmp	.+32     	; 0x674 <handle_btn_click+0xe2>
				}
				break;
			case MENU_LED:
				turn_led(!led_turned);
     654:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <led_turned>
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	89 27       	eor	r24, r25
     65c:	73 df       	rcall	.-282    	; 0x544 <turn_led>
				display_data();
     65e:	b4 de       	rcall	.-664    	; 0x3c8 <display_data>
				break;
     660:	09 c0       	rjmp	.+18     	; 0x674 <handle_btn_click+0xe2>
			default:
				turn_display(!display_turned);
     662:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <display_turned>
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	89 27       	eor	r24, r25
     66a:	9f de       	rcall	.-706    	; 0x3aa <turn_display>
				break;
		}
	}
}
     66c:	03 c0       	rjmp	.+6      	; 0x674 <handle_btn_click+0xe2>
		btn_pressed = true;
		btn_timer = timer_now;
	}
	
	// handle single button click
	if (btn_pressed && pin_state) {
     66e:	81 11       	cpse	r24, r1
     670:	a8 cf       	rjmp	.-176    	; 0x5c2 <handle_btn_click+0x30>
     672:	ba cf       	rjmp	.-140    	; 0x5e8 <handle_btn_click+0x56>
			default:
				turn_display(!display_turned);
				break;
		}
	}
}
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	cf 90       	pop	r12
     67c:	08 95       	ret

0000067e <calc_avg_speed>:
		wheel_rotation_counter = 0;
		wheel_rotation_start_time = 0;
	}
}

void calc_avg_speed(float speed) {
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	6b 01       	movw	r12, r22
     698:	7c 01       	movw	r14, r24
	if (speed == 0) {
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	a9 01       	movw	r20, r18
     6a0:	ce d3       	rcall	.+1948   	; 0xe3e <__cmpsf2>
     6a2:	88 23       	and	r24, r24
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <calc_avg_speed+0x2a>
     6a6:	57 c0       	rjmp	.+174    	; 0x756 <calc_avg_speed+0xd8>
		return;
	}
	
	speed_arr[speed_arr_index++] = speed;
     6a8:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <speed_arr_index>
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	8e 0f       	add	r24, r30
     6b0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <speed_arr_index>
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	e0 5e       	subi	r30, 0xE0	; 224
     6c0:	fe 4f       	sbci	r31, 0xFE	; 254
     6c2:	c0 82       	st	Z, r12
     6c4:	d1 82       	std	Z+1, r13	; 0x01
     6c6:	e2 82       	std	Z+2, r14	; 0x02
     6c8:	f3 82       	std	Z+3, r15	; 0x03
	
	if (speed_arr_index == 5) {
     6ca:	85 30       	cpi	r24, 0x05	; 5
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <calc_avg_speed+0x52>
     6ce:	43 c0       	rjmp	.+134    	; 0x756 <calc_avg_speed+0xd8>
		speed_arr_index = 0;
     6d0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <speed_arr_index>
     6d4:	c0 e2       	ldi	r28, 0x20	; 32
     6d6:	d1 e0       	ldi	r29, 0x01	; 1
     6d8:	04 e3       	ldi	r16, 0x34	; 52
     6da:	11 e0       	ldi	r17, 0x01	; 1
		float sum = 0;
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	cb 01       	movw	r24, r22
		for (uint8_t i = 0; i < 5; i++) {
			sum += speed_arr[i];
     6e2:	29 91       	ld	r18, Y+
     6e4:	39 91       	ld	r19, Y+
     6e6:	49 91       	ld	r20, Y+
     6e8:	59 91       	ld	r21, Y+
     6ea:	45 d3       	rcall	.+1674   	; 0xd76 <__addsf3>
	speed_arr[speed_arr_index++] = speed;
	
	if (speed_arr_index == 5) {
		speed_arr_index = 0;
		float sum = 0;
		for (uint8_t i = 0; i < 5; i++) {
     6ec:	c0 17       	cp	r28, r16
     6ee:	d1 07       	cpc	r29, r17
     6f0:	c1 f7       	brne	.-16     	; 0x6e2 <calc_avg_speed+0x64>
			sum += speed_arr[i];
		}
		
		sum /= 5;
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 ea       	ldi	r20, 0xA0	; 160
     6f8:	50 e4       	ldi	r21, 0x40	; 64
     6fa:	a5 d3       	rcall	.+1866   	; 0xe46 <__divsf3>
     6fc:	4b 01       	movw	r8, r22
     6fe:	5c 01       	movw	r10, r24
		if (avg_speed == 0) {
     700:	c0 90 01 01 	lds	r12, 0x0101	; 0x800101 <avg_speed>
     704:	d0 90 02 01 	lds	r13, 0x0102	; 0x800102 <avg_speed+0x1>
     708:	e0 90 03 01 	lds	r14, 0x0103	; 0x800103 <avg_speed+0x2>
     70c:	f0 90 04 01 	lds	r15, 0x0104	; 0x800104 <avg_speed+0x3>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	a9 01       	movw	r20, r18
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	91 d3       	rcall	.+1826   	; 0xe3e <__cmpsf2>
     71c:	81 11       	cpse	r24, r1
     71e:	09 c0       	rjmp	.+18     	; 0x732 <calc_avg_speed+0xb4>
			avg_speed = sum;
     720:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <avg_speed>
     724:	90 92 02 01 	sts	0x0102, r9	; 0x800102 <avg_speed+0x1>
     728:	a0 92 03 01 	sts	0x0103, r10	; 0x800103 <avg_speed+0x2>
     72c:	b0 92 04 01 	sts	0x0104, r11	; 0x800104 <avg_speed+0x3>
     730:	12 c0       	rjmp	.+36     	; 0x756 <calc_avg_speed+0xd8>
			} else {
			avg_speed = (avg_speed + sum) / 2;
     732:	a7 01       	movw	r20, r14
     734:	96 01       	movw	r18, r12
     736:	c5 01       	movw	r24, r10
     738:	b4 01       	movw	r22, r8
     73a:	1d d3       	rcall	.+1594   	; 0xd76 <__addsf3>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	5f e3       	ldi	r21, 0x3F	; 63
     744:	cf d4       	rcall	.+2462   	; 0x10e4 <__mulsf3>
     746:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <avg_speed>
     74a:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <avg_speed+0x1>
     74e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <avg_speed+0x2>
     752:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <avg_speed+0x3>
		}
	}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	df 90       	pop	r13
     764:	cf 90       	pop	r12
     766:	bf 90       	pop	r11
     768:	af 90       	pop	r10
     76a:	9f 90       	pop	r9
     76c:	8f 90       	pop	r8
     76e:	08 95       	ret

00000770 <calc_speed>:
				break;
		}
	}
}

void calc_speed(uint32_t timer_now) {
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
	if (wheel_rotation_counter == WHEEL_ROTATION_MAX) {
     778:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <wheel_rotation_counter>
     77c:	25 30       	cpi	r18, 0x05	; 5
     77e:	09 f0       	breq	.+2      	; 0x782 <calc_speed+0x12>
     780:	6f c0       	rjmp	.+222    	; 0x860 <calc_speed+0xf0>
     782:	dc 01       	movw	r26, r24
     784:	cb 01       	movw	r24, r22
		uint32_t interval = timer_now - wheel_rotation_start_time;
		float avg_interval = interval / WHEEL_ROTATION_MAX;

		uint16_t rpm = 60000 / avg_interval;
     786:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <wheel_rotation_start_time>
     78a:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <wheel_rotation_start_time+0x1>
     78e:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <wheel_rotation_start_time+0x2>
     792:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <wheel_rotation_start_time+0x3>
     796:	bc 01       	movw	r22, r24
     798:	cd 01       	movw	r24, r26
     79a:	6c 19       	sub	r22, r12
     79c:	7d 09       	sbc	r23, r13
     79e:	8e 09       	sbc	r24, r14
     7a0:	9f 09       	sbc	r25, r15
     7a2:	25 e0       	ldi	r18, 0x05	; 5
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	2b d5       	rcall	.+2646   	; 0x1202 <__udivmodsi4>
     7ac:	ca 01       	movw	r24, r20
     7ae:	b9 01       	movw	r22, r18
     7b0:	e3 d3       	rcall	.+1990   	; 0xf78 <__floatunsisf>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e6       	ldi	r23, 0x60	; 96
     7ba:	8a e6       	ldi	r24, 0x6A	; 106
     7bc:	97 e4       	ldi	r25, 0x47	; 71
     7be:	43 d3       	rcall	.+1670   	; 0xe46 <__divsf3>
     7c0:	af d3       	rcall	.+1886   	; 0xf20 <__fixunssfsi>
		if (rpm < WHEEL_RPM_MAX) {
     7c2:	68 35       	cpi	r22, 0x58	; 88
     7c4:	22 e0       	ldi	r18, 0x02	; 2
     7c6:	72 07       	cpc	r23, r18
     7c8:	08 f0       	brcs	.+2      	; 0x7cc <calc_speed+0x5c>
     7ca:	40 c0       	rjmp	.+128    	; 0x84c <calc_speed+0xdc>
			wheel_rpm = rpm;
     7cc:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <wheel_rpm+0x1>
     7d0:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <wheel_rpm>
			speed = wheel_rpm * 60 * wheel_length;
     7d4:	9b 01       	movw	r18, r22
     7d6:	22 95       	swap	r18
     7d8:	32 95       	swap	r19
     7da:	30 7f       	andi	r19, 0xF0	; 240
     7dc:	32 27       	eor	r19, r18
     7de:	20 7f       	andi	r18, 0xF0	; 240
     7e0:	32 27       	eor	r19, r18
     7e2:	a9 01       	movw	r20, r18
     7e4:	46 1b       	sub	r20, r22
     7e6:	57 0b       	sbc	r21, r23
     7e8:	ba 01       	movw	r22, r20
     7ea:	66 0f       	add	r22, r22
     7ec:	77 1f       	adc	r23, r23
     7ee:	66 0f       	add	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	c0 d3       	rcall	.+1920   	; 0xf78 <__floatunsisf>
     7f8:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <wheel_length>
     7fc:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <wheel_length+0x1>
     800:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <wheel_length+0x2>
     804:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <wheel_length+0x3>
     808:	6d d4       	rcall	.+2266   	; 0x10e4 <__mulsf3>
     80a:	6b 01       	movw	r12, r22
     80c:	7c 01       	movw	r14, r24
     80e:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <speed>
     812:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <speed+0x1>
     816:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <speed+0x2>
     81a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <speed+0x3>
			if (speed >= max_speed) {
     81e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <max_speed>
     822:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <max_speed+0x1>
     826:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <max_speed+0x2>
     82a:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <max_speed+0x3>
     82e:	56 d4       	rcall	.+2220   	; 0x10dc <__gesf2>
     830:	88 23       	and	r24, r24
     832:	44 f0       	brlt	.+16     	; 0x844 <calc_speed+0xd4>
				max_speed = speed;
     834:	c0 92 0f 01 	sts	0x010F, r12	; 0x80010f <max_speed>
     838:	d0 92 10 01 	sts	0x0110, r13	; 0x800110 <max_speed+0x1>
     83c:	e0 92 11 01 	sts	0x0111, r14	; 0x800111 <max_speed+0x2>
     840:	f0 92 12 01 	sts	0x0112, r15	; 0x800112 <max_speed+0x3>
			}

			calc_avg_speed(speed);
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	1a df       	rcall	.-460    	; 0x67e <calc_avg_speed>
			display_data();
     84a:	be dd       	rcall	.-1156   	; 0x3c8 <display_data>
		}

		wheel_rotation_counter = 0;
     84c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <wheel_rotation_counter>
		wheel_rotation_start_time = 0;
     850:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <wheel_rotation_start_time>
     854:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <wheel_rotation_start_time+0x1>
     858:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <wheel_rotation_start_time+0x2>
     85c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <wheel_rotation_start_time+0x3>
	}
}
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	08 95       	ret

0000086a <main>:
void turn_led(bool on);
void handle_btn_click(uint8_t pin_state, uint32_t timer_now);
void calc_speed(uint32_t timer_now);

int main(void) {
	CLKPR = 1 << CLKPCE;
     86a:	80 e8       	ldi	r24, 0x80	; 128
     86c:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;
     86e:	16 bc       	out	0x26, r1	; 38
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     870:	2f ef       	ldi	r18, 0xFF	; 255
     872:	30 e7       	ldi	r19, 0x70	; 112
     874:	42 e0       	ldi	r20, 0x02	; 2
     876:	21 50       	subi	r18, 0x01	; 1
     878:	30 40       	sbci	r19, 0x00	; 0
     87a:	40 40       	sbci	r20, 0x00	; 0
     87c:	e1 f7       	brne	.-8      	; 0x876 <main+0xc>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <main+0x16>
     880:	00 00       	nop
	
	_delay_ms(100);
	ssd1306_init();
     882:	13 d1       	rcall	.+550    	; 0xaaa <ssd1306_init>
	ssd1306tx_init(ssd1306xled_font6x8data);
     884:	8e e1       	ldi	r24, 0x1E	; 30
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	69 d1       	rcall	.+722    	; 0xb5c <ssd1306tx_init>
	ssd1306_clear();
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	36 d1       	rcall	.+620    	; 0xb00 <ssd1306_fill4>
     894:	5f ef       	ldi	r21, 0xFF	; 255
     896:	89 e6       	ldi	r24, 0x69	; 105
     898:	98 e1       	ldi	r25, 0x18	; 24
     89a:	51 50       	subi	r21, 0x01	; 1
     89c:	80 40       	sbci	r24, 0x00	; 0
     89e:	90 40       	sbci	r25, 0x00	; 0
     8a0:	e1 f7       	brne	.-8      	; 0x89a <main+0x30>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <main+0x3a>
     8a4:	00 00       	nop
	// ssd1306_fill(0xFF);
	_delay_ms(1000);
	
	// turn on btn pin input pullup
	PORTB |= _BV(BTN_PIN);
     8a6:	c3 9a       	sbi	0x18, 3	; 24
	
	// led pin as output
	DDRB |= _BV(LED_PIN);
     8a8:	bc 9a       	sbi	0x17, 4	; 23

	// disable USI
	// PRR |= _BV(PRUSI);
	
	attach_wheel_interrupt();
     8aa:	f9 dc       	rcall	.-1550   	; 0x29e <attach_wheel_interrupt>
	start_millis_timer();
     8ac:	16 dd       	rcall	.-1492   	; 0x2da <start_millis_timer>
	
	display_turned = true;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <display_turned>

	pwr_save_mode = eeprom_read_byte(&EEPROM_PWR_SAVE_MODE);
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	da d4       	rcall	.+2484   	; 0x126e <eeprom_read_byte>
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	81 11       	cpse	r24, r1
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <main+0x58>
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <pwr_save_mode>
	led_auto = eeprom_read_byte(&EEPROM_LED_AUTO);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	d1 d4       	rcall	.+2466   	; 0x126e <eeprom_read_byte>
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	81 11       	cpse	r24, r1
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <main+0x6a>
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <led_auto>
		// todo
		// get current time
		// turn led
	}
	
	calc_wheel_length();
     8d8:	48 dd       	rcall	.-1392   	; 0x36a <calc_wheel_length>
	display_data();
     8da:	76 dd       	rcall	.-1300   	; 0x3c8 <display_data>
	
	unsigned long timer_now;
    
    while (1) {
		timer_now = millis();
     8dc:	31 dd       	rcall	.-1438   	; 0x340 <millis>
     8de:	6b 01       	movw	r12, r22
     8e0:	7c 01       	movw	r14, r24
		
		if (wheel_rotated) {
     8e2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <wheel_rotated>
     8e6:	88 23       	and	r24, r24
     8e8:	e1 f1       	breq	.+120    	; 0x962 <main+0xf8>
			wheel_rotated = false;
     8ea:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <wheel_rotated>
			
			wheel_rotation_last_time = timer_now;
     8ee:	c0 92 3f 01 	sts	0x013F, r12	; 0x80013f <wheel_rotation_last_time>
     8f2:	d0 92 40 01 	sts	0x0140, r13	; 0x800140 <wheel_rotation_last_time+0x1>
     8f6:	e0 92 41 01 	sts	0x0141, r14	; 0x800141 <wheel_rotation_last_time+0x2>
     8fa:	f0 92 42 01 	sts	0x0142, r15	; 0x800142 <wheel_rotation_last_time+0x3>
			if (wheel_rotation_start_time == 0) {
     8fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <wheel_rotation_start_time>
     902:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <wheel_rotation_start_time+0x1>
     906:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <wheel_rotation_start_time+0x2>
     90a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <wheel_rotation_start_time+0x3>
     90e:	89 2b       	or	r24, r25
     910:	8a 2b       	or	r24, r26
     912:	8b 2b       	or	r24, r27
     914:	41 f4       	brne	.+16     	; 0x926 <main+0xbc>
				wheel_rotation_start_time = timer_now;
     916:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <wheel_rotation_start_time>
     91a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <wheel_rotation_start_time+0x1>
     91e:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <wheel_rotation_start_time+0x2>
     922:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <wheel_rotation_start_time+0x3>
			}

			wheel_rotation_counter++;
     926:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <wheel_rotation_counter>
     92a:	8f 5f       	subi	r24, 0xFF	; 255
     92c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <wheel_rotation_counter>
			distance += wheel_length;
     930:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <wheel_length>
     934:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <wheel_length+0x1>
     938:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <wheel_length+0x2>
     93c:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <wheel_length+0x3>
     940:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <distance>
     944:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <distance+0x1>
     948:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <distance+0x2>
     94c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <distance+0x3>
     950:	12 d2       	rcall	.+1060   	; 0xd76 <__addsf3>
     952:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <distance>
     956:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <distance+0x1>
     95a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <distance+0x2>
     95e:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <distance+0x3>
		}
		
		handle_btn_click(PINB & _BV(BTN_PIN), timer_now);
     962:	86 b3       	in	r24, 0x16	; 22
     964:	b7 01       	movw	r22, r14
     966:	a6 01       	movw	r20, r12
     968:	88 70       	andi	r24, 0x08	; 8
     96a:	13 de       	rcall	.-986    	; 0x592 <handle_btn_click>
		// handle_btn_click(digitalRead(BTN_PIN), timer_now);

		calc_speed(timer_now);
     96c:	c7 01       	movw	r24, r14
     96e:	b6 01       	movw	r22, r12
     970:	ff de       	rcall	.-514    	; 0x770 <calc_speed>
		
		// idle
		if (timer_now - wheel_rotation_last_time >= 3000) {
     972:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <wheel_rotation_last_time>
     976:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <wheel_rotation_last_time+0x1>
     97a:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <wheel_rotation_last_time+0x2>
     97e:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <wheel_rotation_last_time+0x3>
     982:	a7 01       	movw	r20, r14
     984:	96 01       	movw	r18, r12
     986:	28 1b       	sub	r18, r24
     988:	39 0b       	sbc	r19, r25
     98a:	4a 0b       	sbc	r20, r26
     98c:	5b 0b       	sbc	r21, r27
     98e:	da 01       	movw	r26, r20
     990:	c9 01       	movw	r24, r18
     992:	88 3b       	cpi	r24, 0xB8	; 184
     994:	9b 40       	sbci	r25, 0x0B	; 11
     996:	a1 05       	cpc	r26, r1
     998:	b1 05       	cpc	r27, r1
     99a:	50 f1       	brcs	.+84     	; 0x9f0 <main+0x186>
			if (speed != 0 || (0 < wheel_rotation_counter && wheel_rotation_counter < WHEEL_ROTATION_MAX)) {
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	a9 01       	movw	r20, r18
     9a2:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <speed>
     9a6:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <speed+0x1>
     9aa:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <speed+0x2>
     9ae:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <speed+0x3>
     9b2:	45 d2       	rcall	.+1162   	; 0xe3e <__cmpsf2>
     9b4:	81 11       	cpse	r24, r1
     9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <main+0x158>
     9b8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <wheel_rotation_counter>
     9bc:	81 50       	subi	r24, 0x01	; 1
     9be:	84 30       	cpi	r24, 0x04	; 4
     9c0:	b8 f4       	brcc	.+46     	; 0x9f0 <main+0x186>
				speed = 0;
     9c2:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <speed>
     9c6:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <speed+0x1>
     9ca:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <speed+0x2>
     9ce:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <speed+0x3>
				wheel_rpm = 0;
     9d2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <wheel_rpm+0x1>
     9d6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <wheel_rpm>
				wheel_rotation_counter = 0;
     9da:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <wheel_rotation_counter>
				wheel_rotation_start_time = 0;
     9de:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <wheel_rotation_start_time>
     9e2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <wheel_rotation_start_time+0x1>
     9e6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <wheel_rotation_start_time+0x2>
     9ea:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <wheel_rotation_start_time+0x3>
				display_data();
     9ee:	ec dc       	rcall	.-1576   	; 0x3c8 <display_data>
			}
		}
		
		// sleep
		if (timer_now - wheel_rotation_last_time >= 20000) {
     9f0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <wheel_rotation_last_time>
     9f4:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <wheel_rotation_last_time+0x1>
     9f8:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <wheel_rotation_last_time+0x2>
     9fc:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <wheel_rotation_last_time+0x3>
     a00:	c8 1a       	sub	r12, r24
     a02:	d9 0a       	sbc	r13, r25
     a04:	ea 0a       	sbc	r14, r26
     a06:	fb 0a       	sbc	r15, r27
     a08:	40 e2       	ldi	r20, 0x20	; 32
     a0a:	c4 16       	cp	r12, r20
     a0c:	4e e4       	ldi	r20, 0x4E	; 78
     a0e:	d4 06       	cpc	r13, r20
     a10:	e1 04       	cpc	r14, r1
     a12:	f1 04       	cpc	r15, r1
     a14:	60 f0       	brcs	.+24     	; 0xa2e <main+0x1c4>
			wheel_rotation_last_time = 0;
     a16:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <wheel_rotation_last_time>
     a1a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <wheel_rotation_last_time+0x1>
     a1e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <wheel_rotation_last_time+0x2>
     a22:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <wheel_rotation_last_time+0x3>
			if (pwr_save_mode) {
     a26:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <pwr_save_mode>
     a2a:	81 11       	cpse	r24, r1
				enable_sleep_mode();
     a2c:	74 dd       	rcall	.-1304   	; 0x516 <enable_sleep_mode>
     a2e:	8f ec       	ldi	r24, 0xCF	; 207
     a30:	97 e0       	ldi	r25, 0x07	; 7
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <main+0x1c8>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <main+0x1ce>
     a38:	00 00       	nop
     a3a:	50 cf       	rjmp	.-352    	; 0x8dc <main+0x72>

00000a3c <i2csw_start>:
void i2csw_byte(uint8_t byte);

// ----------------------------------------------------------------------------

void i2csw_start() {
	DDRB |= (1 << SSD1306_SDA);	// Set port as output
     a3c:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1 << SSD1306_SCL);	// Set port as output
     a3e:	b9 9a       	sbi	0x17, 1	; 23
	I2CSW_HIGH(SSD1306_SCL);	// Set to HIGH
     a40:	c1 9a       	sbi	0x18, 1	; 24
	I2CSW_HIGH(SSD1306_SDA);	// Set to HIGH
     a42:	c0 9a       	sbi	0x18, 0	; 24
	I2CSW_LOW(SSD1306_SDA);		// Set to LOW
     a44:	c0 98       	cbi	0x18, 0	; 24
	I2CSW_LOW(SSD1306_SCL);		// Set to LOW
     a46:	c1 98       	cbi	0x18, 1	; 24
     a48:	08 95       	ret

00000a4a <i2csw_stop>:
}

void i2csw_stop() {
	I2CSW_LOW(SSD1306_SCL);		// Set to LOW
     a4a:	c1 98       	cbi	0x18, 1	; 24
	I2CSW_LOW(SSD1306_SDA);		// Set to LOW
     a4c:	c0 98       	cbi	0x18, 0	; 24
	I2CSW_HIGH(SSD1306_SCL);	// Set to HIGH
     a4e:	c1 9a       	sbi	0x18, 1	; 24
	I2CSW_HIGH(SSD1306_SDA);	// Set to HIGH
     a50:	c0 9a       	sbi	0x18, 0	; 24
	DDRB &= ~(1 << SSD1306_SDA);// Set port as input
     a52:	b8 98       	cbi	0x17, 0	; 23
     a54:	08 95       	ret

00000a56 <i2csw_byte>:
}

void i2csw_byte(uint8_t byte) {
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	for (i = 0; i < 8; i++) {
		if ((byte << i) & 0x80)
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	ac 01       	movw	r20, r24
     a5e:	02 2e       	mov	r0, r18
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <i2csw_byte+0x10>
     a62:	44 0f       	add	r20, r20
     a64:	55 1f       	adc	r21, r21
     a66:	0a 94       	dec	r0
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <i2csw_byte+0xc>
     a6a:	47 ff       	sbrs	r20, 7
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <i2csw_byte+0x1c>
			I2CSW_HIGH(SSD1306_SDA);
     a6e:	c0 9a       	sbi	0x18, 0	; 24
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <i2csw_byte+0x1e>
		else
			I2CSW_LOW(SSD1306_SDA);
     a72:	c0 98       	cbi	0x18, 0	; 24
		I2CSW_HIGH(SSD1306_SCL);
     a74:	c1 9a       	sbi	0x18, 1	; 24
		I2CSW_LOW(SSD1306_SCL);
     a76:	c1 98       	cbi	0x18, 1	; 24
     a78:	2f 5f       	subi	r18, 0xFF	; 255
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRB &= ~(1 << SSD1306_SDA);// Set port as input
}

void i2csw_byte(uint8_t byte) {
	uint8_t i;
	for (i = 0; i < 8; i++) {
     a7c:	28 30       	cpi	r18, 0x08	; 8
     a7e:	31 05       	cpc	r19, r1
     a80:	69 f7       	brne	.-38     	; 0xa5c <i2csw_byte+0x6>
		else
			I2CSW_LOW(SSD1306_SDA);
		I2CSW_HIGH(SSD1306_SCL);
		I2CSW_LOW(SSD1306_SCL);
	}
	I2CSW_HIGH(SSD1306_SDA);
     a82:	c0 9a       	sbi	0x18, 0	; 24
	I2CSW_HIGH(SSD1306_SCL);
     a84:	c1 9a       	sbi	0x18, 1	; 24
	I2CSW_LOW(SSD1306_SCL);
     a86:	c1 98       	cbi	0x18, 1	; 24
     a88:	08 95       	ret

00000a8a <ssd1306_start_command>:
}

// ============================================================================

void ssd1306_start_command() {
	i2csw_start();
     a8a:	d8 df       	rcall	.-80     	; 0xa3c <i2csw_start>
	i2csw_byte(SSD1306_SADDR);	// Slave address: R/W(SA0)=0 - write
     a8c:	88 e7       	ldi	r24, 0x78	; 120
     a8e:	e3 df       	rcall	.-58     	; 0xa56 <i2csw_byte>
	i2csw_byte(0x00);			// Control byte: D/C=0 - write command
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	e1 df       	rcall	.-62     	; 0xa56 <i2csw_byte>
     a94:	08 95       	ret

00000a96 <ssd1306_start_data>:
}

void ssd1306_start_data() {
	i2csw_start();
     a96:	d2 df       	rcall	.-92     	; 0xa3c <i2csw_start>
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
     a98:	88 e7       	ldi	r24, 0x78	; 120
     a9a:	dd df       	rcall	.-70     	; 0xa56 <i2csw_byte>
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
     a9c:	80 e4       	ldi	r24, 0x40	; 64
     a9e:	db df       	rcall	.-74     	; 0xa56 <i2csw_byte>
     aa0:	08 95       	ret

00000aa2 <ssd1306_data_byte>:
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     aa2:	d9 df       	rcall	.-78     	; 0xa56 <i2csw_byte>
     aa4:	08 95       	ret

00000aa6 <ssd1306_stop>:
}

void ssd1306_stop() {
	i2csw_stop();
     aa6:	d1 df       	rcall	.-94     	; 0xa4a <i2csw_stop>
     aa8:	08 95       	ret

00000aaa <ssd1306_init>:
}

// ============================================================================

void ssd1306_init() {
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
	ssd1306_start_command();	// Initiate transmission of command
     ab2:	eb df       	rcall	.-42     	; 0xa8a <ssd1306_start_command>
     ab4:	c6 e4       	ldi	r28, 0x46	; 70
     ab6:	d2 e0       	ldi	r29, 0x02	; 2
     ab8:	06 e6       	ldi	r16, 0x66	; 102
     aba:	12 e0       	ldi	r17, 0x02	; 2
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
		ssd1306_data_byte(pgm_read_byte(&ssd1306_init_sequence[i]));	// Send the command out
     abc:	fe 01       	movw	r30, r28
     abe:	84 91       	lpm	r24, Z
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     ac0:	ca df       	rcall	.-108    	; 0xa56 <i2csw_byte>
     ac2:	21 96       	adiw	r28, 0x01	; 1

// ============================================================================

void ssd1306_init() {
	ssd1306_start_command();	// Initiate transmission of command
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
     ac4:	c0 17       	cp	r28, r16
     ac6:	d1 07       	cpc	r29, r17
     ac8:	c9 f7       	brne	.-14     	; 0xabc <ssd1306_init+0x12>
void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
}

void ssd1306_stop() {
	i2csw_stop();
     aca:	bf df       	rcall	.-130    	; 0xa4a <i2csw_stop>
	ssd1306_start_command();	// Initiate transmission of command
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
		ssd1306_data_byte(pgm_read_byte(&ssd1306_init_sequence[i]));	// Send the command out
	}
	ssd1306_stop();	// Finish transmission
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	08 95       	ret

00000ad6 <ssd1306_setpos>:

void ssd1306_setpos(uint8_t x, uint8_t y) {
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	c8 2f       	mov	r28, r24
     adc:	d6 2f       	mov	r29, r22
	ssd1306_start_command();
     ade:	d5 df       	rcall	.-86     	; 0xa8a <ssd1306_start_command>
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     ae0:	8d 2f       	mov	r24, r29
     ae2:	87 70       	andi	r24, 0x07	; 7
     ae4:	80 6b       	ori	r24, 0xB0	; 176
     ae6:	b7 df       	rcall	.-146    	; 0xa56 <i2csw_byte>
     ae8:	8c 2f       	mov	r24, r28
     aea:	8f 70       	andi	r24, 0x0F	; 15
     aec:	b4 df       	rcall	.-152    	; 0xa56 <i2csw_byte>
     aee:	8c 2f       	mov	r24, r28
     af0:	82 95       	swap	r24
     af2:	8f 70       	andi	r24, 0x0F	; 15
     af4:	80 61       	ori	r24, 0x10	; 16
     af6:	af df       	rcall	.-162    	; 0xa56 <i2csw_byte>
}

void ssd1306_stop() {
	i2csw_stop();
     af8:	a8 df       	rcall	.-176    	; 0xa4a <i2csw_stop>
	ssd1306_start_command();
	ssd1306_data_byte(0xb0 | (y & 0x07));	// Set page start address
	ssd1306_data_byte(x & 0x0f);			// Set the lower nibble of the column start address
	ssd1306_data_byte(0x10 | (x >> 4));		// Set the higher nibble of the column start address
	ssd1306_stop();	// Finish transmission
}
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <ssd1306_fill4>:

void ssd1306_fill4(uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4) {
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	e8 2e       	mov	r14, r24
     b0e:	f6 2e       	mov	r15, r22
     b10:	04 2f       	mov	r16, r20
     b12:	12 2f       	mov	r17, r18
	ssd1306_setpos(0, 0);
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	de df       	rcall	.-68     	; 0xad6 <ssd1306_setpos>
	ssd1306_start_data();	// Initiate transmission of data
     b1a:	bd df       	rcall	.-134    	; 0xa96 <ssd1306_start_data>
     b1c:	c0 e0       	ldi	r28, 0x00	; 0
     b1e:	d1 e0       	ldi	r29, 0x01	; 1
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     b20:	8e 2d       	mov	r24, r14
     b22:	99 df       	rcall	.-206    	; 0xa56 <i2csw_byte>
     b24:	8f 2d       	mov	r24, r15
     b26:	97 df       	rcall	.-210    	; 0xa56 <i2csw_byte>
     b28:	80 2f       	mov	r24, r16
     b2a:	95 df       	rcall	.-214    	; 0xa56 <i2csw_byte>
     b2c:	81 2f       	mov	r24, r17
     b2e:	93 df       	rcall	.-218    	; 0xa56 <i2csw_byte>
     b30:	21 97       	sbiw	r28, 0x01	; 1
}

void ssd1306_fill4(uint8_t p1, uint8_t p2, uint8_t p3, uint8_t p4) {
	ssd1306_setpos(0, 0);
	ssd1306_start_data();	// Initiate transmission of data
	for (uint16_t i = 0; i < 128 * 8 / 4; i++) {
     b32:	b1 f7       	brne	.-20     	; 0xb20 <ssd1306_fill4+0x20>
void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
}

void ssd1306_stop() {
	i2csw_stop();
     b34:	8a df       	rcall	.-236    	; 0xa4a <i2csw_stop>
		ssd1306_data_byte(p2);
		ssd1306_data_byte(p3);
		ssd1306_data_byte(p4);
	}
	ssd1306_stop();	// Finish transmission
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <ssd1306_turn_display>:

void ssd1306_turn_display(bool on) {
     b44:	cf 93       	push	r28
     b46:	c8 2f       	mov	r28, r24
	ssd1306_start_command();
     b48:	a0 df       	rcall	.-192    	; 0xa8a <ssd1306_start_command>
	ssd1306_data_byte(on ? 0xAF : 0xAE);
     b4a:	c1 11       	cpse	r28, r1
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <ssd1306_turn_display+0xe>
     b4e:	8e ea       	ldi	r24, 0xAE	; 174
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <ssd1306_turn_display+0x10>
     b52:	8f ea       	ldi	r24, 0xAF	; 175
	i2csw_byte(SSD1306_SADDR);	// Slave address, R/W(SA0)=0 - write
	i2csw_byte(0x40);			// Control byte: D/C=1 - write data
}

void ssd1306_data_byte(uint8_t b) {
	i2csw_byte(b);
     b54:	80 df       	rcall	.-256    	; 0xa56 <i2csw_byte>
}

void ssd1306_stop() {
	i2csw_stop();
     b56:	79 df       	rcall	.-270    	; 0xa4a <i2csw_stop>

void ssd1306_turn_display(bool on) {
	ssd1306_start_command();
	ssd1306_data_byte(on ? 0xAF : 0xAE);
	ssd1306_stop();
}
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <ssd1306tx_init>:
	return result;
}

long abs_val(long v) {
	return v < 0 ? -v : v;
}
     b5c:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <ssd1306tx_font_src+0x1>
     b60:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <ssd1306tx_font_src>
     b64:	08 95       	ret

00000b66 <ssd1306tx_char>:
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	8c 01       	movw	r16, r24
     b72:	00 0f       	add	r16, r16
     b74:	11 1f       	adc	r17, r17
     b76:	00 0f       	add	r16, r16
     b78:	11 1f       	adc	r17, r17
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	08 0f       	add	r16, r24
     b80:	19 1f       	adc	r17, r25
     b82:	e8 01       	movw	r28, r16
     b84:	c0 5c       	subi	r28, 0xC0	; 192
     b86:	d1 09       	sbc	r29, r1
     b88:	86 df       	rcall	.-244    	; 0xa96 <ssd1306_start_data>
     b8a:	0a 5b       	subi	r16, 0xBA	; 186
     b8c:	11 09       	sbc	r17, r1
     b8e:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <ssd1306tx_font_src>
     b92:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <ssd1306tx_font_src+0x1>
     b96:	ec 0f       	add	r30, r28
     b98:	fd 1f       	adc	r31, r29
     b9a:	84 91       	lpm	r24, Z
     b9c:	82 df       	rcall	.-252    	; 0xaa2 <ssd1306_data_byte>
     b9e:	21 96       	adiw	r28, 0x01	; 1
     ba0:	c0 17       	cp	r28, r16
     ba2:	d1 07       	cpc	r29, r17
     ba4:	a1 f7       	brne	.-24     	; 0xb8e <ssd1306tx_char+0x28>
     ba6:	7f df       	rcall	.-258    	; 0xaa6 <ssd1306_stop>
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	08 95       	ret

00000bb2 <ssd1306tx_string>:
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	ec 01       	movw	r28, r24
     bb8:	88 81       	ld	r24, Y
     bba:	88 23       	and	r24, r24
     bbc:	29 f0       	breq	.+10     	; 0xbc8 <ssd1306tx_string+0x16>
     bbe:	21 96       	adiw	r28, 0x01	; 1
     bc0:	d2 df       	rcall	.-92     	; 0xb66 <ssd1306tx_char>
     bc2:	89 91       	ld	r24, Y+
     bc4:	81 11       	cpse	r24, r1
     bc6:	fc cf       	rjmp	.-8      	; 0xbc0 <ssd1306tx_string+0xe>
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <itoa>:
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	ec 01       	movw	r28, r24
     be0:	7b 01       	movw	r14, r22
     be2:	6a 01       	movw	r12, r20
     be4:	8b 01       	movw	r16, r22
     be6:	02 c0       	rjmp	.+4      	; 0xbec <itoa+0x1e>
     be8:	8d 01       	movw	r16, r26
     bea:	e9 01       	movw	r28, r18
     bec:	ce 01       	movw	r24, r28
     bee:	b6 01       	movw	r22, r12
     bf0:	f5 d2       	rcall	.+1514   	; 0x11dc <__divmodhi4>
     bf2:	9b 01       	movw	r18, r22
     bf4:	d8 01       	movw	r26, r16
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	c6 01       	movw	r24, r12
     bfa:	df d2       	rcall	.+1470   	; 0x11ba <__mulhi3>
     bfc:	fe 01       	movw	r30, r28
     bfe:	e8 1b       	sub	r30, r24
     c00:	f9 0b       	sbc	r31, r25
     c02:	e9 54       	subi	r30, 0x49	; 73
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	83 a1       	ldd	r24, Z+35	; 0x23
     c08:	f8 01       	movw	r30, r16
     c0a:	80 83       	st	Z, r24
     c0c:	21 15       	cp	r18, r1
     c0e:	31 05       	cpc	r19, r1
     c10:	59 f7       	brne	.-42     	; 0xbe8 <itoa+0x1a>
     c12:	dd 23       	and	r29, r29
     c14:	1c f4       	brge	.+6      	; 0xc1c <itoa+0x4e>
     c16:	11 96       	adiw	r26, 0x01	; 1
     c18:	8d e2       	ldi	r24, 0x2D	; 45
     c1a:	81 83       	std	Z+1, r24	; 0x01
     c1c:	fd 01       	movw	r30, r26
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	1c 92       	st	X, r1
     c22:	ee 16       	cp	r14, r30
     c24:	ff 06       	cpc	r15, r31
     c26:	50 f4       	brcc	.+20     	; 0xc3c <itoa+0x6e>
     c28:	d7 01       	movw	r26, r14
     c2a:	e7 01       	movw	r28, r14
     c2c:	80 81       	ld	r24, Z
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	9d 91       	ld	r25, X+
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	89 93       	st	Y+, r24
     c36:	ae 17       	cp	r26, r30
     c38:	bf 07       	cpc	r27, r31
     c3a:	c0 f3       	brcs	.-16     	; 0xc2c <itoa+0x5e>
     c3c:	c7 01       	movw	r24, r14
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	08 95       	ret

00000c50 <ssd1306tx_int>:
     c50:	4a e0       	ldi	r20, 0x0A	; 10
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	65 e4       	ldi	r22, 0x45	; 69
     c56:	71 e0       	ldi	r23, 0x01	; 1
     c58:	ba df       	rcall	.-140    	; 0xbce <itoa>
     c5a:	ab df       	rcall	.-170    	; 0xbb2 <ssd1306tx_string>
     c5c:	08 95       	ret

00000c5e <ftoa>:

char* ftoa(float f, int precision, char* a) {
     c5e:	2f 92       	push	r2
     c60:	3f 92       	push	r3
     c62:	4f 92       	push	r4
     c64:	5f 92       	push	r5
     c66:	6f 92       	push	r6
     c68:	7f 92       	push	r7
     c6a:	8f 92       	push	r8
     c6c:	9f 92       	push	r9
     c6e:	af 92       	push	r10
     c70:	bf 92       	push	r11
     c72:	cf 92       	push	r12
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	a4 97       	sbiw	r28, 0x24	; 36
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	6b 01       	movw	r12, r22
     c94:	7c 01       	movw	r14, r24
     c96:	3a 01       	movw	r6, r20
     c98:	89 01       	movw	r16, r18
	long p[] = {0, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000};
     c9a:	84 e2       	ldi	r24, 0x24	; 36
     c9c:	e0 e6       	ldi	r30, 0x60	; 96
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	de 01       	movw	r26, r28
     ca2:	11 96       	adiw	r26, 0x01	; 1
     ca4:	01 90       	ld	r0, Z+
     ca6:	0d 92       	st	X+, r0
     ca8:	8a 95       	dec	r24
     caa:	e1 f7       	brne	.-8      	; 0xca4 <ftoa+0x46>
	char* ret = a;
	long number = (long) f;
     cac:	c7 01       	movw	r24, r14
     cae:	b6 01       	movw	r22, r12
     cb0:	32 d1       	rcall	.+612    	; 0xf16 <__fixsfsi>
     cb2:	4b 01       	movw	r8, r22
     cb4:	5c 01       	movw	r10, r24
	itoa(number, a, 10);
     cb6:	4a e0       	ldi	r20, 0x0A	; 10
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	b8 01       	movw	r22, r16
     cbc:	c4 01       	movw	r24, r8
     cbe:	87 df       	rcall	.-242    	; 0xbce <itoa>
	while (*a != '\0') a++;
     cc0:	f8 01       	movw	r30, r16
     cc2:	80 81       	ld	r24, Z
     cc4:	88 23       	and	r24, r24
     cc6:	41 f0       	breq	.+16     	; 0xcd8 <ftoa+0x7a>
     cc8:	c8 01       	movw	r24, r16
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	fc 01       	movw	r30, r24
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	20 81       	ld	r18, Z
     cd2:	21 11       	cpse	r18, r1
     cd4:	fb cf       	rjmp	.-10     	; 0xccc <ftoa+0x6e>
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <ftoa+0x7c>
     cd8:	f8 01       	movw	r30, r16
	*a++ = '.';
     cda:	8e e2       	ldi	r24, 0x2E	; 46
     cdc:	81 93       	st	Z+, r24
     cde:	1f 01       	movw	r2, r30
	long decimal = abs_val((long)((f - number) * p[precision]));
     ce0:	66 0c       	add	r6, r6
     ce2:	77 1c       	adc	r7, r7
     ce4:	66 0c       	add	r6, r6
     ce6:	77 1c       	adc	r7, r7
     ce8:	fe 01       	movw	r30, r28
     cea:	e6 0d       	add	r30, r6
     cec:	f7 1d       	adc	r31, r7
	itoa(decimal, a, 10);
     cee:	61 81       	ldd	r22, Z+1	; 0x01
     cf0:	72 81       	ldd	r23, Z+2	; 0x02
     cf2:	83 81       	ldd	r24, Z+3	; 0x03
     cf4:	94 81       	ldd	r25, Z+4	; 0x04
     cf6:	42 d1       	rcall	.+644    	; 0xf7c <__floatsisf>
     cf8:	2b 01       	movw	r4, r22
     cfa:	3c 01       	movw	r6, r24
     cfc:	c5 01       	movw	r24, r10
     cfe:	b4 01       	movw	r22, r8
     d00:	3d d1       	rcall	.+634    	; 0xf7c <__floatsisf>
     d02:	9b 01       	movw	r18, r22
     d04:	ac 01       	movw	r20, r24
     d06:	c7 01       	movw	r24, r14
     d08:	b6 01       	movw	r22, r12
     d0a:	34 d0       	rcall	.+104    	; 0xd74 <__subsf3>
     d0c:	9b 01       	movw	r18, r22
     d0e:	ac 01       	movw	r20, r24
     d10:	c3 01       	movw	r24, r6
     d12:	b2 01       	movw	r22, r4
     d14:	e7 d1       	rcall	.+974    	; 0x10e4 <__mulsf3>
     d16:	ff d0       	rcall	.+510    	; 0xf16 <__fixsfsi>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	bb 23       	and	r27, r27
     d1e:	3c f4       	brge	.+14     	; 0xd2e <ftoa+0xd0>
     d20:	b0 95       	com	r27
     d22:	a0 95       	com	r26
     d24:	90 95       	com	r25
     d26:	81 95       	neg	r24
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	af 4f       	sbci	r26, 0xFF	; 255
     d2c:	bf 4f       	sbci	r27, 0xFF	; 255
     d2e:	4a e0       	ldi	r20, 0x0A	; 10
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	b1 01       	movw	r22, r2
     d34:	4c df       	rcall	.-360    	; 0xbce <itoa>
	return ret;
}
     d36:	c8 01       	movw	r24, r16
     d38:	a4 96       	adiw	r28, 0x24	; 36
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	bf 90       	pop	r11
     d56:	af 90       	pop	r10
     d58:	9f 90       	pop	r9
     d5a:	8f 90       	pop	r8
     d5c:	7f 90       	pop	r7
     d5e:	6f 90       	pop	r6
     d60:	5f 90       	pop	r5
     d62:	4f 90       	pop	r4
     d64:	3f 90       	pop	r3
     d66:	2f 90       	pop	r2
     d68:	08 95       	ret

00000d6a <ssd1306tx_float>:
void ssd1306tx_init(const uint8_t *font) {
	ssd1306tx_font_src = font;
}

void ssd1306tx_float(float n, int precision) {
	ssd1306tx_string(ftoa(n, precision, str_buf));
     d6a:	25 e4       	ldi	r18, 0x45	; 69
     d6c:	31 e0       	ldi	r19, 0x01	; 1
     d6e:	77 df       	rcall	.-274    	; 0xc5e <ftoa>
     d70:	20 df       	rcall	.-448    	; 0xbb2 <ssd1306tx_string>
     d72:	08 95       	ret

00000d74 <__subsf3>:
     d74:	50 58       	subi	r21, 0x80	; 128

00000d76 <__addsf3>:
     d76:	bb 27       	eor	r27, r27
     d78:	aa 27       	eor	r26, r26
     d7a:	0e d0       	rcall	.+28     	; 0xd98 <__addsf3x>
     d7c:	75 c1       	rjmp	.+746    	; 0x1068 <__fp_round>
     d7e:	66 d1       	rcall	.+716    	; 0x104c <__fp_pscA>
     d80:	30 f0       	brcs	.+12     	; 0xd8e <__addsf3+0x18>
     d82:	6b d1       	rcall	.+726    	; 0x105a <__fp_pscB>
     d84:	20 f0       	brcs	.+8      	; 0xd8e <__addsf3+0x18>
     d86:	31 f4       	brne	.+12     	; 0xd94 <__addsf3+0x1e>
     d88:	9f 3f       	cpi	r25, 0xFF	; 255
     d8a:	11 f4       	brne	.+4      	; 0xd90 <__addsf3+0x1a>
     d8c:	1e f4       	brtc	.+6      	; 0xd94 <__addsf3+0x1e>
     d8e:	5b c1       	rjmp	.+694    	; 0x1046 <__fp_nan>
     d90:	0e f4       	brtc	.+2      	; 0xd94 <__addsf3+0x1e>
     d92:	e0 95       	com	r30
     d94:	e7 fb       	bst	r30, 7
     d96:	51 c1       	rjmp	.+674    	; 0x103a <__fp_inf>

00000d98 <__addsf3x>:
     d98:	e9 2f       	mov	r30, r25
     d9a:	77 d1       	rcall	.+750    	; 0x108a <__fp_split3>
     d9c:	80 f3       	brcs	.-32     	; 0xd7e <__addsf3+0x8>
     d9e:	ba 17       	cp	r27, r26
     da0:	62 07       	cpc	r22, r18
     da2:	73 07       	cpc	r23, r19
     da4:	84 07       	cpc	r24, r20
     da6:	95 07       	cpc	r25, r21
     da8:	18 f0       	brcs	.+6      	; 0xdb0 <__addsf3x+0x18>
     daa:	71 f4       	brne	.+28     	; 0xdc8 <__addsf3x+0x30>
     dac:	9e f5       	brtc	.+102    	; 0xe14 <__addsf3x+0x7c>
     dae:	8f c1       	rjmp	.+798    	; 0x10ce <__fp_zero>
     db0:	0e f4       	brtc	.+2      	; 0xdb4 <__addsf3x+0x1c>
     db2:	e0 95       	com	r30
     db4:	0b 2e       	mov	r0, r27
     db6:	ba 2f       	mov	r27, r26
     db8:	a0 2d       	mov	r26, r0
     dba:	0b 01       	movw	r0, r22
     dbc:	b9 01       	movw	r22, r18
     dbe:	90 01       	movw	r18, r0
     dc0:	0c 01       	movw	r0, r24
     dc2:	ca 01       	movw	r24, r20
     dc4:	a0 01       	movw	r20, r0
     dc6:	11 24       	eor	r1, r1
     dc8:	ff 27       	eor	r31, r31
     dca:	59 1b       	sub	r21, r25
     dcc:	99 f0       	breq	.+38     	; 0xdf4 <__addsf3x+0x5c>
     dce:	59 3f       	cpi	r21, 0xF9	; 249
     dd0:	50 f4       	brcc	.+20     	; 0xde6 <__addsf3x+0x4e>
     dd2:	50 3e       	cpi	r21, 0xE0	; 224
     dd4:	68 f1       	brcs	.+90     	; 0xe30 <__addsf3x+0x98>
     dd6:	1a 16       	cp	r1, r26
     dd8:	f0 40       	sbci	r31, 0x00	; 0
     dda:	a2 2f       	mov	r26, r18
     ddc:	23 2f       	mov	r18, r19
     dde:	34 2f       	mov	r19, r20
     de0:	44 27       	eor	r20, r20
     de2:	58 5f       	subi	r21, 0xF8	; 248
     de4:	f3 cf       	rjmp	.-26     	; 0xdcc <__addsf3x+0x34>
     de6:	46 95       	lsr	r20
     de8:	37 95       	ror	r19
     dea:	27 95       	ror	r18
     dec:	a7 95       	ror	r26
     dee:	f0 40       	sbci	r31, 0x00	; 0
     df0:	53 95       	inc	r21
     df2:	c9 f7       	brne	.-14     	; 0xde6 <__addsf3x+0x4e>
     df4:	7e f4       	brtc	.+30     	; 0xe14 <__addsf3x+0x7c>
     df6:	1f 16       	cp	r1, r31
     df8:	ba 0b       	sbc	r27, r26
     dfa:	62 0b       	sbc	r22, r18
     dfc:	73 0b       	sbc	r23, r19
     dfe:	84 0b       	sbc	r24, r20
     e00:	ba f0       	brmi	.+46     	; 0xe30 <__addsf3x+0x98>
     e02:	91 50       	subi	r25, 0x01	; 1
     e04:	a1 f0       	breq	.+40     	; 0xe2e <__addsf3x+0x96>
     e06:	ff 0f       	add	r31, r31
     e08:	bb 1f       	adc	r27, r27
     e0a:	66 1f       	adc	r22, r22
     e0c:	77 1f       	adc	r23, r23
     e0e:	88 1f       	adc	r24, r24
     e10:	c2 f7       	brpl	.-16     	; 0xe02 <__addsf3x+0x6a>
     e12:	0e c0       	rjmp	.+28     	; 0xe30 <__addsf3x+0x98>
     e14:	ba 0f       	add	r27, r26
     e16:	62 1f       	adc	r22, r18
     e18:	73 1f       	adc	r23, r19
     e1a:	84 1f       	adc	r24, r20
     e1c:	48 f4       	brcc	.+18     	; 0xe30 <__addsf3x+0x98>
     e1e:	87 95       	ror	r24
     e20:	77 95       	ror	r23
     e22:	67 95       	ror	r22
     e24:	b7 95       	ror	r27
     e26:	f7 95       	ror	r31
     e28:	9e 3f       	cpi	r25, 0xFE	; 254
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <__addsf3x+0x96>
     e2c:	b3 cf       	rjmp	.-154    	; 0xd94 <__addsf3+0x1e>
     e2e:	93 95       	inc	r25
     e30:	88 0f       	add	r24, r24
     e32:	08 f0       	brcs	.+2      	; 0xe36 <__addsf3x+0x9e>
     e34:	99 27       	eor	r25, r25
     e36:	ee 0f       	add	r30, r30
     e38:	97 95       	ror	r25
     e3a:	87 95       	ror	r24
     e3c:	08 95       	ret

00000e3e <__cmpsf2>:
     e3e:	d9 d0       	rcall	.+434    	; 0xff2 <__fp_cmp>
     e40:	08 f4       	brcc	.+2      	; 0xe44 <__cmpsf2+0x6>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	08 95       	ret

00000e46 <__divsf3>:
     e46:	0c d0       	rcall	.+24     	; 0xe60 <__divsf3x>
     e48:	0f c1       	rjmp	.+542    	; 0x1068 <__fp_round>
     e4a:	07 d1       	rcall	.+526    	; 0x105a <__fp_pscB>
     e4c:	40 f0       	brcs	.+16     	; 0xe5e <__divsf3+0x18>
     e4e:	fe d0       	rcall	.+508    	; 0x104c <__fp_pscA>
     e50:	30 f0       	brcs	.+12     	; 0xe5e <__divsf3+0x18>
     e52:	21 f4       	brne	.+8      	; 0xe5c <__divsf3+0x16>
     e54:	5f 3f       	cpi	r21, 0xFF	; 255
     e56:	19 f0       	breq	.+6      	; 0xe5e <__divsf3+0x18>
     e58:	f0 c0       	rjmp	.+480    	; 0x103a <__fp_inf>
     e5a:	51 11       	cpse	r21, r1
     e5c:	39 c1       	rjmp	.+626    	; 0x10d0 <__fp_szero>
     e5e:	f3 c0       	rjmp	.+486    	; 0x1046 <__fp_nan>

00000e60 <__divsf3x>:
     e60:	14 d1       	rcall	.+552    	; 0x108a <__fp_split3>
     e62:	98 f3       	brcs	.-26     	; 0xe4a <__divsf3+0x4>

00000e64 <__divsf3_pse>:
     e64:	99 23       	and	r25, r25
     e66:	c9 f3       	breq	.-14     	; 0xe5a <__divsf3+0x14>
     e68:	55 23       	and	r21, r21
     e6a:	b1 f3       	breq	.-20     	; 0xe58 <__divsf3+0x12>
     e6c:	95 1b       	sub	r25, r21
     e6e:	55 0b       	sbc	r21, r21
     e70:	bb 27       	eor	r27, r27
     e72:	aa 27       	eor	r26, r26
     e74:	62 17       	cp	r22, r18
     e76:	73 07       	cpc	r23, r19
     e78:	84 07       	cpc	r24, r20
     e7a:	38 f0       	brcs	.+14     	; 0xe8a <__divsf3_pse+0x26>
     e7c:	9f 5f       	subi	r25, 0xFF	; 255
     e7e:	5f 4f       	sbci	r21, 0xFF	; 255
     e80:	22 0f       	add	r18, r18
     e82:	33 1f       	adc	r19, r19
     e84:	44 1f       	adc	r20, r20
     e86:	aa 1f       	adc	r26, r26
     e88:	a9 f3       	breq	.-22     	; 0xe74 <__divsf3_pse+0x10>
     e8a:	33 d0       	rcall	.+102    	; 0xef2 <__divsf3_pse+0x8e>
     e8c:	0e 2e       	mov	r0, r30
     e8e:	3a f0       	brmi	.+14     	; 0xe9e <__divsf3_pse+0x3a>
     e90:	e0 e8       	ldi	r30, 0x80	; 128
     e92:	30 d0       	rcall	.+96     	; 0xef4 <__divsf3_pse+0x90>
     e94:	91 50       	subi	r25, 0x01	; 1
     e96:	50 40       	sbci	r21, 0x00	; 0
     e98:	e6 95       	lsr	r30
     e9a:	00 1c       	adc	r0, r0
     e9c:	ca f7       	brpl	.-14     	; 0xe90 <__divsf3_pse+0x2c>
     e9e:	29 d0       	rcall	.+82     	; 0xef2 <__divsf3_pse+0x8e>
     ea0:	fe 2f       	mov	r31, r30
     ea2:	27 d0       	rcall	.+78     	; 0xef2 <__divsf3_pse+0x8e>
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	88 1f       	adc	r24, r24
     eaa:	bb 1f       	adc	r27, r27
     eac:	26 17       	cp	r18, r22
     eae:	37 07       	cpc	r19, r23
     eb0:	48 07       	cpc	r20, r24
     eb2:	ab 07       	cpc	r26, r27
     eb4:	b0 e8       	ldi	r27, 0x80	; 128
     eb6:	09 f0       	breq	.+2      	; 0xeba <__divsf3_pse+0x56>
     eb8:	bb 0b       	sbc	r27, r27
     eba:	80 2d       	mov	r24, r0
     ebc:	bf 01       	movw	r22, r30
     ebe:	ff 27       	eor	r31, r31
     ec0:	93 58       	subi	r25, 0x83	; 131
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	2a f0       	brmi	.+10     	; 0xed0 <__divsf3_pse+0x6c>
     ec6:	9e 3f       	cpi	r25, 0xFE	; 254
     ec8:	51 05       	cpc	r21, r1
     eca:	68 f0       	brcs	.+26     	; 0xee6 <__divsf3_pse+0x82>
     ecc:	b6 c0       	rjmp	.+364    	; 0x103a <__fp_inf>
     ece:	00 c1       	rjmp	.+512    	; 0x10d0 <__fp_szero>
     ed0:	5f 3f       	cpi	r21, 0xFF	; 255
     ed2:	ec f3       	brlt	.-6      	; 0xece <__divsf3_pse+0x6a>
     ed4:	98 3e       	cpi	r25, 0xE8	; 232
     ed6:	dc f3       	brlt	.-10     	; 0xece <__divsf3_pse+0x6a>
     ed8:	86 95       	lsr	r24
     eda:	77 95       	ror	r23
     edc:	67 95       	ror	r22
     ede:	b7 95       	ror	r27
     ee0:	f7 95       	ror	r31
     ee2:	9f 5f       	subi	r25, 0xFF	; 255
     ee4:	c9 f7       	brne	.-14     	; 0xed8 <__divsf3_pse+0x74>
     ee6:	88 0f       	add	r24, r24
     ee8:	91 1d       	adc	r25, r1
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	97 f9       	bld	r25, 7
     ef0:	08 95       	ret
     ef2:	e1 e0       	ldi	r30, 0x01	; 1
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	bb 1f       	adc	r27, r27
     efc:	62 17       	cp	r22, r18
     efe:	73 07       	cpc	r23, r19
     f00:	84 07       	cpc	r24, r20
     f02:	ba 07       	cpc	r27, r26
     f04:	20 f0       	brcs	.+8      	; 0xf0e <__divsf3_pse+0xaa>
     f06:	62 1b       	sub	r22, r18
     f08:	73 0b       	sbc	r23, r19
     f0a:	84 0b       	sbc	r24, r20
     f0c:	ba 0b       	sbc	r27, r26
     f0e:	ee 1f       	adc	r30, r30
     f10:	88 f7       	brcc	.-30     	; 0xef4 <__divsf3_pse+0x90>
     f12:	e0 95       	com	r30
     f14:	08 95       	ret

00000f16 <__fixsfsi>:
     f16:	04 d0       	rcall	.+8      	; 0xf20 <__fixunssfsi>
     f18:	68 94       	set
     f1a:	b1 11       	cpse	r27, r1
     f1c:	d9 c0       	rjmp	.+434    	; 0x10d0 <__fp_szero>
     f1e:	08 95       	ret

00000f20 <__fixunssfsi>:
     f20:	bc d0       	rcall	.+376    	; 0x109a <__fp_splitA>
     f22:	88 f0       	brcs	.+34     	; 0xf46 <__fixunssfsi+0x26>
     f24:	9f 57       	subi	r25, 0x7F	; 127
     f26:	90 f0       	brcs	.+36     	; 0xf4c <__fixunssfsi+0x2c>
     f28:	b9 2f       	mov	r27, r25
     f2a:	99 27       	eor	r25, r25
     f2c:	b7 51       	subi	r27, 0x17	; 23
     f2e:	a0 f0       	brcs	.+40     	; 0xf58 <__fixunssfsi+0x38>
     f30:	d1 f0       	breq	.+52     	; 0xf66 <__fixunssfsi+0x46>
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	88 1f       	adc	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	1a f0       	brmi	.+6      	; 0xf42 <__fixunssfsi+0x22>
     f3c:	ba 95       	dec	r27
     f3e:	c9 f7       	brne	.-14     	; 0xf32 <__fixunssfsi+0x12>
     f40:	12 c0       	rjmp	.+36     	; 0xf66 <__fixunssfsi+0x46>
     f42:	b1 30       	cpi	r27, 0x01	; 1
     f44:	81 f0       	breq	.+32     	; 0xf66 <__fixunssfsi+0x46>
     f46:	c3 d0       	rcall	.+390    	; 0x10ce <__fp_zero>
     f48:	b1 e0       	ldi	r27, 0x01	; 1
     f4a:	08 95       	ret
     f4c:	c0 c0       	rjmp	.+384    	; 0x10ce <__fp_zero>
     f4e:	67 2f       	mov	r22, r23
     f50:	78 2f       	mov	r23, r24
     f52:	88 27       	eor	r24, r24
     f54:	b8 5f       	subi	r27, 0xF8	; 248
     f56:	39 f0       	breq	.+14     	; 0xf66 <__fixunssfsi+0x46>
     f58:	b9 3f       	cpi	r27, 0xF9	; 249
     f5a:	cc f3       	brlt	.-14     	; 0xf4e <__fixunssfsi+0x2e>
     f5c:	86 95       	lsr	r24
     f5e:	77 95       	ror	r23
     f60:	67 95       	ror	r22
     f62:	b3 95       	inc	r27
     f64:	d9 f7       	brne	.-10     	; 0xf5c <__fixunssfsi+0x3c>
     f66:	3e f4       	brtc	.+14     	; 0xf76 <__fixunssfsi+0x56>
     f68:	90 95       	com	r25
     f6a:	80 95       	com	r24
     f6c:	70 95       	com	r23
     f6e:	61 95       	neg	r22
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	8f 4f       	sbci	r24, 0xFF	; 255
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	08 95       	ret

00000f78 <__floatunsisf>:
     f78:	e8 94       	clt
     f7a:	09 c0       	rjmp	.+18     	; 0xf8e <__floatsisf+0x12>

00000f7c <__floatsisf>:
     f7c:	97 fb       	bst	r25, 7
     f7e:	3e f4       	brtc	.+14     	; 0xf8e <__floatsisf+0x12>
     f80:	90 95       	com	r25
     f82:	80 95       	com	r24
     f84:	70 95       	com	r23
     f86:	61 95       	neg	r22
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	8f 4f       	sbci	r24, 0xFF	; 255
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	99 23       	and	r25, r25
     f90:	a9 f0       	breq	.+42     	; 0xfbc <__floatsisf+0x40>
     f92:	f9 2f       	mov	r31, r25
     f94:	96 e9       	ldi	r25, 0x96	; 150
     f96:	bb 27       	eor	r27, r27
     f98:	93 95       	inc	r25
     f9a:	f6 95       	lsr	r31
     f9c:	87 95       	ror	r24
     f9e:	77 95       	ror	r23
     fa0:	67 95       	ror	r22
     fa2:	b7 95       	ror	r27
     fa4:	f1 11       	cpse	r31, r1
     fa6:	f8 cf       	rjmp	.-16     	; 0xf98 <__floatsisf+0x1c>
     fa8:	fa f4       	brpl	.+62     	; 0xfe8 <__floatsisf+0x6c>
     faa:	bb 0f       	add	r27, r27
     fac:	11 f4       	brne	.+4      	; 0xfb2 <__floatsisf+0x36>
     fae:	60 ff       	sbrs	r22, 0
     fb0:	1b c0       	rjmp	.+54     	; 0xfe8 <__floatsisf+0x6c>
     fb2:	6f 5f       	subi	r22, 0xFF	; 255
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	16 c0       	rjmp	.+44     	; 0xfe8 <__floatsisf+0x6c>
     fbc:	88 23       	and	r24, r24
     fbe:	11 f0       	breq	.+4      	; 0xfc4 <__floatsisf+0x48>
     fc0:	96 e9       	ldi	r25, 0x96	; 150
     fc2:	11 c0       	rjmp	.+34     	; 0xfe6 <__floatsisf+0x6a>
     fc4:	77 23       	and	r23, r23
     fc6:	21 f0       	breq	.+8      	; 0xfd0 <__floatsisf+0x54>
     fc8:	9e e8       	ldi	r25, 0x8E	; 142
     fca:	87 2f       	mov	r24, r23
     fcc:	76 2f       	mov	r23, r22
     fce:	05 c0       	rjmp	.+10     	; 0xfda <__floatsisf+0x5e>
     fd0:	66 23       	and	r22, r22
     fd2:	71 f0       	breq	.+28     	; 0xff0 <__floatsisf+0x74>
     fd4:	96 e8       	ldi	r25, 0x86	; 134
     fd6:	86 2f       	mov	r24, r22
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	2a f0       	brmi	.+10     	; 0xfe8 <__floatsisf+0x6c>
     fde:	9a 95       	dec	r25
     fe0:	66 0f       	add	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	da f7       	brpl	.-10     	; 0xfde <__floatsisf+0x62>
     fe8:	88 0f       	add	r24, r24
     fea:	96 95       	lsr	r25
     fec:	87 95       	ror	r24
     fee:	97 f9       	bld	r25, 7
     ff0:	08 95       	ret

00000ff2 <__fp_cmp>:
     ff2:	99 0f       	add	r25, r25
     ff4:	00 08       	sbc	r0, r0
     ff6:	55 0f       	add	r21, r21
     ff8:	aa 0b       	sbc	r26, r26
     ffa:	e0 e8       	ldi	r30, 0x80	; 128
     ffc:	fe ef       	ldi	r31, 0xFE	; 254
     ffe:	16 16       	cp	r1, r22
    1000:	17 06       	cpc	r1, r23
    1002:	e8 07       	cpc	r30, r24
    1004:	f9 07       	cpc	r31, r25
    1006:	c0 f0       	brcs	.+48     	; 0x1038 <__fp_cmp+0x46>
    1008:	12 16       	cp	r1, r18
    100a:	13 06       	cpc	r1, r19
    100c:	e4 07       	cpc	r30, r20
    100e:	f5 07       	cpc	r31, r21
    1010:	98 f0       	brcs	.+38     	; 0x1038 <__fp_cmp+0x46>
    1012:	62 1b       	sub	r22, r18
    1014:	73 0b       	sbc	r23, r19
    1016:	84 0b       	sbc	r24, r20
    1018:	95 0b       	sbc	r25, r21
    101a:	39 f4       	brne	.+14     	; 0x102a <__fp_cmp+0x38>
    101c:	0a 26       	eor	r0, r26
    101e:	61 f0       	breq	.+24     	; 0x1038 <__fp_cmp+0x46>
    1020:	23 2b       	or	r18, r19
    1022:	24 2b       	or	r18, r20
    1024:	25 2b       	or	r18, r21
    1026:	21 f4       	brne	.+8      	; 0x1030 <__fp_cmp+0x3e>
    1028:	08 95       	ret
    102a:	0a 26       	eor	r0, r26
    102c:	09 f4       	brne	.+2      	; 0x1030 <__fp_cmp+0x3e>
    102e:	a1 40       	sbci	r26, 0x01	; 1
    1030:	a6 95       	lsr	r26
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	81 1d       	adc	r24, r1
    1036:	81 1d       	adc	r24, r1
    1038:	08 95       	ret

0000103a <__fp_inf>:
    103a:	97 f9       	bld	r25, 7
    103c:	9f 67       	ori	r25, 0x7F	; 127
    103e:	80 e8       	ldi	r24, 0x80	; 128
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	08 95       	ret

00001046 <__fp_nan>:
    1046:	9f ef       	ldi	r25, 0xFF	; 255
    1048:	80 ec       	ldi	r24, 0xC0	; 192
    104a:	08 95       	ret

0000104c <__fp_pscA>:
    104c:	00 24       	eor	r0, r0
    104e:	0a 94       	dec	r0
    1050:	16 16       	cp	r1, r22
    1052:	17 06       	cpc	r1, r23
    1054:	18 06       	cpc	r1, r24
    1056:	09 06       	cpc	r0, r25
    1058:	08 95       	ret

0000105a <__fp_pscB>:
    105a:	00 24       	eor	r0, r0
    105c:	0a 94       	dec	r0
    105e:	12 16       	cp	r1, r18
    1060:	13 06       	cpc	r1, r19
    1062:	14 06       	cpc	r1, r20
    1064:	05 06       	cpc	r0, r21
    1066:	08 95       	ret

00001068 <__fp_round>:
    1068:	09 2e       	mov	r0, r25
    106a:	03 94       	inc	r0
    106c:	00 0c       	add	r0, r0
    106e:	11 f4       	brne	.+4      	; 0x1074 <__fp_round+0xc>
    1070:	88 23       	and	r24, r24
    1072:	52 f0       	brmi	.+20     	; 0x1088 <__fp_round+0x20>
    1074:	bb 0f       	add	r27, r27
    1076:	40 f4       	brcc	.+16     	; 0x1088 <__fp_round+0x20>
    1078:	bf 2b       	or	r27, r31
    107a:	11 f4       	brne	.+4      	; 0x1080 <__fp_round+0x18>
    107c:	60 ff       	sbrs	r22, 0
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <__fp_round+0x20>
    1080:	6f 5f       	subi	r22, 0xFF	; 255
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	8f 4f       	sbci	r24, 0xFF	; 255
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	08 95       	ret

0000108a <__fp_split3>:
    108a:	57 fd       	sbrc	r21, 7
    108c:	90 58       	subi	r25, 0x80	; 128
    108e:	44 0f       	add	r20, r20
    1090:	55 1f       	adc	r21, r21
    1092:	59 f0       	breq	.+22     	; 0x10aa <__fp_splitA+0x10>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	71 f0       	breq	.+28     	; 0x10b4 <__fp_splitA+0x1a>
    1098:	47 95       	ror	r20

0000109a <__fp_splitA>:
    109a:	88 0f       	add	r24, r24
    109c:	97 fb       	bst	r25, 7
    109e:	99 1f       	adc	r25, r25
    10a0:	61 f0       	breq	.+24     	; 0x10ba <__fp_splitA+0x20>
    10a2:	9f 3f       	cpi	r25, 0xFF	; 255
    10a4:	79 f0       	breq	.+30     	; 0x10c4 <__fp_splitA+0x2a>
    10a6:	87 95       	ror	r24
    10a8:	08 95       	ret
    10aa:	12 16       	cp	r1, r18
    10ac:	13 06       	cpc	r1, r19
    10ae:	14 06       	cpc	r1, r20
    10b0:	55 1f       	adc	r21, r21
    10b2:	f2 cf       	rjmp	.-28     	; 0x1098 <__fp_split3+0xe>
    10b4:	46 95       	lsr	r20
    10b6:	f1 df       	rcall	.-30     	; 0x109a <__fp_splitA>
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <__fp_splitA+0x30>
    10ba:	16 16       	cp	r1, r22
    10bc:	17 06       	cpc	r1, r23
    10be:	18 06       	cpc	r1, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	f1 cf       	rjmp	.-30     	; 0x10a6 <__fp_splitA+0xc>
    10c4:	86 95       	lsr	r24
    10c6:	71 05       	cpc	r23, r1
    10c8:	61 05       	cpc	r22, r1
    10ca:	08 94       	sec
    10cc:	08 95       	ret

000010ce <__fp_zero>:
    10ce:	e8 94       	clt

000010d0 <__fp_szero>:
    10d0:	bb 27       	eor	r27, r27
    10d2:	66 27       	eor	r22, r22
    10d4:	77 27       	eor	r23, r23
    10d6:	cb 01       	movw	r24, r22
    10d8:	97 f9       	bld	r25, 7
    10da:	08 95       	ret

000010dc <__gesf2>:
    10dc:	8a df       	rcall	.-236    	; 0xff2 <__fp_cmp>
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <__gesf2+0x6>
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	08 95       	ret

000010e4 <__mulsf3>:
    10e4:	0a d0       	rcall	.+20     	; 0x10fa <__mulsf3x>
    10e6:	c0 cf       	rjmp	.-128    	; 0x1068 <__fp_round>
    10e8:	b1 df       	rcall	.-158    	; 0x104c <__fp_pscA>
    10ea:	28 f0       	brcs	.+10     	; 0x10f6 <__mulsf3+0x12>
    10ec:	b6 df       	rcall	.-148    	; 0x105a <__fp_pscB>
    10ee:	18 f0       	brcs	.+6      	; 0x10f6 <__mulsf3+0x12>
    10f0:	95 23       	and	r25, r21
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <__mulsf3+0x12>
    10f4:	a2 cf       	rjmp	.-188    	; 0x103a <__fp_inf>
    10f6:	a7 cf       	rjmp	.-178    	; 0x1046 <__fp_nan>
    10f8:	eb cf       	rjmp	.-42     	; 0x10d0 <__fp_szero>

000010fa <__mulsf3x>:
    10fa:	c7 df       	rcall	.-114    	; 0x108a <__fp_split3>
    10fc:	a8 f3       	brcs	.-22     	; 0x10e8 <__mulsf3+0x4>

000010fe <__mulsf3_pse>:
    10fe:	99 23       	and	r25, r25
    1100:	d9 f3       	breq	.-10     	; 0x10f8 <__mulsf3+0x14>
    1102:	55 23       	and	r21, r21
    1104:	c9 f3       	breq	.-14     	; 0x10f8 <__mulsf3+0x14>
    1106:	95 0f       	add	r25, r21
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	55 1f       	adc	r21, r21
    110c:	aa 27       	eor	r26, r26
    110e:	ee 27       	eor	r30, r30
    1110:	ff 27       	eor	r31, r31
    1112:	bb 27       	eor	r27, r27
    1114:	00 24       	eor	r0, r0
    1116:	08 94       	sec
    1118:	67 95       	ror	r22
    111a:	20 f4       	brcc	.+8      	; 0x1124 <__mulsf3_pse+0x26>
    111c:	e2 0f       	add	r30, r18
    111e:	f3 1f       	adc	r31, r19
    1120:	b4 1f       	adc	r27, r20
    1122:	0a 1e       	adc	r0, r26
    1124:	22 0f       	add	r18, r18
    1126:	33 1f       	adc	r19, r19
    1128:	44 1f       	adc	r20, r20
    112a:	aa 1f       	adc	r26, r26
    112c:	66 95       	lsr	r22
    112e:	a9 f7       	brne	.-22     	; 0x111a <__mulsf3_pse+0x1c>
    1130:	77 95       	ror	r23
    1132:	30 f4       	brcc	.+12     	; 0x1140 <__mulsf3_pse+0x42>
    1134:	f3 0f       	add	r31, r19
    1136:	b4 1f       	adc	r27, r20
    1138:	0a 1e       	adc	r0, r26
    113a:	12 1e       	adc	r1, r18
    113c:	08 f4       	brcc	.+2      	; 0x1140 <__mulsf3_pse+0x42>
    113e:	63 95       	inc	r22
    1140:	33 0f       	add	r19, r19
    1142:	44 1f       	adc	r20, r20
    1144:	aa 1f       	adc	r26, r26
    1146:	22 1f       	adc	r18, r18
    1148:	76 95       	lsr	r23
    114a:	99 f7       	brne	.-26     	; 0x1132 <__mulsf3_pse+0x34>
    114c:	87 95       	ror	r24
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__mulsf3_pse+0x5a>
    1150:	b4 0f       	add	r27, r20
    1152:	0a 1e       	adc	r0, r26
    1154:	12 1e       	adc	r1, r18
    1156:	63 1f       	adc	r22, r19
    1158:	44 0f       	add	r20, r20
    115a:	aa 1f       	adc	r26, r26
    115c:	22 1f       	adc	r18, r18
    115e:	33 1f       	adc	r19, r19
    1160:	86 95       	lsr	r24
    1162:	a9 f7       	brne	.-22     	; 0x114e <__mulsf3_pse+0x50>
    1164:	86 2f       	mov	r24, r22
    1166:	71 2d       	mov	r23, r1
    1168:	60 2d       	mov	r22, r0
    116a:	11 24       	eor	r1, r1
    116c:	9f 57       	subi	r25, 0x7F	; 127
    116e:	50 40       	sbci	r21, 0x00	; 0
    1170:	8a f0       	brmi	.+34     	; 0x1194 <__mulsf3_pse+0x96>
    1172:	e1 f0       	breq	.+56     	; 0x11ac <__mulsf3_pse+0xae>
    1174:	88 23       	and	r24, r24
    1176:	4a f0       	brmi	.+18     	; 0x118a <__mulsf3_pse+0x8c>
    1178:	ee 0f       	add	r30, r30
    117a:	ff 1f       	adc	r31, r31
    117c:	bb 1f       	adc	r27, r27
    117e:	66 1f       	adc	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	91 50       	subi	r25, 0x01	; 1
    1186:	50 40       	sbci	r21, 0x00	; 0
    1188:	a9 f7       	brne	.-22     	; 0x1174 <__mulsf3_pse+0x76>
    118a:	9e 3f       	cpi	r25, 0xFE	; 254
    118c:	51 05       	cpc	r21, r1
    118e:	70 f0       	brcs	.+28     	; 0x11ac <__mulsf3_pse+0xae>
    1190:	54 cf       	rjmp	.-344    	; 0x103a <__fp_inf>
    1192:	9e cf       	rjmp	.-196    	; 0x10d0 <__fp_szero>
    1194:	5f 3f       	cpi	r21, 0xFF	; 255
    1196:	ec f3       	brlt	.-6      	; 0x1192 <__mulsf3_pse+0x94>
    1198:	98 3e       	cpi	r25, 0xE8	; 232
    119a:	dc f3       	brlt	.-10     	; 0x1192 <__mulsf3_pse+0x94>
    119c:	86 95       	lsr	r24
    119e:	77 95       	ror	r23
    11a0:	67 95       	ror	r22
    11a2:	b7 95       	ror	r27
    11a4:	f7 95       	ror	r31
    11a6:	e7 95       	ror	r30
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	c1 f7       	brne	.-16     	; 0x119c <__mulsf3_pse+0x9e>
    11ac:	fe 2b       	or	r31, r30
    11ae:	88 0f       	add	r24, r24
    11b0:	91 1d       	adc	r25, r1
    11b2:	96 95       	lsr	r25
    11b4:	87 95       	ror	r24
    11b6:	97 f9       	bld	r25, 7
    11b8:	08 95       	ret

000011ba <__mulhi3>:
    11ba:	00 24       	eor	r0, r0
    11bc:	55 27       	eor	r21, r21
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__mulhi3+0xe>
    11c0:	08 0e       	add	r0, r24
    11c2:	59 1f       	adc	r21, r25
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	29 f0       	breq	.+10     	; 0x11d6 <__mulhi3+0x1c>
    11cc:	76 95       	lsr	r23
    11ce:	67 95       	ror	r22
    11d0:	b8 f3       	brcs	.-18     	; 0x11c0 <__mulhi3+0x6>
    11d2:	71 05       	cpc	r23, r1
    11d4:	b9 f7       	brne	.-18     	; 0x11c4 <__mulhi3+0xa>
    11d6:	80 2d       	mov	r24, r0
    11d8:	95 2f       	mov	r25, r21
    11da:	08 95       	ret

000011dc <__divmodhi4>:
    11dc:	97 fb       	bst	r25, 7
    11de:	07 2e       	mov	r0, r23
    11e0:	16 f4       	brtc	.+4      	; 0x11e6 <__divmodhi4+0xa>
    11e2:	00 94       	com	r0
    11e4:	06 d0       	rcall	.+12     	; 0x11f2 <__divmodhi4_neg1>
    11e6:	77 fd       	sbrc	r23, 7
    11e8:	08 d0       	rcall	.+16     	; 0x11fa <__divmodhi4_neg2>
    11ea:	2d d0       	rcall	.+90     	; 0x1246 <__udivmodhi4>
    11ec:	07 fc       	sbrc	r0, 7
    11ee:	05 d0       	rcall	.+10     	; 0x11fa <__divmodhi4_neg2>
    11f0:	3e f4       	brtc	.+14     	; 0x1200 <__divmodhi4_exit>

000011f2 <__divmodhi4_neg1>:
    11f2:	90 95       	com	r25
    11f4:	81 95       	neg	r24
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	08 95       	ret

000011fa <__divmodhi4_neg2>:
    11fa:	70 95       	com	r23
    11fc:	61 95       	neg	r22
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255

00001200 <__divmodhi4_exit>:
    1200:	08 95       	ret

00001202 <__udivmodsi4>:
    1202:	a1 e2       	ldi	r26, 0x21	; 33
    1204:	1a 2e       	mov	r1, r26
    1206:	aa 1b       	sub	r26, r26
    1208:	bb 1b       	sub	r27, r27
    120a:	fd 01       	movw	r30, r26
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <__udivmodsi4_ep>

0000120e <__udivmodsi4_loop>:
    120e:	aa 1f       	adc	r26, r26
    1210:	bb 1f       	adc	r27, r27
    1212:	ee 1f       	adc	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	a2 17       	cp	r26, r18
    1218:	b3 07       	cpc	r27, r19
    121a:	e4 07       	cpc	r30, r20
    121c:	f5 07       	cpc	r31, r21
    121e:	20 f0       	brcs	.+8      	; 0x1228 <__udivmodsi4_ep>
    1220:	a2 1b       	sub	r26, r18
    1222:	b3 0b       	sbc	r27, r19
    1224:	e4 0b       	sbc	r30, r20
    1226:	f5 0b       	sbc	r31, r21

00001228 <__udivmodsi4_ep>:
    1228:	66 1f       	adc	r22, r22
    122a:	77 1f       	adc	r23, r23
    122c:	88 1f       	adc	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	1a 94       	dec	r1
    1232:	69 f7       	brne	.-38     	; 0x120e <__udivmodsi4_loop>
    1234:	60 95       	com	r22
    1236:	70 95       	com	r23
    1238:	80 95       	com	r24
    123a:	90 95       	com	r25
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	bd 01       	movw	r22, r26
    1242:	cf 01       	movw	r24, r30
    1244:	08 95       	ret

00001246 <__udivmodhi4>:
    1246:	aa 1b       	sub	r26, r26
    1248:	bb 1b       	sub	r27, r27
    124a:	51 e1       	ldi	r21, 0x11	; 17
    124c:	07 c0       	rjmp	.+14     	; 0x125c <__udivmodhi4_ep>

0000124e <__udivmodhi4_loop>:
    124e:	aa 1f       	adc	r26, r26
    1250:	bb 1f       	adc	r27, r27
    1252:	a6 17       	cp	r26, r22
    1254:	b7 07       	cpc	r27, r23
    1256:	10 f0       	brcs	.+4      	; 0x125c <__udivmodhi4_ep>
    1258:	a6 1b       	sub	r26, r22
    125a:	b7 0b       	sbc	r27, r23

0000125c <__udivmodhi4_ep>:
    125c:	88 1f       	adc	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	5a 95       	dec	r21
    1262:	a9 f7       	brne	.-22     	; 0x124e <__udivmodhi4_loop>
    1264:	80 95       	com	r24
    1266:	90 95       	com	r25
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	08 95       	ret

0000126e <eeprom_read_byte>:
    126e:	e1 99       	sbic	0x1c, 1	; 28
    1270:	fe cf       	rjmp	.-4      	; 0x126e <eeprom_read_byte>
    1272:	9f bb       	out	0x1f, r25	; 31
    1274:	8e bb       	out	0x1e, r24	; 30
    1276:	e0 9a       	sbi	0x1c, 0	; 28
    1278:	99 27       	eor	r25, r25
    127a:	8d b3       	in	r24, 0x1d	; 29
    127c:	08 95       	ret

0000127e <eeprom_write_byte>:
    127e:	26 2f       	mov	r18, r22

00001280 <eeprom_write_r18>:
    1280:	e1 99       	sbic	0x1c, 1	; 28
    1282:	fe cf       	rjmp	.-4      	; 0x1280 <eeprom_write_r18>
    1284:	1c ba       	out	0x1c, r1	; 28
    1286:	9f bb       	out	0x1f, r25	; 31
    1288:	8e bb       	out	0x1e, r24	; 30
    128a:	2d bb       	out	0x1d, r18	; 29
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	e2 9a       	sbi	0x1c, 2	; 28
    1292:	e1 9a       	sbi	0x1c, 1	; 28
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	08 95       	ret

0000129a <_exit>:
    129a:	f8 94       	cli

0000129c <__stop_program>:
    129c:	ff cf       	rjmp	.-2      	; 0x129c <__stop_program>
